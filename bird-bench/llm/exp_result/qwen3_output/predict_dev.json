{
    "0": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS HighestFreeRate\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.County = 'Alameda';\t----- bird -----\tcalifornia_schools",
    "1": "SELECT \n    frpm.`Percent (%) Eligible Free (Ages 5-17)`\nFROM \n    frpm\nJOIN \n    schools ON frpm.CDSCode = schools.CDSCode\nWHERE \n    frpm.`School Type` = 'Continuation'\n    AND frpm.`Percent (%) Eligible Free (Ages 5-17)` IS NOT NULL\nORDER BY \n    frpm.`Percent (%) Eligible Free (Ages 5-17)` ASC\nLIMIT 3;\t----- bird -----\tcalifornia_schools",
    "2": "SELECT DISTINCT Zip\nFROM schools\nWHERE County = 'Fresno'\n  AND District = 'Fresno County Office of Education'\n  AND Charter = 1;\t----- bird -----\tcalifornia_schools",
    "3": "SELECT s.MailStreet\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nORDER BY f.`FRPM Count (K-12)` DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "4": "SELECT Phone\nFROM schools\nWHERE Charter = 1\n  AND FundingType = 'Direct Charter'\n  AND OpenDate > '2000-01-01';\t----- bird -----\tcalifornia_schools",
    "5": "SELECT COUNT(*) AS VirtualSchoolsAbove400\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE s.AvgScrMath > 400\n  AND sc.Virtual = 'Y';\t----- bird -----\tcalifornia_schools",
    "6": "SELECT \n    s.School,\n    s.cds AS CDSCode,\n    sat.NumTstTakr,\n    s.Magnet\nFROM \n    satscores sat\nJOIN \n    schools s ON sat.cds = s.CDSCode\nWHERE \n    sat.NumTstTakr > 500\n    AND (s.Magnet = 1 OR s.Magnet IS NOT NULL);\t----- bird -----\tcalifornia_schools",
    "7": "SELECT s.Phone\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE sat.NumGE1500 IS NOT NULL\nORDER BY sat.NumGE1500 DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "8": "SELECT s.NumTstTakr\nFROM frpm f\nJOIN satscores s ON f.CDSCode = s.cds\nWHERE f.`FRPM Count (K-12)` = (\n    SELECT MAX(`FRPM Count (K-12)`)\n    FROM frpm\n);\t----- bird -----\tcalifornia_schools",
    "9": "SELECT COUNT(*) AS DirectlyCharterFundedSchools\nFROM satscores s\nJOIN frpm f ON s.cds = f.CDSCode\nWHERE s.AvgScrMath > 560\n  AND f.`Charter Funding Type` = 'Directly Funded';\t----- bird -----\tcalifornia_schools",
    "10": "SELECT f.`FRPM Count (Ages 5-17)`\nFROM frpm f\nWHERE f.CDSCode = (\n    SELECT s.cds\n    FROM satscores s\n    WHERE s.rtype = 'S'  -- 'S' for school-level SAT data\n    ORDER BY s.AvgScrRead DESC\n    LIMIT 1\n);\t----- bird -----\tcalifornia_schools",
    "11": "SELECT CDSCode\nFROM frpm\nWHERE `Enrollment (K-12)` > 500;\t----- bird -----\tcalifornia_schools",
    "12": "SELECT MAX(f.`Percent (%) Eligible Free (Ages 5-17)`) AS MaxEligibleFreeRate\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nJOIN frpm f ON sc.CDSCode = f.CDSCode\nWHERE (CAST(s.NumGE1500 AS REAL) / s.NumTstTakr) > 0.3;\t----- bird -----\tcalifornia_schools",
    "13": "with the top 3 SAT excellence rates**, we need to:\n\n1. **Understand what \"SAT excellence rate\" means**:\n   - Since the column `NumGE1500` exists in the `satscores` table, it likely represents the number of students who scored **1500 or more** on the SAT.\n   - The **excellence rate** can be calculated as:\n     ```\n     (NumGE1500 / NumTstTakr) * 100\n     ```\n\n2. **Join the `satscores` table with the `schools` table** to get the **phone numbers** of the schools.\n\n3. **Calculate the excellence rate**, **rank the schools**, and **select the top 3**.\n\n4. **Return the phone numbers** of those top 3 schools.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT s.Phone\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE sat.rtype = 'S'  -- 'S' for school-level SAT data\n  AND sat.NumTstTakr > 0\nORDER BY (sat.NumGE1500 * 100.0 / sat.NumTstTakr) DESC\nLIMIT 3;\t----- bird -----\tcalifornia_schools",
    "14": "SELECT \n    s.NCESSchool AS NCES_School_ID,\n    frpm.`Enrollment (Ages 5-17)` AS Enrollment_Ages_5_17\nFROM \n    frpm\nJOIN \n    schools s ON frpm.CDSCode = s.CDSCode\nWHERE \n    frpm.`Enrollment (Ages 5-17)` IS NOT NULL\nORDER BY \n    frpm.`Enrollment (Ages 5-17)` DESC\nLIMIT 5;\t----- bird -----\tcalifornia_schools",
    "15": "SELECT \n    schools.District,\n    AVG(satscores.AvgScrRead) AS AvgReadingScore\nFROM \n    satscores\nJOIN \n    schools ON satscores.cds = schools.CDSCode\nWHERE \n    schools.StatusType = 'Active'\nGROUP BY \n    schools.District\nORDER BY \n    AvgReadingScore DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "16": "SELECT COUNT(*) AS NumSchools\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE schools.County = 'Alameda'\n  AND satscores.NumTstTakr < 100;\t----- bird -----\tcalifornia_schools",
    "17": "SELECT \n    s.CharterNum,\n    ss.AvgScrWrite\nFROM \n    satscores ss\nJOIN \n    schools s ON ss.cds = s.CDSCode\nWHERE \n    ss.AvgScrWrite > 499\nORDER BY \n    ss.AvgScrWrite DESC;\t----- bird -----\tcalifornia_schools",
    "18": "SELECT COUNT(DISTINCT s.cds) AS SchoolCount\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE s.County = 'Fresno'\n  AND s.FundingType = 'Directly Funded Charter'\n  AND sat.NumTstTakr <= 250;\t----- bird -----\tcalifornia_schools",
    "19": "SELECT s.Phone\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE sat.rtype = 'S'  -- 'S' indicates a school-level record\n  AND sat.AvgScrMath IS NOT NULL\nORDER BY sat.AvgScrMath DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "20": "SELECT COUNT(*) AS SchoolCount\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.County = 'Amador'\n  AND f.`Low Grade` = '9'\n  AND f.`High Grade` = '12';\t----- bird -----\tcalifornia_schools",
    "21": "SELECT COUNT(*) AS SchoolCount\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.County = 'Los Angeles'\n  AND frpm.`Free Meal Count (K-12)` > 500\n  AND frpm.`FRPM Count (K-12)` < 700;\t----- bird -----\tcalifornia_schools",
    "22": "SELECT \n    satscores.cds,\n    schools.School,\n    satscores.NumTstTakr\nFROM \n    satscores\nJOIN \n    schools ON satscores.cds = schools.CDSCode\nWHERE \n    schools.County = 'Contra Costa'\nORDER BY \n    satscores.NumTstTakr DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "23": "SELECT \n    frpm.`School Name`,\n    schools.Street || ', ' || schools.City || ', ' || schools.State || ' ' || schools.Zip AS FullAddress\nFROM \n    frpm\nJOIN \n    schools ON frpm.CDSCode = schools.CDSCode\nWHERE \n    ABS(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30;\t----- bird -----\tcalifornia_schools",
    "24": "SELECT DISTINCT s.School\nFROM frpm f\nJOIN satscores sat ON f.CDSCode = sat.cds\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Percent (%) Eligible Free (K-12)` > 0.1\n  AND sat.NumGE1500 > 0;\t----- bird -----\tcalifornia_schools",
    "25": "SELECT \n    s.School,\n    s.FundingType\nFROM \n    satscores sat\nJOIN \n    schools s ON sat.cds = s.CDSCode\nWHERE \n    s.County = 'Riverside'\n    AND sat.AvgScrMath > 400;\t----- bird -----\tcalifornia_schools",
    "26": "SELECT \n    s.School AS SchoolName,\n    s.Street AS Street,\n    s.City AS City,\n    s.Zip AS Zip,\n    s.State AS State\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.County = 'Monterey'\n    AND f.`School Type` = 'High School'\n    AND f.`FRPM Count (Ages 5-17)` > 800;\t----- bird -----\tcalifornia_schools",
    "27": "SELECT \n    s.School,\n    AVG(ss.AvgScrWrite) AS AvgWritingScore,\n    s.Phone\nFROM \n    schools s\nJOIN \n    satscores ss ON s.CDSCode = ss.cds\nWHERE \n    s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01'\nGROUP BY \n    s.School, s.Phone;\t----- bird -----\tcalifornia_schools",
    "28": "SELECT \n    s.School,\n    s.DOCType,\n    (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) AS EnrollmentDifference\nFROM \n    frpm\nJOIN \n    schools s ON frpm.CDSCode = s.CDSCode\nWHERE \n    s.FundingType = 'Local'\n    AND (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > (\n        SELECT \n            AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`)\n        FROM \n            frpm f\n        JOIN \n            schools s2 ON f.CDSCode = s2.CDSCode\n        WHERE \n            s2.FundingType = 'Local'\n    );\t----- bird -----\tcalifornia_schools",
    "29": "SELECT s.OpenDate\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE (f.`Low Grade` = '1' AND f.`High Grade` = '12') \n   OR (f.`Low Grade` = 'K' AND f.`High Grade` = '12')\n   OR (s.GSoffered LIKE '%1-12%' OR s.GSserved LIKE '%1-12%')\nORDER BY f.`Enrollment (K-12)` DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "30": "SELECT \n    s.City,\n    SUM(f.`Enrollment (K-12)`) AS TotalEnrollment\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    f.`Enrollment (K-12)` IS NOT NULL\nGROUP BY \n    s.City\nORDER BY \n    TotalEnrollment ASC\nLIMIT 5;\t----- bird -----\tcalifornia_schools",
    "31": "SELECT \n    frpm.`School Name`,\n    frpm.`Enrollment (K-12)`,\n    frpm.`Percent (%) Eligible Free (K-12)` AS EligibleFreeRate\nFROM \n    frpm\nJOIN \n    schools ON frpm.CDSCode = schools.CDSCode\nORDER BY \n    frpm.`Enrollment (K-12)` DESC\nLIMIT 2 OFFSET 9;\t----- bird -----\tcalifornia_schools",
    "32": "SELECT \n    frpm.`School Name`,\n    frpm.`Percent (%) Eligible FRPM (K-12)` AS Eligible_FRPM_Rate\nFROM \n    frpm\nJOIN \n    schools ON frpm.CDSCode = schools.CDSCode\nWHERE \n    schools.DOC = '66'\n    AND frpm.`FRPM Count (K-12)` IS NOT NULL\n    AND frpm.`Percent (%) Eligible FRPM (K-12)` IS NOT NULL\nORDER BY \n    frpm.`FRPM Count (K-12)` DESC\nLIMIT 5;\t----- bird -----\tcalifornia_schools",
    "33": "SELECT \n    s.School AS SchoolName,\n    s.Website\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;\t----- bird -----\tcalifornia_schools",
    "34": "SELECT \n    frpm.`Percent (%) Eligible Free (Ages 5-17)` AS FreeRateAges5To17\nFROM \n    schools\nJOIN \n    frpm ON schools.CDSCode = frpm.CDSCode\nWHERE \n    (schools.AdmLName1 = 'Gibson' AND schools.AdmFName1 = 'Kacey')\n    OR (schools.AdmLName2 = 'Gibson' AND schools.AdmFName2 = 'Kacey')\n    OR (schools.AdmLName3 = 'Gibson' AND schools.AdmFName3 = 'Kacey');\t----- bird -----\tcalifornia_schools",
    "35": "SELECT \n    s.AdmEmail1 AS AdministratorEmail\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.Charter = 1\nORDER BY \n    f.`Enrollment (K-12)` ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "36": "SELECT \n    s.School,\n    s.AdmFName1 || ' ' || s.AdmLName1 AS Administrator\nFROM \n    satscores sat\nJOIN \n    schools s ON sat.cds = s.CDSCode\nWHERE \n    sat.rtype = 'S'\nORDER BY \n    sat.NumGE1500 DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "37": "SELECT \n    s.Street,\n    s.City,\n    s.Zip,\n    s.State\nFROM \n    satscores sat\nJOIN \n    schools s ON sat.cds = s.CDSCode\nWHERE \n    sat.rtype = 'S'  -- 'S' for school-level data\n    AND sat.NumTstTakr > 0\nORDER BY \n    (sat.NumGE1500 * 100.0 / sat.NumTstTakr) ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "38": "SELECT s.Website\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE s.County = 'Los Angeles'\n  AND sat.NumTstTakr BETWEEN 2000 AND 3000;\t----- bird -----\tcalifornia_schools",
    "39": "SELECT AVG(s.NumTstTakr) AS AvgTestTakers\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE sc.City = 'Fresno'\n  AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';\t----- bird -----\tcalifornia_schools",
    "40": "SELECT s.Phone\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE s.District = 'Fresno Unified'\nORDER BY sat.AvgScrRead ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "41": "WITH VirtualSchools AS (\n    SELECT \n        s.CDSCode,\n        s.School,\n        s.County,\n        ss.AvgScrRead\n    FROM \n        schools s\n    JOIN \n        satscores ss ON s.CDSCode = ss.cds\n    WHERE \n        s.Virtual = 'Y'\n        AND ss.rtype = 'S'  -- Assuming 'S' is for school-level data\n),\nRankedVirtualSchools AS (\n    SELECT \n        School,\n        County,\n        AvgScrRead,\n        RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS rank\n    FROM \n        VirtualSchools\n)\nSELECT \n    School\nFROM \n    RankedVirtualSchools\nWHERE \n    rank <= 5;\t----- bird -----\tcalifornia_schools",
    "42": "SELECT s.GSoffered\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE sat.AvgScrMath = (\n    SELECT MAX(AvgScrMath)\n    FROM satscores\n    WHERE rtype = 'S'  -- Assuming 'S' is for school-level scores\n);\t----- bird -----\tcalifornia_schools",
    "43": "SELECT \n    s.cds,\n    s.AvgScrMath AS AverageMathScore,\n    sc.County\nFROM \n    satscores s\nJOIN \n    schools sc ON s.cds = sc.CDSCode\nWHERE \n    s.cds = (\n        SELECT \n            cds\n        FROM \n            satscores\n        WHERE \n            AvgScrRead IS NOT NULL AND \n            AvgScrMath IS NOT NULL AND \n            AvgScrWrite IS NOT NULL\n        ORDER BY \n            (AvgScrRead + AvgScrMath + AvgScrWrite) / 3 ASC\n        LIMIT 1\n    );\t----- bird -----\tcalifornia_schools",
    "44": "SELECT \n    s.AvgScrWrite AS AverageWritingScore,\n    sc.City AS SchoolCity\nFROM \n    satscores s\nJOIN \n    schools sc ON s.cds = sc.CDSCode\nWHERE \n    s.NumGE1500 = (\n        SELECT MAX(NumGE1500)\n        FROM satscores\n        WHERE NumGE1500 > 0\n    );\t----- bird -----\tcalifornia_schools",
    "45": "SELECT \n    s.School,\n    ss.AvgScrWrite\nFROM \n    schools s\nJOIN \n    satscores ss ON s.CDSCode = ss.cds\nWHERE \n    s.AdmLName1 = 'Ulrich' AND s.AdmFName1 = 'Ricci'\n    OR s.AdmLName2 = 'Ulrich' AND s.AdmFName2 = 'Ricci'\n    OR s.AdmLName3 = 'Ulrich' AND s.AdmFName3 = 'Ricci';\t----- bird -----\tcalifornia_schools",
    "46": "SELECT \n    s.CDSCode,\n    s.School,\n    s.County,\n    s.StatusType,\n    s.SOCType,\n    f.`Enrollment (K-12)` AS Enrollment\nFROM \n    schools s\nJOIN \n    frpm f ON s.CDSCode = f.CDSCode\nWHERE \n    s.StatusType = 'Special Education' OR s.SOCType = 'Special Education'\nORDER BY \n    f.`Enrollment (K-12)` DESC;\t----- bird -----\tcalifornia_schools",
    "47": "SELECT \n    strftime('%m', OpenDate) AS Month,\n    COUNT(*) AS SchoolsOpened\nFROM \n    schools\nWHERE \n    County = 'Alameda'\n    AND strftime('%Y', OpenDate) = '1980'\n    AND District = 'Elementary School District'\nGROUP BY \n    strftime('%m', OpenDate);\t----- bird -----\tcalifornia_schools",
    "48": "SELECT\n    COUNT(CASE WHEN DOCType = 'Unified' THEN 1 END) * 1.0 / \n    COUNT(CASE WHEN DOCType = 'Elementary' THEN 1 END) AS Ratio\nFROM schools\nWHERE County = 'Orange';\t----- bird -----\tcalifornia_schools",
    "49": "with the most number of closed schools**, and to **list the names of the schools and their closure dates**, we need to:\n\n---\n\n### **Step-by-step Plan:**\n\n1. **Identify closed schools**:\n   - Use the `ClosedDate` column in the `schools` table to determine if a school is closed.\n   - A non-null `ClosedDate` means the school is closed.\n\n2. **Group by county**:\n   - Count the number of closed schools per county.\n\n3. **Find the county with the most closed schools**:\n   - Use `ORDER BY` and `LIMIT 1` to get the top county.\n\n4. **List the names and closure dates of the schools in that county**:\n   - Filter the `schools` table for that county and where `ClosedDate IS NOT NULL`.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\n-- Step 1: Find the county with the most closed schools\nWITH ClosedSchoolsPerCounty AS (\n    SELECT \n        County,\n        COUNT(*) AS ClosedSchoolCount\n    FROM schools\n    WHERE ClosedDate IS NOT NULL\n    GROUP BY County\n    ORDER BY ClosedSchoolCount DESC\n    LIMIT 1\n)\n\n-- Step 2: Get all closed schools in that county\nSELECT \n    School,\n    ClosedDate\nFROM schools\nWHERE \n    County = (SELECT County FROM ClosedSchoolsPerCounty)\n    AND ClosedDate IS NOT NULL;\t----- bird -----\tcalifornia_schools",
    "50": "SELECT s.School, sc.Street\nFROM satscores sats\nJOIN schools s ON sats.cds = s.CDSCode\nWHERE sats.AvgScrMath IS NOT NULL\nORDER BY sats.AvgScrMath DESC\nLIMIT 1 OFFSET 6;\t----- bird -----\tcalifornia_schools",
    "51": "SELECT \n    s.MailStreet,\n    sc.sname\nFROM \n    satscores sc\nJOIN \n    schools s ON sc.cds = s.CDSCode\nWHERE \n    sc.AvgScrRead IS NOT NULL\nORDER BY \n    sc.AvgScrRead ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "52": "SELECT COUNT(*) AS TotalSchools\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE sc.MailCity = 'Lakeport'\n  AND (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) >= 1500;\t----- bird -----\tcalifornia_schools",
    "53": "SELECT SUM(s.NumTstTakr) AS TotalTestTakers\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE sc.MailCity = 'Fresno';\t----- bird -----\tcalifornia_schools",
    "54": "SELECT \n    School, \n    MailZip\nFROM \n    schools\nWHERE \n    (AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian') OR\n    (AdmFName2 = 'Avetik' AND AdmLName2 = 'Atoian') OR\n    (AdmFName3 = 'Avetik' AND AdmLName3 = 'Atoian');\t----- bird -----\tcalifornia_schools",
    "55": "SELECT\n    (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Colusa') * 1.0 /\n    (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Humboldt') AS Ratio_Colusa_to_Humboldt;\t----- bird -----\tcalifornia_schools",
    "56": "SELECT COUNT(*) AS ActiveSchoolsInSanJoaquin\nFROM schools\nWHERE MailState = 'CA'\n  AND MailCity = 'San Joaquin'\n  AND StatusType = 'Active';\t----- bird -----\tcalifornia_schools",
    "57": "SELECT s.Phone, s.Ext\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE ss.AvgScrWrite IS NOT NULL\nORDER BY ss.AvgScrWrite DESC\nLIMIT 1 OFFSET 332;\t----- bird -----\tcalifornia_schools",
    "58": "SELECT School, Phone, Ext\nFROM schools\nWHERE Zip = '95203-3704';\t----- bird -----\tcalifornia_schools",
    "59": "SELECT DISTINCT Website\nFROM schools\nWHERE \n    (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR\n    (AdmFName2 = 'Mike' AND AdmLName2 = 'Larson') OR\n    (AdmFName3 = 'Mike' AND AdmLName3 = 'Larson') OR\n    (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez') OR\n    (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez') OR\n    (AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez');\t----- bird -----\tcalifornia_schools",
    "60": "SELECT Website\nFROM schools\nWHERE County = 'San Joaquin'\n  AND Charter = 1\n  AND Virtual = 'Y';\t----- bird -----\tcalifornia_schools",
    "61": "SELECT COUNT(*) AS CharterSchoolsInHickman\nFROM schools\nWHERE Charter = 1\n  AND City = 'Hickman'\n  AND DOCType = 'Elementary';\t----- bird -----\tcalifornia_schools",
    "62": "SELECT COUNT(*) AS NonCharteredSchoolsCount\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.County = 'Los Angeles'\n  AND s.Charter = 0\n  AND f.`Percent (%) Eligible Free (K-12)` < 0.18;\t----- bird -----\tcalifornia_schools",
    "63": "SELECT \n    School,\n    City,\n    AdmFName1, AdmLName1,\n    AdmFName2, AdmLName2,\n    AdmFName3, AdmLName3\nFROM \n    schools\nWHERE \n    Charter = 1\n    AND CharterNum = '00D2';\t----- bird -----\tcalifornia_schools",
    "64": "SELECT COUNT(*) AS TotalSchools\nFROM schools\nWHERE MailCity = 'Hickman'\n  AND CharterNum = '00D4';\t----- bird -----\tcalifornia_schools",
    "65": "SELECT \n    100.0 * COUNT(CASE WHEN frpm.`Charter Funding Type` = 'Locally Funded' THEN 1 END) / COUNT(*) AS percentage_locally_funded\nFROM \n    schools\nJOIN \n    frpm ON schools.CDSCode = frpm.CDSCode\nWHERE \n    schools.County = 'Santa Clara'\n    AND frpm.`Charter School (Y/N)` = 1;\t----- bird -----\tcalifornia_schools",
    "66": "SELECT COUNT(*) AS DirectlyFundedSchoolsOpened\nFROM schools\nWHERE County = 'Stanislaus'\n  AND FundingType = 'Directly Funded'\n  AND StatusType = 'Open'\n  AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';\t----- bird -----\tcalifornia_schools",
    "67": "SELECT COUNT(*) AS TotalClosures\nFROM schools\nWHERE DOCType = 'Community College District'\n  AND City = 'San Francisco'\n  AND strftime('%Y', ClosedDate) = '1989';\t----- bird -----\tcalifornia_schools",
    "68": "SELECT \n    County,\n    COUNT(*) AS ClosureCount\nFROM \n    schools\nWHERE \n    DOCType = 'CEA'\n    AND ClosedDate IS NOT NULL\n    AND strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989'\nGROUP BY \n    County\nORDER BY \n    ClosureCount DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "69": "SELECT DISTINCT NCESDist\nFROM schools\nWHERE SOCType = 'State Special Schools';\t----- bird -----\tcalifornia_schools",
    "70": "SELECT\n    COUNT(CASE WHEN StatusType = 'Active' THEN 1 END) AS ActiveCommunityDaySchools,\n    COUNT(CASE WHEN StatusType = 'Closed' THEN 1 END) AS ClosedCommunityDaySchools\nFROM\n    schools\nWHERE\n    DOCType = 'District Community Day School'\n    AND County = 'Alpine';\t----- bird -----\tcalifornia_schools",
    "71": "SELECT District\nFROM schools\nWHERE City = 'Fresno' AND Magnet = 0;\t----- bird -----\tcalifornia_schools",
    "72": "SELECT frpm.`Enrollment (Ages 5-17)`\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.School = 'State Special School'\n  AND schools.City = 'Fremont'\n  AND frpm.`Academic Year` = '2014-2015';\t----- bird -----\tcalifornia_schools",
    "73": "SELECT frpm.`FRPM Count (Ages 5-17)`\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.School = 'Youth Authority School'\n  AND schools.MailStreet = 'PO Box 1040';\t----- bird -----\tcalifornia_schools",
    "74": "SELECT f.`Low Grade`\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.NCESDist = '0613360'\n  AND s.StatusType = 'District Special Education Consortia School';\t----- bird -----\tcalifornia_schools",
    "75": "SELECT s.School\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`County Code` = '37'\n  AND f.`NSLP Provision Status` = '2';\t----- bird -----\tcalifornia_schools",
    "76": "SELECT s.City\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`NSLP Provision Status` = '2'\n  AND f.`Low Grade` = '9'\n  AND f.`High Grade` = '12'\n  AND f.`County Name` = 'Merced'\n  AND f.`School Type` = 'High School';\t----- bird -----\tcalifornia_schools",
    "77": "SELECT \n    s.School AS SchoolName,\n    f.`Percent (%) Eligible FRPM (Ages 5-17)` AS FRPMPercent\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.County = 'Los Angeles'\n    AND f.`Low Grade` = 'K'\n    AND f.`High Grade` = '9';\t----- bird -----\tcalifornia_schools",
    "78": "SELECT GSserved, COUNT(*) AS Count\nFROM schools\nWHERE City = 'Adelanto'\nGROUP BY GSserved\nORDER BY Count DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "79": "SELECT \n    County,\n    COUNT(*) AS VirtualSchoolCount\nFROM \n    schools\nWHERE \n    County IN ('San Diego', 'Santa Barbara')\n    AND Virtual = 'Y'\nGROUP BY \n    County\nORDER BY \n    VirtualSchoolCount DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "80": "SELECT \n    School AS SchoolName,\n    Latitude,\n    GSoffered AS SchoolType\nFROM \n    schools\nWHERE \n    Latitude = (SELECT MAX(Latitude) FROM schools);\t----- bird -----\tcalifornia_schools",
    "81": "SELECT \n    s.City,\n    s.School,\n    f.`Low Grade`\nFROM \n    schools s\nJOIN \n    frpm f ON s.CDSCode = f.CDSCode\nWHERE \n    s.State = 'CA'\nORDER BY \n    s.Latitude ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "82": "SELECT GSoffered\nFROM schools\nWHERE Longitude = (SELECT MAX(Longitude) FROM schools);\t----- bird -----\tcalifornia_schools",
    "83": "SELECT \n    s.City,\n    COUNT(*) AS NumSchools\nFROM \n    schools s\nJOIN \n    frpm f ON s.CDSCode = f.CDSCode\nWHERE \n    s.Magnet = 1\n    AND s.GSserved = 'K-8'\n    AND f.`NSLP Provision Status` IS NOT NULL\nGROUP BY \n    s.City\nHAVING \n    COUNT(DISTINCT f.`NSLP Provision Status`) > 1;\t----- bird -----\tcalifornia_schools",
    "84": "SELECT \n    name AS FirstName,\n    District,\n    COUNT(*) AS Count\nFROM (\n    SELECT AdmFName1 AS name, District FROM schools WHERE AdmFName1 IS NOT NULL\n    UNION ALL\n    SELECT AdmFName2 AS name, District FROM schools WHERE AdmFName2 IS NOT NULL\n    UNION ALL\n    SELECT AdmFName3 AS name, District FROM schools WHERE AdmFName3 IS NOT NULL\n)\nGROUP BY FirstName, District\nORDER BY Count DESC\nLIMIT 2;\t----- bird -----\tcalifornia_schools",
    "85": "SELECT \n    frpm.`Percent (%) Eligible Free (K-12)`,\n    frpm.`District Code`\nFROM \n    schools\nJOIN \n    frpm ON schools.CDSCode = frpm.CDSCode\nWHERE \n    schools.AdmFName1 = 'Alusine' \n    OR schools.AdmFName2 = 'Alusine' \n    OR schools.AdmFName3 = 'Alusine';\t----- bird -----\tcalifornia_schools",
    "86": "SELECT \n    s1.School AS SchoolName,\n    s1.District,\n    s1.County,\n    s2.AdmLName1 AS AdministratorLastName\nFROM \n    schools s1\nJOIN \n    schools s2 ON s1.CDSCode = s2.CDSCode\nWHERE \n    s1.CharterNum = '40';\t----- bird -----\tcalifornia_schools",
    "87": "SELECT \n    AdmEmail1, AdmEmail2, AdmEmail3\nFROM \n    schools\nWHERE \n    County = 'San Bernardino' \n    AND City = 'San Bernardino'\n    AND District = 'San Bernardino City Unified'\n    AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'\n    AND (SOCType = 'Public Intermediate/Middle School' OR SOCType = 'Unified School');\t----- bird -----\tcalifornia_schools",
    "88": "SELECT \n    s.School,\n    adm.AdmEmail1 AS AdministratorEmail\nFROM \n    satscores sat\nJOIN \n    schools s ON sat.cds = s.CDSCode\nWHERE \n    sat.rtype = 'S'\nORDER BY \n    sat.NumGE1500 DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "89": "SELECT COUNT(DISTINCT a.account_id) AS account_count\nFROM account a\nJOIN card c ON a.account_id = c.account_id\nJOIN trans t ON a.account_id = t.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = 'East Bohemia'\n  AND c.issued > t.date;\t----- bird -----\tfinancial",
    "90": "SELECT COUNT(DISTINCT a.account_id)\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = 'Prague'\n  AND a.account_id NOT IN (\n    SELECT DISTINCT account_id\n    FROM loan\n);\t----- bird -----\tfinancial",
    "91": "SELECT \n    strftime('%Y', trans.date) AS year,\n    AVG(district.A12) AS avg_unemployment_ratio\nFROM trans\nJOIN account ON trans.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE strftime('%Y', trans.date) IN ('1995', '1996')\nGROUP BY year;\t----- bird -----\tfinancial",
    "92": "SELECT COUNT(*) AS district_count\nFROM (\n    SELECT d.district_id\n    FROM client c\n    JOIN district d ON c.district_id = d.district_id\n    WHERE c.gender = 'F'\n    GROUP BY d.district_id\n    HAVING AVG(d.A10) > 6000 AND AVG(d.A10) < 10000\n) AS filtered_districts;\t----- bird -----\tfinancial",
    "93": "SELECT COUNT(*) AS male_clients_count\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.gender = 'M'\n  AND d.A2 = 'North Bohemia'\n  AND d.A10 > 8000;\t----- bird -----\tfinancial",
    "94": "with the lowest average salary.\n\n---\n\n### Step-by-step SQL Query:\n\n```sql\n-- Step 1: Find the oldest female client(s)\nWITH oldest_female_clients AS (\n    SELECT client_id\n    FROM client\n    WHERE gender = 'F'\n    ORDER BY birth_date ASC\n    LIMIT 1\n),\n\n-- Step 2: Calculate average balance (salary proxy) for each account\naccount_avg_balance AS (\n    SELECT \n        a.account_id,\n        AVG(t.balance) AS avg_balance\n    FROM account a\n    JOIN disp d ON a.account_id = d.account_id\n    JOIN client c ON d.client_id = c.client_id\n    JOIN trans t ON a.account_id = t.account_id\n    GROUP BY a.account_id\n),\n\n-- Step 3: Find the lowest and highest average balances\nbalance_extremes AS (\n    SELECT \n        MIN(avg_balance) AS min_avg_balance,\n        MAX(avg_balance) AS max_avg_balance\n    FROM account_avg_balance\n),\n\n-- Step 4: Get the account(s) of the oldest female client with the lowest average balance\noldest_female_lowest_balance AS (\n    SELECT \n        a.account_id,\n        aab.avg_balance\n    FROM account a\n    JOIN disp d ON a.account_id = d.account_id\n    JOIN client c ON d.client_id = c.client_id\n    JOIN account_avg_balance aab ON a.account_id = aab.account_id\n    JOIN oldest_female_clients ofc ON c.client_id = ofc.client_id\n    ORDER BY aab.avg_balance ASC\n    LIMIT 1\n)\n\n-- Final Step: Output the account numbers and the salary gap\nSELECT \n    account_id,\n    (SELECT max_avg_balance - min_avg_balance FROM balance_extremes) AS salary_gap\nFROM oldest_female_lowest_balance;\t----- bird -----\tfinancial",
    "95": "SELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district dist ON c.district_id = dist.district_id\nWHERE c.birth_date = (\n    SELECT MAX(birth_date)\n    FROM client\n)\nAND dist.A10 = (\n    SELECT MAX(A10)\n    FROM district\n);\t----- bird -----\tfinancial",
    "96": "SELECT COUNT(DISTINCT c.client_id) AS weekly_owner_count\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE a.frequency = 'weekly'\n  AND d.type = 'Owner';\t----- bird -----\tfinancial",
    "97": "SELECT DISTINCT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card cd ON d.disp_id = cd.disp_id\nJOIN trans t ON d.account_id = t.account_id\nWHERE d.type = 'disponent'\n  AND cd.issued > t.date;\t----- bird -----\tfinancial",
    "98": "SELECT account_id, amount\nFROM loan\nWHERE date BETWEEN '1997-01-01' AND '1997-12-31'\n  AND status = 'approved';\t----- bird -----\tfinancial",
    "99": "SELECT \n    l.account_id,\n    MAX(l.amount) AS max_approved_amount\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nWHERE \n    l.duration > 12\n    AND l.status = 'approved'\n    AND strftime('%Y', a.date) = '1993'\nGROUP BY \n    l.account_id\nORDER BY \n    max_approved_amount DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "100": "SELECT COUNT(DISTINCT a.account_id) AS female_accounts_in_sokolov\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN disp dp ON c.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id\nWHERE c.gender = 'F'\n  AND c.birth_date < '1950-01-01'\n  AND d.A2 = 'Sokolov';\t----- bird -----\tfinancial",
    "101": "SELECT MIN(date) AS earliest_date\n   FROM trans\n   WHERE date BETWEEN '1995-01-01' AND '1995-12-31';\t----- bird -----\tfinancial",
    "102": "SELECT DISTINCT a.account_id\nFROM account a\nJOIN trans t ON a.account_id = t.account_id\nWHERE a.date < '1997-01-01'\nGROUP BY a.account_id\nHAVING MAX(t.balance) > 3000;\t----- bird -----\tfinancial",
    "103": "SELECT d.client_id\nFROM card c\nJOIN disp d ON c.disp_id = d.disp_id\nWHERE c.issued = '1994-03-03';\t----- bird -----\tfinancial",
    "104": "SELECT a.date AS account_open_date\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nWHERE t.amount = 840 AND t.date = '1998-10-14';\t----- bird -----\tfinancial",
    "105": "SELECT a.district_id\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.date = '1994-08-25';\t----- bird -----\tfinancial",
    "106": "SELECT MAX(t.amount) AS max_transaction_amount\nFROM trans t\nWHERE t.account_id IN (\n    SELECT d.account_id\n    FROM disp d\n    WHERE d.client_id IN (\n        SELECT cl.client_id\n        FROM client cl\n        WHERE cl.client_id IN (\n            SELECT d2.client_id\n            FROM disp d2\n            WHERE d2.disp_id IN (\n                SELECT c.disp_id\n                FROM card c\n                WHERE c.issued = '1996-10-21'\n            )\n        )\n    )\n);\t----- bird -----\tfinancial",
    "107": "SELECT district_id\nFROM district\nORDER BY A10 DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "108": "SELECT t.amount\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE d.client_id = (\n    SELECT d2.client_id\n    FROM loan l2\n    JOIN disp d2 ON l2.account_id = d2.account_id\n    ORDER BY l2.amount DESC\n    LIMIT 1\n)\nAND t.date = (\n    SELECT MIN(t2.date)\n    FROM trans t2\n    WHERE t2.account_id = t.account_id\n);\t----- bird -----\tfinancial",
    "109": "SELECT COUNT(DISTINCT c.client_id) AS female_clients_in_jesenik\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN disp ON c.client_id = disp.client_id\nWHERE d.A2 = 'Jesenik'\n  AND c.gender = 'F';\t----- bird -----\tfinancial",
    "110": "SELECT d.disp_id\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE t.amount = 5100\n  AND t.date = '1998-09-02';\t----- bird -----\tfinancial",
    "111": "SELECT COUNT(*) AS account_count\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A2 = 'Litomerice'\n)\nAND strftime('%Y', date) = '1996';\t----- bird -----\tfinancial",
    "112": "SELECT d.A2 AS district_name\nFROM client c\nJOIN disp ON c.client_id = disp.client_id\nJOIN account a ON disp.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE c.gender = 'F' AND c.birth_date = '1976-01-29';\t----- bird -----\tfinancial",
    "113": "SELECT c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN loan l ON d.account_id = l.account_id\nWHERE l.amount = 98832 AND l.date = '1996-01-03';\t----- bird -----\tfinancial",
    "114": "SELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district d2 ON c.district_id = d2.district_id\nWHERE d2.A3 = 'Prague'\nORDER BY a.date ASC\nLIMIT 1;\t----- bird -----\tfinancial",
    "115": "WITH south_bohemia_district AS (\n    SELECT district_id\n    FROM district\n    WHERE A3 = 'South Bohemia'\n    ORDER BY A8 DESC\n    LIMIT 1\n),\nmale_clients_count AS (\n    SELECT COUNT(*) AS male_count\n    FROM client\n    WHERE district_id = (SELECT district_id FROM south_bohemia_district)\n      AND gender = 'M'\n),\ntotal_clients_count AS (\n    SELECT COUNT(*) AS total_count\n    FROM client\n    WHERE district_id = (SELECT district_id FROM south_bohemia_district)\n)\nSELECT \n    (male_clients_count.male_count * 100.0 / total_clients_count.total_count) AS male_percentage\nFROM \n    male_clients_count, total_clients_count;\t----- bird -----\tfinancial",
    "116": "SELECT client_id\nFROM loan\nWHERE date = '1993-07-05';\t----- bird -----\tfinancial",
    "117": "SELECT \n    100.0 * SUM(CASE WHEN status = 'OK' THEN amount ELSE 0 END) / SUM(amount) AS percentage_paid\nFROM loan;\t----- bird -----\tfinancial",
    "118": "SELECT \n    100.0 * COUNT(CASE WHEN status = 'OK' THEN 1 END) / COUNT(*) AS percentage_ok_loans\nFROM \n    loan\nWHERE \n    amount < 100000;\t----- bird -----\tfinancial",
    "119": "SELECT \n    a.account_id,\n    d.A2 AS district_name,\n    d.A3 AS district_region\nFROM \n    account a\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    strftime('%Y', a.date) = '1993'\n    AND EXISTS (\n        SELECT 1\n        FROM trans t\n        WHERE t.account_id = a.account_id\n          AND t.date < a.date\n    );\t----- bird -----\tfinancial",
    "120": "SELECT \n    a.account_id,\n    a.frequency\nFROM \n    account a\nJOIN \n    district d ON a.district_id = d.district_id\nJOIN \n    disp ON a.account_id = disp.account_id\nJOIN \n    client c ON disp.client_id = c.client_id\nWHERE \n    d.A2 = 'East Bohemia'\n    AND a.date BETWEEN '1995-01-01' AND '2000-12-31';\t----- bird -----\tfinancial",
    "121": "SELECT district_id FROM district WHERE A2 = 'Prachatice';\t----- bird -----\tfinancial",
    "122": "SELECT \n    d.district_id,\n    d.A2 AS region\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    l.loan_id = 4990;\t----- bird -----\tfinancial",
    "123": "SELECT \n    l.account_id,\n    a.district_id,\n    d.A2 AS region\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    l.amount > 300000;\t----- bird -----\tfinancial",
    "124": "SELECT \n    l.loan_id,\n    d.A5 AS district,\n    d.A10 AS average_salary\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    l.duration = 60;\t----- bird -----\tfinancial",
    "125": "with `disp` and `client` to get the client's district**\n\n- `loan.account_id` \u2192 `account.account_id` \u2192 `disp.account_id` \u2192 `disp.client_id` \u2192 `client.client_id` \u2192 `client.district_id`\n\n---\n\n### **Step 3: Use the `district` table to get unemployment rate for 1995 and 1996**\n\n- The `district` table has columns `A13` and `A14` which represent the **unemployment rate in 1995 and 1996**, respectively.\n\nWe can calculate the **percentage increment** as:\n\n```sql\n(A14 - A13) / A13 * 100\n```\n\n---\n\n### **Step 4: Final SQL Query**\n\n```sql\nSELECT \n    d.district_id,\n    d.A2 AS district_name,\n    d.A13 AS unemployment_1995,\n    d.A14 AS unemployment_1996,\n    (d.A14 - d.A13) / d.A13 * 100 AS unemployment_rate_increment\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    disp d2 ON a.account_id = d2.account_id\nJOIN \n    client c ON d2.client_id = c.client_id\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    l.status = 'A'  -- Assuming 'A' means active/running\n    AND l.payments < l.amount;\t----- bird -----\tfinancial",
    "126": "SELECT\n    100.0 * COUNT(CASE WHEN d.A2 = 'Decin' THEN a.account_id END) / COUNT(a.account_id) AS percentage\nFROM\n    account a\nJOIN\n    district d ON a.district_id = d.district_id\nWHERE\n    strftime('%Y', a.date) = '1993';\t----- bird -----\tfinancial",
    "127": "SELECT account_id\nFROM account\nWHERE frequency = 'monthly';\t----- bird -----\tfinancial",
    "128": "SELECT \n    a.district_id,\n    COUNT(*) AS female_account_holders\nFROM \n    client c\nJOIN \n    disp d ON c.client_id = d.client_id\nJOIN \n    account a ON d.account_id = a.account_id\nWHERE \n    c.gender = 'F'\nGROUP BY \n    a.district_id\nORDER BY \n    female_account_holders DESC\nLIMIT 9;\t----- bird -----\tfinancial",
    "129": "with `account`\n  - `A2`: the district name (we want to display this)\n\n- We **exclude credit card transactions**. This is not directly in the `trans` table, but we can infer that **credit card transactions** are in the `card` table. So we need to **exclude transactions** that are associated with a **card**.\n\n---\n\n### \u2705 Step 2: Filter for January 1996\n\nWe need to filter transactions where:\n```sql\ntrans.date BETWEEN '1996-01-01' AND '1996-01-31'\n```\n\n---\n\n### \u2705 Step 3: Filter for withdrawals\n\nWe want only:\n```sql\ntrans.type = 'withdrawal'\n```\n\n---\n\n### \u2705 Step 4: Exclude credit card transactions\n\nWe can do this by **excluding** `account_id`s that are associated with a `card` in the `card` table.\n\n---\n\n### \u2705 Step 5: Join with `account` and `district` to get district names\n\nWe need to join:\n- `trans` \u2192 `account` on `account_id`\n- `account` \u2192 `district` on `district_id`\n\n---\n\n### \u2705 Step 6: Group by district and sum withdrawals\n\nWe want to **sum the withdrawal amounts** per district and **order by total amount descending**, then **limit to top 10**.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT \n    d.A2 AS district_name,\n    SUM(t.amount) AS total_withdrawals\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE \n    t.type = 'withdrawal'\n    AND t.date BETWEEN '1996-01-01' AND '1996-01-31'\n    AND a.account_id NOT IN (\n        SELECT DISTINCT disp.account_id\n        FROM disp\n        JOIN card ON disp.disp_id = card.disp_id\n    )\nGROUP BY d.district_id\nORDER BY total_withdrawals DESC\nLIMIT 10;\t----- bird -----\tfinancial",
    "130": "SELECT COUNT(DISTINCT c.client_id) AS no_credit_card_clients\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nLEFT JOIN disp dp ON c.client_id = dp.client_id\nLEFT JOIN card cd ON dp.disp_id = cd.disp_id\nWHERE d.A2 = 'South Bohemia'\n  AND cd.card_id IS NULL;\t----- bird -----\tfinancial",
    "131": "SELECT \n    d.district_id,\n    d.A2 AS district_name,\n    COUNT(*) AS active_loan_count\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    l.status = 'active'\nGROUP BY \n    d.district_id, d.A2\nORDER BY \n    active_loan_count DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "132": "SELECT AVG(l.amount) AS average_loan_amount\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE c.gender = 'M';\t----- bird -----\tfinancial",
    "133": "SELECT \n    A2 AS district_name,\n    A3 AS branch_location,\n    A13 AS unemployment_rate\nFROM \n    district\nWHERE \n    A13 = (\n        SELECT MAX(A13)\n        FROM district\n    )\nORDER BY \n    A13 DESC;\t----- bird -----\tfinancial",
    "134": "SELECT COUNT(*) AS account_count\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    ORDER BY A11 DESC\n    LIMIT 1\n);\t----- bird -----\tfinancial",
    "135": "SELECT COUNT(DISTINCT t.account_id) AS negative_balance_accounts\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN card c ON d.disp_id = c.disp_id\nWHERE a.frequency = 'monthly'\n  AND t.type = 'withdrawal'\n  AND t.balance < 0\n  AND c.type = 'credit';\t----- bird -----\tfinancial",
    "136": "SELECT COUNT(*) AS loan_count\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND loan.amount >= 250000\n  AND account.frequency = 'monthly';\t----- bird -----\tfinancial",
    "137": "SELECT COUNT(*) AS running_accounts_count\nFROM account\nWHERE district_id = 1;\t----- bird -----\tfinancial",
    "138": "SELECT district_id\nFROM district\nORDER BY A9 DESC\nLIMIT 1 OFFSET 1;\t----- bird -----\tfinancial",
    "139": "SELECT COUNT(*) AS high_level_owner_cards\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'high-level'\n  AND disp.type = 'OWNER';\t----- bird -----\tfinancial",
    "140": "SELECT COUNT(*) AS account_count\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A2 = 'Pisek'\n);\t----- bird -----\tfinancial",
    "141": "SELECT d.district_id, d.A2 AS district_name, SUM(t.amount) AS total_amount\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.date BETWEEN '1997-01-01' AND '1997-12-31'\nGROUP BY d.district_id\nHAVING SUM(t.amount) > 10000;\t----- bird -----\tfinancial",
    "142": "SELECT DISTINCT o.account_id\nFROM `order` o\nJOIN account a ON o.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE o.k_symbol = 'SIPO'\n  AND d.A2 = 'Pisek';\t----- bird -----\tfinancial",
    "143": "SELECT DISTINCT d.account_id\nFROM card c\nJOIN disp d ON c.disp_id = d.disp_id\nWHERE c.type = 'gold';\t----- bird -----\tfinancial",
    "144": "SELECT \n    strftime('%Y-%m', date) AS month,\n    AVG(amount) AS average_credit_amount\nFROM \n    trans\nWHERE \n    type = 'CREDIT'\n    AND strftime('%Y', date) = '2021'\nGROUP BY \n    strftime('%Y-%m', date)\nORDER BY \n    month;\t----- bird -----\tfinancial",
    "145": "SELECT DISTINCT c.client_id\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE t.type = 'CREDIT'\n  AND strftime('%Y', t.date) = '1998'\n  AND t.amount < (\n    SELECT AVG(amount)\n    FROM trans\n    WHERE type = 'CREDIT'\n      AND strftime('%Y', date) = '1998'\n  );\t----- bird -----\tfinancial",
    "146": "SELECT DISTINCT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN card cd ON d.disp_id = cd.disp_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE c.gender = 'F';\t----- bird -----\tfinancial",
    "147": "SELECT COUNT(DISTINCT a.account_id) AS female_accounts_in_south_bohemia\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN disp ON c.client_id = disp.client_id\nJOIN account a ON disp.account_id = a.account_id\nWHERE c.gender = 'F'\n  AND d.A2 = 'South Bohemia';\t----- bird -----\tfinancial",
    "148": "SELECT district_id FROM district WHERE A2 = 'Tabor';\t----- bird -----\tfinancial",
    "149": "SELECT DISTINCT a.frequency\nFROM account a\nJOIN client c ON a.district_id = c.district_id\nJOIN district d ON a.district_id = d.district_id\nWHERE a.account_id NOT IN (\n    SELECT DISTINCT account_id\n    FROM loan\n)\nAND d.A10 > 8000\nAND d.A10 <= 9000;\t----- bird -----\tfinancial",
    "150": "SELECT COUNT(DISTINCT t.account_id) AS account_count\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = 'North Bohemia'\n  AND t.bank = 'AB';\t----- bird -----\tfinancial",
    "151": "SELECT DISTINCT d.A2 AS district_name\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.type = 'withdrawal';\t----- bird -----\tfinancial",
    "152": "SELECT AVG(d.A11) AS average_crimes_1995\nFROM district d\nWHERE d.A11 > 4000\n  AND EXISTS (\n    SELECT 1\n    FROM account a\n    WHERE a.district_id = d.district_id\n      AND a.date >= '1997-01-01'\n  );\t----- bird -----\tfinancial",
    "153": "SELECT COUNT(DISTINCT c.card_id) AS classic_cards_eligible_for_loan\nFROM card c\nJOIN disp d ON c.disp_id = d.disp_id\nJOIN loan l ON d.account_id = l.account_id\nWHERE c.type = 'classic';\t----- bird -----\tfinancial",
    "154": "SELECT COUNT(*) AS male_clients_count\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE client.gender = 'M' AND district.A2 = 'Hl.m. Praha';\t----- bird -----\tfinancial",
    "155": "SELECT \n    100.0 * AVG(CASE WHEN issued < '1998-01-01' THEN 1.0 ELSE 0.0 END) AS percent_gold_before_1998\nFROM card\nWHERE type = 'Gold';\t----- bird -----\tfinancial",
    "156": "SELECT c.client_id, c.gender, c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.amount = (\n    SELECT MAX(amount)\n    FROM loan\n);\t----- bird -----\tfinancial",
    "157": "SELECT d.A12 AS crimes_1995\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.account_id = 532;\t----- bird -----\tfinancial",
    "158": "SELECT a.district_id\nFROM `order` o\nJOIN account a ON o.account_id = a.account_id\nWHERE o.order_id = 33333;\t----- bird -----\tfinancial",
    "159": "SELECT t.trans_id, t.date, t.type, t.operation, t.amount, t.balance\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nWHERE d.client_id = 3356\n  AND t.type = 'withdrawal'\n  AND t.operation LIKE '%cash%';\t----- bird -----\tfinancial",
    "160": "SELECT COUNT(DISTINCT a.account_id) AS weekly_accounts_with_small_loans\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.frequency = 'weekly'\n  AND l.amount < 200000;\t----- bird -----\tfinancial",
    "161": "SELECT c.type\nFROM client cl\nJOIN disp d ON cl.client_id = d.client_id\nJOIN card c ON d.disp_id = c.disp_id\nWHERE cl.client_id = 13539;\t----- bird -----\tfinancial",
    "162": "SELECT district_id FROM client WHERE client_id = 3541;\t----- bird -----\tfinancial",
    "163": "SELECT \n    a.district_id,\n    COUNT(DISTINCT a.account_id) AS account_count\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nWHERE \n    l.status = 'OK'  -- assuming 'OK' means the loan was completed with no problems\nGROUP BY \n    a.district_id\nORDER BY \n    account_count DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "164": "SELECT c.client_id, c.gender, c.birth_date\nFROM \"order\" o\nJOIN disp d ON o.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE o.order_id = 32423;\t----- bird -----\tfinancial",
    "165": "SELECT t.*\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nWHERE a.district_id = 5;\t----- bird -----\tfinancial",
    "166": "SELECT district_id FROM district WHERE A2 = 'Jesen\u00edk';\t----- bird -----\tfinancial",
    "167": "SELECT DISTINCT client.client_id\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nJOIN client ON disp.client_id = client.client_id\nWHERE card.type = 'junior credit'\n  AND card.issued > '1996-12-31';\t----- bird -----\tfinancial",
    "168": "SELECT\n    100.0 * SUM(CASE WHEN c.gender = 'F' THEN 1 ELSE 0 END) / COUNT(*) AS percentage_women\nFROM\n    client c\nWHERE\n    c.district_id IN (\n        SELECT district_id\n        FROM district\n        WHERE A10 > 10000\n    );\t----- bird -----\tfinancial",
    "169": "SELECT\n    100.0 * (SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) \n             - SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) \n    / NULLIF(SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END), 0) AS growth_rate_percentage\nFROM\n    loan\nJOIN\n    disp ON loan.account_id = disp.account_id\nJOIN\n    client ON disp.client_id = client.client_id\nWHERE\n    client.gender = 'M'\n    AND strftime('%Y', loan.date) IN ('1996', '1997');\t----- bird -----\tfinancial",
    "170": "SELECT COUNT(*) AS credit_card_withdrawals_after_1995\nFROM trans\nWHERE type = 'withdrawal'\n  AND date > '1995-12-31';\t----- bird -----\tfinancial",
    "171": "SELECT \n    d.A2 AS district_name,\n    COUNT(t.trans_id) AS crime_count\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.date BETWEEN '1996-01-01' AND '1996-12-31'\n  AND d.A2 IN ('East Bohemia', 'North Bohemia')\nGROUP BY d.A2;\t----- bird -----\tfinancial",
    "172": "SELECT \n    type,\n    COUNT(*) AS count\nFROM \n    disp\nWHERE \n    account_id BETWEEN 1 AND 10\n    AND type IN ('owner', 'disponent')\nGROUP BY \n    type;\t----- bird -----\tfinancial",
    "173": "SELECT \n    COUNT(*) AS statement_requests\nFROM \n    trans\nWHERE \n    account_id = 3\n    AND k_symbol = 'V\u00fdpis \u00fa\u010dtu';\t----- bird -----\tfinancial",
    "174": "SELECT strftime('%Y', c.birth_date) AS birth_year\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE a.account_id = 130;\t----- bird -----\tfinancial",
    "175": "SELECT COUNT(DISTINCT a.account_id)\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nWHERE d.type = 'owner'\n  AND a.frequency != '0'\n  AND a.frequency IS NOT NULL;\t----- bird -----\tfinancial",
    "176": "SELECT \n    l.account_id,\n    SUM(l.amount) AS total_debt,\n    GROUP_CONCAT(DISTINCT l.status) AS payment_status\nFROM \n    client c\nJOIN \n    disp d ON c.client_id = d.client_id\nJOIN \n    loan l ON d.account_id = l.account_id\nWHERE \n    c.client_id = 992\nGROUP BY \n    l.account_id;\t----- bird -----\tfinancial",
    "177": "SELECT \n    t.balance AS final_balance,\n    c.gender\nFROM \n    client c\nJOIN \n    disp d ON c.client_id = d.client_id\nJOIN \n    trans t ON d.account_id = t.account_id\nWHERE \n    c.client_id = 4\n    AND t.trans_id = 851;\t----- bird -----\tfinancial",
    "178": "SELECT c.type\nFROM client cl\nJOIN disp d ON cl.client_id = d.client_id\nJOIN card c ON d.disp_id = c.disp_id\nWHERE cl.client_id = 9;\t----- bird -----\tfinancial",
    "179": "SELECT SUM(t.amount) AS total_paid\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN trans t ON d.account_id = t.account_id\nWHERE c.client_id = 617\n  AND strftime('%Y', t.date) = '1998';\t----- bird -----\tfinancial",
    "180": "SELECT \n    client.client_id,\n    client.birth_date\nFROM \n    client\nJOIN \n    disp ON client.client_id = disp.client_id\nJOIN \n    account ON disp.account_id = account.account_id\nJOIN \n    district ON account.district_id = district.district_id\nWHERE \n    client.birth_date BETWEEN '1983-01-01' AND '1987-12-31'\n    AND district.A2 = 'East Bohemia';\t----- bird -----\tfinancial",
    "181": "SELECT DISTINCT c.client_id\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE c.gender = 'F'\nORDER BY l.amount DESC\nLIMIT 3;\t----- bird -----\tfinancial",
    "182": "SELECT COUNT(DISTINCT c.client_id) AS male_home_payment_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN trans t ON d.account_id = t.account_id\nWHERE c.gender = 'M'\n  AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'\n  AND t.k_symbol = 'vyplata'\n  AND t.amount > 4000;\t----- bird -----\tfinancial",
    "183": "SELECT COUNT(*) AS account_count\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE district.A2 = 'Beroun'\n  AND account.date > '1996-12-31';\t----- bird -----\tfinancial",
    "184": "SELECT client_id\nFROM client\nWHERE gender = 'F';\t----- bird -----\tfinancial",
    "185": "SELECT\n    (CAST(female_clients.female_count AS REAL) / total_clients.total_count) AS female_proportion\nFROM\n    (SELECT COUNT(*) AS total_count\n     FROM client c\n     JOIN disp d ON c.client_id = d.client_id\n     JOIN account a ON d.account_id = a.account_id\n     JOIN district d2 ON a.district_id = d2.district_id\n     WHERE d2.A2 = 'Prague') AS total_clients,\n    (SELECT COUNT(*) AS female_count\n     FROM client c\n     JOIN disp d ON c.client_id = d.client_id\n     JOIN account a ON d.account_id = a.account_id\n     JOIN district d2 ON a.district_id = d2.district_id\n     WHERE d2.A2 = 'Prague' AND c.gender = 'F') AS female_clients;\t----- bird -----\tfinancial",
    "186": "SELECT \n    100.0 * COUNT(DISTINCT CASE WHEN a.frequency = 'weekly' THEN c.client_id END) / COUNT(DISTINCT c.client_id) AS percentage_weekly_male_clients\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nWHERE c.gender = 'M';\t----- bird -----\tfinancial",
    "187": "with an **account** that has `frequency = 'weekly'`\n\nSo the SQL query is:\n\n```sql\nSELECT COUNT(DISTINCT c.client_id) AS owner_weekly_clients\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nWHERE d.type = 'Owner' AND a.frequency = 'weekly';\t----- bird -----\tfinancial",
    "188": "SELECT l.account_id, l.amount\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.duration > 24\n  AND a.date < '1997-01-01'\n  AND l.amount = (\n    SELECT MIN(amount)\n    FROM loan l2\n    JOIN account a2 ON l2.account_id = a2.account_id\n    WHERE l2.duration > 24\n      AND a2.date < '1997-01-01'\n  );\t----- bird -----\tfinancial",
    "189": "SELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district dist ON c.district_id = dist.district_id\nWHERE c.gender = 'F'\n  AND c.birth_date = (\n      SELECT MIN(birth_date)\n      FROM client\n      WHERE gender = 'F'\n  )\n  AND dist.A10 = (\n      SELECT MIN(A10)\n      FROM district\n  );\t----- bird -----\tfinancial",
    "190": "SELECT COUNT(*) AS client_count\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE strftime('%Y', client.birth_date) = '1920'\n  AND district.A2 = 'east Bohemia';\t----- bird -----\tfinancial",
    "191": "SELECT COUNT(*) AS num_loans\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.duration = 24\n  AND loan.status = 'prepayment'\n  AND account.frequency = 'weekly';\t----- bird -----\tfinancial",
    "192": "SELECT AVG(l.amount) AS average_loan_amount\nFROM loan l\nJOIN trans t ON l.account_id = t.account_id\nWHERE l.status = 'A'; -- Assuming 'A' means active;\t----- bird -----\tfinancial",
    "193": "SELECT DISTINCT c.client_id, c.district_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nWHERE d.type IN ('DISP2', 'OWNER');\t----- bird -----\tfinancial",
    "194": "SELECT \n    c.client_id,\n    strftime('%Y', 'now') - strftime('%Y', c.birth_date) - \n    (strftime('%m-%d', 'now') < strftime('%m-%d', c.birth_date)) AS age\nFROM card cd\nJOIN disp d ON cd.disp_id = d.disp_id\nJOIN client c ON d.client_id = c.client_id\nWHERE cd.type = 'high level'\n  AND EXISTS (\n      SELECT 1\n      FROM loan l\n      JOIN account a ON l.account_id = a.account_id\n      WHERE a.account_id = d.account_id\n  );\t----- bird -----\tfinancial",
    "195": "SELECT b.bond_type, COUNT(*) AS bond_count\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nGROUP BY b.bond_type\nORDER BY bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "196": "SELECT COUNT(DISTINCT a.molecule_id) AS num_molecules_with_chlorine\nFROM atom a\nWHERE a.element = 'Cl';\t----- bird -----\ttoxicology",
    "197": "SELECT molecule_id\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nGROUP BY molecule_id\nHAVING COUNT(CASE WHEN bond_type != 'single' THEN 1 END) = 0;\t----- bird -----\ttoxicology",
    "198": "SELECT AVG(single_bond_ratio) AS average_single_bond_ratio\nFROM (\n    SELECT \n        m.molecule_id,\n        CAST(COUNT(CASE WHEN b.bond_type = 'single' THEN 1 END) AS REAL) / COUNT(*) AS single_bond_ratio\n    FROM molecule m\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE m.label = 'carcinogenic'\n    GROUP BY m.molecule_id\n) AS carcinogenic_bond_ratios;\t----- bird -----\ttoxicology",
    "199": "SELECT COUNT(*) AS sodium_atom_count\nFROM atom\nWHERE element = 'sodium';\t----- bird -----\ttoxicology",
    "200": "SELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'triple'\n  AND m.label = 'carcinogenic';\t----- bird -----\ttoxicology",
    "201": "SELECT DISTINCT molecule_id\nFROM bond\nWHERE bond_type = 'double';\t----- bird -----\ttoxicology",
    "202": "SELECT COUNT(*) AS triple_bond_count\nFROM bond\nWHERE bond_type = 'triple';\t----- bird -----\ttoxicology",
    "203": "SELECT COUNT(*) AS non_bromine_atom_count\nFROM atom\nWHERE element != 'Br';\t----- bird -----\ttoxicology",
    "204": "with the given schema and constraints.;\t----- bird -----\ttoxicology",
    "205": "SELECT DISTINCT a.molecule_id\nFROM atom a\nWHERE a.element = 'C';\t----- bird -----\ttoxicology",
    "206": "SELECT \n    a1.element AS element1,\n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR004_8_9';\t----- bird -----\ttoxicology",
    "207": "SELECT DISTINCT a.element, a2.element\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON c.atom_id = a.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "208": "SELECT m.label, COUNT(*) AS count\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'Hydrogen'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "209": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'Cl';\t----- bird -----\ttoxicology",
    "210": "SELECT \n    c.atom_id, \n    c.atom_id2\nFROM \n    connected c\nJOIN \n    bond b ON c.bond_id = b.bond_id\nWHERE \n    b.bond_type = 'single';\t----- bird -----\ttoxicology",
    "211": "SELECT \n    c.atom_id, \n    c.atom_id2, \n    b.bond_type, \n    m.molecule_id\nFROM \n    connected c\nJOIN \n    bond b ON c.bond_id = b.bond_id\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nJOIN \n    molecule m ON a1.molecule_id = m.molecule_id;\t----- bird -----\ttoxicology",
    "212": "SELECT \n    element, \n    COUNT(*) AS atom_count\nFROM \n    atom\nJOIN \n    molecule ON atom.molecule_id = molecule.molecule_id\nGROUP BY \n    element\nORDER BY \n    atom_count ASC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "213": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')\n   OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');\t----- bird -----\ttoxicology",
    "214": "SELECT DISTINCT m.label\nFROM molecule m\nWHERE m.label NOT IN (\n    SELECT DISTINCT m2.label\n    FROM molecule m2\n    JOIN atom a ON m2.molecule_id = a.molecule_id\n    WHERE a.element = 'tin'\n)\nAND m.label IS NOT NULL;\t----- bird -----\ttoxicology",
    "215": "SELECT COUNT(*) AS atom_count\nFROM atom\nWHERE element IN ('I', 'S')\n  AND molecule_id IN (\n    SELECT b.molecule_id\n    FROM bond b\n    GROUP BY b.molecule_id\n    HAVING COUNT(CASE WHEN b.bond_type != 'single' THEN 1 END) = 0\n);\t----- bird -----\ttoxicology",
    "216": "SELECT \n    c.atom_id, \n    c.atom_id2\nFROM \n    connected c\nJOIN \n    bond b ON c.bond_id = b.bond_id\nWHERE \n    b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "217": "SELECT DISTINCT a2.*\nFROM atom a1\nJOIN connected c ON a1.atom_id = c.atom_id OR a1.atom_id = c.atom_id2\nJOIN atom a2 ON a2.atom_id = CASE \n    WHEN c.atom_id = a1.atom_id THEN c.atom_id2\n    ELSE c.atom_id\nEND\nWHERE a1.molecule_id = 'TR181'\n  AND a2.molecule_id != 'TR181';\t----- bird -----\ttoxicology",
    "218": "SELECT molecule_id\n   FROM molecule\n   WHERE label LIKE '%carcinogenic%';\t----- bird -----\ttoxicology",
    "219": "with triple bonds.\n\nHowever, the schema **does not include a field indicating whether a molecule is carcinogenic**. This is **missing information** in the schema.\n\n---\n\n### \u2705 Assumption:\nLet\u2019s assume that **carcinogenicity is not stored in the schema**, and we are to **answer based on the schema as it is**.\n\n---\n\n### \u274c Therefore, the question **cannot be answered** with the current schema.\n\nBut if we **assume** that there is a **hidden or external table** (not shown) that contains carcinogenic information, such as:\n\n```sql\nCREATE TABLE `carcinogenic` (\n  `molecule_id` TEXT NOT NULL,\n  `is_carcinogenic` BOOLEAN NOT NULL,\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n)\n```\n\nThen we can proceed.\n\n---\n\n### \u2705 Final SQL (with the assumption of a `carcinogenic` table):\n\n```sql\nSELECT\n  COUNT(DISTINCT CASE WHEN c.is_carcinogenic THEN m.molecule_id END) * 100.0 / COUNT(DISTINCT m.molecule_id) AS percentage_carcinogenic\nFROM\n  molecule m\nJOIN\n  connected c1 ON m.molecule_id = c1.molecule_id\nJOIN\n  bond b ON c1.bond_id = b.bond_id\nLEFT JOIN\n  carcinogenic c ON m.molecule_id = c.molecule_id\nWHERE\n  b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "220": "SELECT DISTINCT element\nFROM atom\nWHERE molecule_id = 'TR000'\nORDER BY element ASC\nLIMIT 3;\t----- bird -----\ttoxicology",
    "221": "SELECT \n    a.element AS atom1_element,\n    a2.element AS atom2_element\nFROM \n    connected c\nJOIN \n    bond b ON c.bond_id = b.bond_id\nJOIN \n    atom a ON c.atom_id = a.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR001_2_6'\n    AND b.molecule_id = 'TR001';\t----- bird -----\ttoxicology",
    "222": "SELECT \n  SUM(CASE WHEN is_carcinogenic = 1 THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN is_carcinogenic = 0 THEN 1 ELSE 0 END) AS difference\nFROM molecule;\t----- bird -----\ttoxicology",
    "223": "SELECT atom_id, atom_id2\nFROM connected\nWHERE bond_id = 'TR000_2_5';\t----- bird -----\ttoxicology",
    "224": "SELECT bond_id\nFROM connected\nWHERE atom_id2 = 'TR000_2';\t----- bird -----\ttoxicology",
    "225": "SELECT DISTINCT m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'double'\nORDER BY m.label ASC\nLIMIT 5;\t----- bird -----\ttoxicology",
    "226": "SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR008';\t----- bird -----\ttoxicology",
    "227": "SELECT \n  ROUND(\n    100.0 * SUM(CASE WHEN is_carcinogenic = 1 THEN 1 ELSE 0 END) / COUNT(*), \n    3\n  ) AS carcinogenic_percentage\nFROM molecule;\t----- bird -----\ttoxicology",
    "228": "SELECT COUNT(*) AS total_hydrogen\nFROM atom\nWHERE element = 'H' AND molecule_id = 'TR206';\t----- bird -----\ttoxicology",
    "229": "SELECT DISTINCT b.bond_type\nFROM bond b\nWHERE b.molecule_id = 'TR000';\t----- bird -----\ttoxicology",
    "230": "with `molecule_id = 'TR060'`.\n2. **Find all atoms in the molecule**: Use the `atom` table to get all atoms with `molecule_id = 'TR060'`.\n3. **Get the elements of those atoms**: From the `atom` table, select the `element` column.\n\nWe don't have a \"toxicology\" table or field in the schema, so we can only retrieve the **label** of the molecule and the **elements** of its atoms.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\n-- Get the label of the molecule TR060\nSELECT label AS molecule_label\nFROM molecule\nWHERE molecule_id = 'TR060';\t----- bird -----\ttoxicology",
    "231": "SELECT \n    b.bond_type,\n    COUNT(*) AS bond_count\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nWHERE \n    b.molecule_id = 'TR010'\nGROUP BY \n    b.bond_type\nORDER BY \n    bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "232": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'single'\nORDER BY m.molecule_id\nLIMIT 3;\t----- bird -----\ttoxicology",
    "233": "SELECT bond_id\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_id\nLIMIT 2;\t----- bird -----\ttoxicology",
    "234": "SELECT COUNT(*) AS bond_count\nFROM connected\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.molecule_id = 'TR009'\n  AND (connected.atom_id = '12' OR connected.atom_id2 = '12');\t----- bird -----\ttoxicology",
    "235": "SELECT COUNT(DISTINCT a.molecule_id) AS bromine_molecules\nFROM atom a\nWHERE a.element = 'Br';\t----- bird -----\ttoxicology",
    "236": "SELECT bond_type FROM bond WHERE bond_id = 'TR001_6_9';\t----- bird -----\ttoxicology",
    "237": "SELECT a.molecule_id, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_10';\t----- bird -----\ttoxicology",
    "238": "SELECT COUNT(DISTINCT bond.molecule_id) AS molecule_count\nFROM bond\nWHERE bond.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "239": "SELECT COUNT(*) AS connection_count\nFROM connected\nWHERE atom_id = '19' OR atom_id2 = '19';\t----- bird -----\ttoxicology",
    "240": "SELECT DISTINCT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.molecule_id = 'TR004';\t----- bird -----\ttoxicology",
    "241": "SELECT COUNT(*) \nFROM molecule \nWHERE label NOT LIKE '%carcinogenic%';\t----- bird -----\ttoxicology",
    "242": "SELECT DISTINCT m.molecule_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element IN ('Sc', 'Ti', 'V', 'Cr', 'Mn');\t----- bird -----\ttoxicology",
    "243": "SELECT DISTINCT c.bond_id\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'phosphorus' AND a2.element = 'nitrogen')\n   OR (a1.element = 'nitrogen' AND a2.element = 'phosphorus');\t----- bird -----\ttoxicology",
    "244": "SELECT \n    b.molecule_id,\n    COUNT(*) AS double_bond_count\nFROM \n    bond b\nWHERE \n    b.bond_type = 'double'\nGROUP BY \n    b.molecule_id\nORDER BY \n    double_bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "245": "SELECT AVG(bond_count) AS avg_bonds_per_iodine\nFROM (\n    SELECT a.atom_id, COUNT(*) AS bond_count\n    FROM atom a\n    JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\n    WHERE a.element = 'iodine'\n    GROUP BY a.atom_id\n) AS iodine_bonds;\t----- bird -----\ttoxicology",
    "246": "SELECT b.bond_type, c.bond_id\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE c.atom_id = '45' OR c.atom_id2 = '45';\t----- bird -----\ttoxicology",
    "247": "SELECT DISTINCT a.element\nFROM atom a\nLEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nWHERE c.atom_id IS NULL;\t----- bird -----\ttoxicology",
    "248": "SELECT \n    a.element AS atom1,\n    a2.element AS atom2\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a ON c.atom_id = a.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    b.molecule_id = 'TR041'\n    AND b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "249": "SELECT element\nFROM atom\nWHERE molecule_id = 'TR144_8_19';\t----- bird -----\ttoxicology",
    "250": "SELECT \n    b.molecule_id,\n    COUNT(*) AS num_double_bonds\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nWHERE \n    b.bond_type = 'double'\nGROUP BY \n    b.molecule_id\nORDER BY \n    num_double_bonds DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "251": "SELECT element, COUNT(*) AS element_count\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label LIKE '%carcinogenic%'\nGROUP BY element\nORDER BY element_count ASC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "252": "SELECT DISTINCT a2.element\nFROM atom a1\nJOIN connected c ON a1.atom_id = c.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a1.element = 'lead';\t----- bird -----\ttoxicology",
    "253": "SELECT \n    a.element AS element1,\n    a2.element AS element2\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a ON c.atom_id = a.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "254": "WITH bond_element_pairs AS (\n    SELECT \n        a1.element AS element1,\n        a2.element AS element2,\n        c.bond_id\n    FROM connected c\n    JOIN atom a1 ON c.atom_id = a1.atom_id\n    JOIN atom a2 ON c.atom_id2 = a2.atom_id\n),\nelement_pair_counts AS (\n    SELECT \n        element1,\n        element2,\n        COUNT(*) AS bond_count\n    FROM bond_element_pairs\n    GROUP BY element1, element2\n),\nmost_common_pair AS (\n    SELECT \n        element1,\n        element2,\n        bond_count\n    FROM element_pair_counts\n    ORDER BY bond_count DESC\n    LIMIT 1\n),\ntotal_bonds AS (\n    SELECT COUNT(*) AS total\n    FROM bond_element_pairs\n)\nSELECT \n    (mc.bond_count * 100.0 / t.total) AS percentage\nFROM most_common_pair mc, total_bonds t;\t----- bird -----\ttoxicology",
    "255": "SELECT \n  ROUND(\n    100.0 * COUNT(CASE WHEN carcinogenic = 1 THEN 1 END) / COUNT(*), \n    5\n  ) AS proportion_carcinogenic_single_bonds\nFROM bond\nWHERE bond_type = 'single';\t----- bird -----\ttoxicology",
    "256": "SELECT COUNT(*) AS total_carbon_hydrogen_atoms\nFROM atom\nWHERE element IN ('carbon', 'hydrogen');\t----- bird -----\ttoxicology",
    "257": "SELECT atom_id\nFROM atom\nWHERE element = 'sulfur';\t----- bird -----\ttoxicology",
    "258": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'Tin';\t----- bird -----\ttoxicology",
    "259": "SELECT COUNT(DISTINCT a.element) AS element_count\nFROM atom a\nWHERE a.molecule_id IN (\n    SELECT b.molecule_id\n    FROM bond b\n    GROUP BY b.molecule_id\n    HAVING COUNT(b.bond_id) = 1\n);\t----- bird -----\ttoxicology",
    "260": "SELECT COUNT(*) AS total_atoms\nFROM atom\nWHERE molecule_id IN (\n    SELECT DISTINCT b.molecule_id\n    FROM bond b\n    WHERE b.bond_type = 'triple'\n)\nAND element IN ('phosphorus', 'bromine');\t----- bird -----\ttoxicology",
    "261": "SELECT b.bond_id\n   FROM bond b\n   JOIN molecule m ON b.molecule_id = m.molecule_id\n   WHERE m.label = 'carcinogenic';\t----- bird -----\ttoxicology",
    "262": "SELECT DISTINCT b.molecule_id\nFROM bond b\nWHERE b.bond_type = 'single'\n  AND NOT EXISTS (\n    SELECT 1\n    FROM bond b2\n    WHERE b2.molecule_id = b.molecule_id\n      AND b2.bond_type != 'single'\n  );\t----- bird -----\ttoxicology",
    "263": "with only single bonds**:\n   - Use the `bond` table to filter `bond_type = 'single'`.\n   - Then, for each `molecule_id`, ensure **all** bonds are single.\n\n2. **Count the number of chlorine atoms in those molecules**:\n   - Use the `atom` table to count atoms where `element = 'Cl'`.\n\n3. **Count the total number of atoms in those molecules**.\n\n4. **Calculate the percentage**:\n   - For each such molecule, compute:\n     ```\n     (number of Cl atoms / total atoms) * 100\n     ```\n\n---\n\n### **SQL Query:**\n\n```sql\nSELECT \n    m.molecule_id,\n    COUNT(CASE WHEN a.element = 'Cl' THEN 1 END) * 100.0 / COUNT(*) AS chlorine_percentage\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.molecule_id IN (\n        SELECT \n            b.molecule_id\n        FROM \n            bond b\n        GROUP BY \n            b.molecule_id\n        HAVING \n            COUNT(CASE WHEN b.bond_type != 'single' THEN 1 END) = 0\n    )\nGROUP BY \n    m.molecule_id;\t----- bird -----\ttoxicology",
    "264": "SELECT molecule_id, label\nFROM molecule\nWHERE molecule_id IN ('TR000', 'TR001', 'TR002');\t----- bird -----\ttoxicology",
    "265": "with `atom_id`, `molecule_id`, and `element`.\n   - `bond`: Stores bonds with `bond_id`, `molecule_id`, and `bond_type`.\n   - `connected`: Links atoms via bonds.\n   - `molecule`: Stores molecules with `molecule_id` and `label`.\n\n2. **Observation**:\n   - There is **no field** in any of the tables that indicates whether a molecule is **carcinogenic** or **non-carcinogenic**.\n   - The only information available is the `label` in the `molecule` table, but it is not specified whether this label contains carcinogenic information.\n\n3. **External Knowledge**:\n   - The prompt says: **\"External Knowledge: None\"**, so we **cannot assume** any additional information about carcinogenicity.\n\n4. **Conclusion**:\n   - Since **no data is available** to determine carcinogenicity, we **cannot generate a query** to list non-carcinogenic molecules.\n\n---\n\n### Final Answer:\nIt is **not possible** to generate an SQL query to list non-carcinogenic molecules because the schema does **not contain any information** about carcinogenicity.\n\n> \u2705 **Answer: Cannot be determined from the given schema.**;\t----- bird -----\ttoxicology",
    "266": "SELECT COUNT(*) AS total_carcinogenic_molecules\n   FROM molecule\n   WHERE molecule_id BETWEEN 'TR000' AND 'TR030'\n     AND label = 'carcinogenic';\t----- bird -----\ttoxicology",
    "267": "SELECT DISTINCT b.bond_type\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';\t----- bird -----\ttoxicology",
    "268": "SELECT \n    a1.element AS element1,\n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology",
    "269": "SELECT COUNT(DISTINCT c.bond_id) AS iodine_bond_count\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a1.element = 'iodine' OR a2.element = 'iodine';\t----- bird -----\ttoxicology",
    "270": "with Calcium are mostly carcinogenic or non-carcinogenic using the provided schema**, because **carcinogenicity is not represented in the database**.\n\n---\n\n### \u2705 If you had a table like this (hypothetically):\n\n```sql\nCREATE TABLE `molecule_property` (\n  `molecule_id` TEXT NOT NULL,\n  `is_carcinogenic` BOOLEAN NOT NULL,\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n);\t----- bird -----\ttoxicology",
    "271": "SELECT \n    a1.element AS element1,\n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR001_1_8';\t----- bird -----\ttoxicology",
    "272": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE b.bond_type = 'triple'\n  AND a.element = 'carbon'\nLIMIT 2;\t----- bird -----\ttoxicology",
    "273": "SELECT \n    (COUNT(DISTINCT CASE WHEN a.element = 'Cl' THEN a.atom_id END) * 100.0 / COUNT(DISTINCT a.atom_id)) AS chlorine_percentage\nFROM \n    atom a\nJOIN \n    molecule m ON a.molecule_id = m.molecule_id\nWHERE \n    m.is_carcinogenic = 1;\t----- bird -----\ttoxicology",
    "274": "SELECT DISTINCT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.molecule_id = 'TR001';\t----- bird -----\ttoxicology",
    "275": "SELECT DISTINCT c.molecule_id\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "276": "SELECT \n    c.atom_id, \n    c.atom_id2\nFROM \n    connected c\nJOIN \n    bond b ON c.bond_id = b.bond_id\nWHERE \n    b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "277": "SELECT \n    a1.element AS element1,\n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR000_1_2';\t----- bird -----\ttoxicology",
    "278": "with `atom_id`, `molecule_id`, and `element`.\n- **`bond`**: Contains bonds with `bond_id`, `molecule_id`, and `bond_type`.\n- **`connected`**: Links atoms via bonds.\n- **`molecule`**: Contains `molecule_id` and `label`.\n\n---\n\n### Step 2: Understand the Question\n\n> **\"How many of the single bond type molecules are non-carcinogenic?\"**\n\n- **\"Single bond type\"** likely means molecules where **all bonds are of the same type**, and that type is **\"single\"**.\n- **\"Non-carcinogenic\"** is **not in the schema**. There is **no column or table** that indicates whether a molecule is carcinogenic or not.\n\n---\n\n### Step 3: External Knowledge\n\n> **External Knowledge: None**\n\nThis means we **cannot infer** or assume any information about carcinogenicity from the schema or data. The question is **unanswerable** with the current schema and no external knowledge.\n\n---\n\n### Step 4: Conclusion\n\nSince **\"non-carcinogenic\"** is not a property we can determine from the schema, and we are not given any external knowledge about it, the question **cannot be answered** using the provided schema.\n\n---\n\n### Final Answer (SQL)\n\nSince the question is unanswerable with the given schema and no external knowledge, **no valid SQL query can be generated** to answer it.\n\n> \u2705 **Answer: The question cannot be answered with the given schema and no external knowledge.**;\t----- bird -----\ttoxicology",
    "279": "SELECT m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology",
    "280": "SELECT bond_id\nFROM bond\nWHERE bond_type = 'triple';\t----- bird -----\ttoxicology",
    "281": "SELECT a.element, COUNT(*) AS count\nFROM molecule m\nWHERE m.label = 'carcinogenic'\nAND m.molecule_id IN (\n    SELECT a.molecule_id\n    FROM atom a\n    GROUP BY a.molecule_id\n    HAVING COUNT(*) >= 4\n)\nAND a.atom_id = (\n    SELECT atom_id\n    FROM atom\n    WHERE molecule_id = m.molecule_id\n    ORDER BY atom_id\n    LIMIT 1 OFFSET 3\n)\nGROUP BY a.element;\t----- bird -----\ttoxicology",
    "282": "SELECT \n    m.label,\n    COUNT(CASE WHEN a.element = 'Hydrogen' THEN 1 END) * 1.0 / COUNT(*) AS hydrogen_ratio\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.molecule_id = 'TR006';\t----- bird -----\ttoxicology",
    "283": "SELECT DISTINCT m.molecule_id, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'Calcium';\t----- bird -----\ttoxicology",
    "284": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'Carbon';\t----- bird -----\ttoxicology",
    "285": "SELECT \n    a1.element AS element1,\n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology",
    "286": "SELECT \n    100.0 * COUNT(DISTINCT triple_bond_molecules.molecule_id) / COUNT(DISTINCT all_molecules.molecule_id) AS percent_with_triple_bond\nFROM \n    molecule AS all_molecules\nLEFT JOIN (\n    SELECT DISTINCT molecule_id\n    FROM bond\n    WHERE bond_type = 'triple'\n) AS triple_bond_molecules\nON all_molecules.molecule_id = triple_bond_molecules.molecule_id;\t----- bird -----\ttoxicology",
    "287": "SELECT \n    COUNT(DISTINCT CASE WHEN b.bond_type = 'double' THEN c.molecule_id END) * 100.0 / COUNT(DISTINCT c.molecule_id) AS percent_with_double_bond\nFROM (\n    SELECT DISTINCT a.molecule_id\n    FROM atom a\n    WHERE a.atom_id IN (\n        SELECT atom_id\n        FROM atom\n        WHERE molecule_id = 'TR047'\n    )\n    AND a.molecule_id != 'TR047'\n) AS c\nLEFT JOIN connected con ON con.atom_id IN (\n    SELECT atom_id\n    FROM atom\n    WHERE molecule_id = c.molecule_id\n)\nLEFT JOIN bond b ON b.bond_id = con.bond_id\nWHERE b.bond_type IS NOT NULL;\t----- bird -----\ttoxicology",
    "288": "SELECT m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_1';\t----- bird -----\ttoxicology",
    "289": "insert:\n\n```sql\nINSERT INTO molecule_property (molecule_id, property, value)\nVALUES ('TR151', 'carcinogenic', 'yes');\t----- bird -----\ttoxicology",
    "290": "SELECT element\nFROM atom\nWHERE molecule_id = 'TR151'\n  AND element IN ('As', 'Hg', 'Pb', 'Cd', 'Cr');\t----- bird -----\ttoxicology",
    "291": "with the appropriate data.;\t----- bird -----\ttoxicology",
    "292": "SELECT a.atom_id, a.molecule_id, a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.molecule_id BETWEEN 'TR010' AND 'TR050'\n  AND a.element = 'carbon';\t----- bird -----\ttoxicology",
    "293": "SELECT COUNT(*) AS atom_count\nFROM atom\nWHERE molecule_id = (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = 'carcinogenic compounds'\n);\t----- bird -----\ttoxicology",
    "294": "SELECT DISTINCT c.bond_id\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "295": "SELECT COUNT(*) AS hydrogen_atom_count\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = 'carcinogenic compound'\n  AND atom.element = 'hydrogen';\t----- bird -----\ttoxicology",
    "296": "SELECT b.molecule_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_id = 'TR000_1_2'\n  AND (c.atom_id = 'TR000_1' OR c.atom_id2 = 'TR000_1');\t----- bird -----\ttoxicology",
    "297": "SELECT atom_id\nFROM atom\nWHERE element = 'carbon';\t----- bird -----\ttoxicology",
    "298": "SELECT \n    ROUND(\n        100.0 * COUNT(DISTINCT CASE WHEN a.element = 'H' THEN c.molecule_id END) / \n        COUNT(DISTINCT c.molecule_id), \n        2\n    ) AS percentage_hydrogen_in_carcinogenic\nFROM (\n    SELECT m.molecule_id\n    FROM molecule m\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    WHERE a.element = 'C'  -- Assume carcinogenic if contains carbon\n    GROUP BY m.molecule_id\n) AS c\nLEFT JOIN atom a ON c.molecule_id = a.molecule_id\nWHERE a.element = 'H';\t----- bird -----\ttoxicology",
    "299": "SELECT 'No information available about carcinogenicity in the database.';\t----- bird -----\ttoxicology",
    "300": "SELECT a.atom_id, a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR186';\t----- bird -----\ttoxicology",
    "301": "SELECT bond_type\nFROM bond\nWHERE bond_id = 'TR007_4_19';\t----- bird -----\ttoxicology",
    "302": "SELECT a.element\nFROM connected c\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE c.bond_id = 'TR001_2_4'\nUNION\nSELECT a.element\nFROM connected c\nJOIN atom a ON c.atom_id2 = a.atom_id\nWHERE c.bond_id = 'TR001_2_4';\t----- bird -----\ttoxicology",
    "303": "SELECT COUNT(*) AS double_bond_count\nFROM bond\nWHERE molecule_id = 'TR006'\n  AND bond_type = 'double';\t----- bird -----\ttoxicology",
    "304": "with the given schema and no external knowledge.\n   - We **cannot generate a valid SQL query** to list carcinogenic molecules and their elements.\n\n---\n\n### \u2705 Final Answer:\n**It is not possible to generate a valid SQL query to list carcinogenic molecules and their elements because the schema does not include any information about carcinogenicity.**;\t----- bird -----\ttoxicology",
    "305": "SELECT \n    b.molecule_id,\n    b.bond_id,\n    b.bond_type,\n    c.atom_id,\n    c.atom_id2\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nWHERE \n    b.bond_type = 'single';\t----- bird -----\ttoxicology",
    "306": "SELECT \n    m.molecule_id,\n    m.label,\n    GROUP_CONCAT(DISTINCT a.element) AS elements\nFROM \n    molecule m\nJOIN \n    bond b ON m.molecule_id = b.molecule_id\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nWHERE \n    b.bond_type = 'triple'\nGROUP BY \n    m.molecule_id, m.label;\t----- bird -----\ttoxicology",
    "307": "SELECT \n    a1.element AS element1,\n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR000_2_3';\t----- bird -----\ttoxicology",
    "308": "SELECT COUNT(DISTINCT c.bond_id) AS num_bonds_with_chlorine\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nWHERE a1.element = 'Cl'\nUNION\nSELECT COUNT(DISTINCT c.bond_id)\nFROM connected c\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a2.element = 'Cl';\t----- bird -----\ttoxicology",
    "309": "SELECT \n    (SELECT GROUP_CONCAT(atom_id) FROM atom WHERE molecule_id = 'TR346') AS atom_ids,\n    (SELECT COUNT(DISTINCT bond_type) FROM bond WHERE molecule_id = 'TR346') AS bond_type_count;\t----- bird -----\ttoxicology",
    "310": "SELECT\n  COUNT(DISTINCT b.molecule_id) AS total_molecules_with_double_bond,\n  COUNT(DISTINCT CASE WHEN m.label = 'carcinogenic compound' THEN m.molecule_id END) AS carcinogenic_compounds\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "311": "SELECT COUNT(*) AS molecule_count\nFROM molecule m\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM atom a\n    WHERE a.molecule_id = m.molecule_id\n      AND a.element = 'S'\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM bond b\n    JOIN connected c ON b.bond_id = c.bond_id\n    WHERE b.molecule_id = m.molecule_id\n      AND b.bond_type = 'double'\n);\t----- bird -----\ttoxicology",
    "312": "SELECT m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_id = 'TR001_2_4';\t----- bird -----\ttoxicology",
    "313": "SELECT COUNT(*) AS atom_count\nFROM atom\nWHERE molecule_id = 'TR001';\t----- bird -----\ttoxicology",
    "314": "SELECT COUNT(*) AS single_bond_count\n   FROM bond\n   WHERE bond_type = 'single';\t----- bird -----\ttoxicology",
    "315": "SELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'cl';\t----- bird -----\ttoxicology",
    "316": "SELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'c';\t----- bird -----\ttoxicology",
    "317": "SELECT \n    100.0 * COUNT(DISTINCT CASE WHEN a.element = 'Chlorine' THEN m.molecule_id END) / COUNT(DISTINCT m.molecule_id) AS percentage_with_chlorine\nFROM \n    molecule m\nLEFT JOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label LIKE '%carcinogenic%';\t----- bird -----\ttoxicology",
    "318": "SELECT molecule_id\nFROM bond\nWHERE bond_id = 'TR001_1_7';\t----- bird -----\ttoxicology",
    "319": "SELECT COUNT(DISTINCT a1.element) AS element_count\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_3_4';\t----- bird -----\ttoxicology",
    "320": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2')\n   OR (c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_1');\t----- bird -----\ttoxicology",
    "321": "SELECT \n    a.molecule_id\nFROM \n    atom a\nWHERE \n    a.atom_id IN ('TR000_2', 'TR000_4')\nGROUP BY \n    a.molecule_id\nHAVING \n    COUNT(DISTINCT a.atom_id) = 2;\t----- bird -----\ttoxicology",
    "322": "SELECT element\nFROM atom\nWHERE atom_id = 'TR000_1';\t----- bird -----\ttoxicology",
    "323": "SELECT 'No information available about carcinogenicity in the database.' AS result;\t----- bird -----\ttoxicology",
    "324": "SELECT \n    100.0 * COUNT(DISTINCT single_bond_atom) / COUNT(DISTINCT all_atom) AS percentage_single_bond_atoms\nFROM (\n    SELECT \n        (SELECT COUNT(DISTINCT atom_id) FROM atom) AS all_atom,\n        (SELECT COUNT(DISTINCT atom_id) \n         FROM connected \n         JOIN bond ON connected.bond_id = bond.bond_id \n         WHERE bond.bond_type = 'single') AS single_bond_atom\n) AS subquery;\t----- bird -----\ttoxicology",
    "325": "SELECT COUNT(DISTINCT a.molecule_id) AS nitrogen_molecule_count\nFROM atom a\nWHERE a.element = 'Nitrogen';\t----- bird -----\ttoxicology",
    "326": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON a.molecule_id = m.molecule_id\nJOIN connected c ON c.atom_id = a.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'S' AND b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "327": "SELECT m.molecule_id, m.label, COUNT(a.atom_id) AS atom_count\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nGROUP BY m.molecule_id, m.label\nHAVING COUNT(a.atom_id) > 5;\t----- bird -----\ttoxicology",
    "328": "SELECT DISTINCT a.element\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE b.molecule_id = 'TR024'\n  AND b.bond_type = 'double'\nUNION\nSELECT DISTINCT a2.element\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.molecule_id = 'TR024'\n  AND b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "329": "SELECT \n    a.molecule_id,\n    COUNT(*) AS atom_count\nFROM \n    atom a\nJOIN \n    molecule m ON a.molecule_id = m.molecule_id\nWHERE \n    m.label = 'carcinogenic'\nGROUP BY \n    a.molecule_id\nORDER BY \n    atom_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "330": "SELECT\n  100.0 * COUNT(DISTINCT triple_h_molecules.molecule_id) / COUNT(DISTINCT carcinogenic.molecule_id) AS percentage\nFROM\n  molecule AS carcinogenic\nLEFT JOIN (\n  SELECT DISTINCT m.molecule_id\n  FROM molecule m\n  JOIN bond b ON m.molecule_id = b.molecule_id\n  JOIN connected c ON b.bond_id = c.bond_id\n  JOIN atom a1 ON c.atom_id = a1.atom_id\n  JOIN atom a2 ON c.atom_id2 = a2.atom_id\n  WHERE b.bond_type = 'triple'\n    AND a1.element = 'H'\n    AND a2.element = 'H'\n) AS triple_h_molecules\nON carcinogenic.molecule_id = triple_h_molecules.molecule_id\nWHERE carcinogenic.label = 'carcinogenic';\t----- bird -----\ttoxicology",
    "331": "SELECT COUNT(*) AS total_molecules FROM molecule;\t----- bird -----\ttoxicology",
    "332": "SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules_with_single_bonds\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.molecule_id BETWEEN 'TR004' AND 'TR010'\n  AND b.bond_type = 'single';\t----- bird -----\ttoxicology",
    "333": "SELECT COUNT(*) AS carbon_count\nFROM atom\nWHERE molecule_id = 'TR008'\n  AND element = 'C';\t----- bird -----\ttoxicology",
    "334": "SELECT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR004_7'\n  AND m.label != 'carcinogenic';\t----- bird -----\ttoxicology",
    "335": "SELECT COUNT(DISTINCT c.molecule_id) AS num_molecules_with_double_bonded_oxygen\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE b.bond_type = 'double'\n  AND (a1.element = 'O' OR a2.element = 'O');\t----- bird -----\ttoxicology",
    "336": "SELECT DISTINCT b.molecule_id\nFROM bond b\nWHERE b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "337": "SELECT \n    a.element,\n    b.bond_type\nFROM \n    atom a\nJOIN \n    connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN \n    bond b ON c.bond_id = b.bond_id\nWHERE \n    a.molecule_id = 'TR002';\t----- bird -----\ttoxicology",
    "338": "SELECT DISTINCT a.atom_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.molecule_id = 'TR012'\n  AND b.bond_type = 'double'\n  AND a.element = 'carbon';\t----- bird -----\ttoxicology",
    "339": "SELECT a.atom_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'carcinogenic'\n  AND a.element = 'O';\t----- bird -----\ttoxicology",
    "340": "SELECT \n    c.id,\n    c.name,\n    c.rarity,\n    c.hasFoil,\n    c.isFullArt,\n    c.isPromo,\n    c.isReserved,\n    c.isReprint,\n    c.edhrecRank,\n    c.flavorText,\n    c.uuid\nFROM \n    cards c\nWHERE \n    c.hasFoil = 1\n    AND c.isFullArt = 1\n    AND c.isPromo = 1\n    AND c.isReserved = 1\n    AND c.isReprint = 0\n    AND c.rarity IN ('mythic', 'rare')\n    AND c.edhrecRank IS NOT NULL\n    AND c.edhrecRank < 100  -- Top 100 most powerful EDH cards\nORDER BY \n    c.edhrecRank ASC;\t----- bird -----\tcard_games",
    "341": "SELECT *\nFROM cards\nWHERE borderColor = 'borderless'\n  AND hasFoil = 0;\t----- bird -----\tcard_games",
    "342": "SELECT \n    name,\n    convertedManaCost,\n    faceConvertedManaCost\nFROM \n    cards\nWHERE \n    faceConvertedManaCost IS NOT NULL\n    AND faceConvertedManaCost > convertedManaCost;\t----- bird -----\tcard_games",
    "343": "SELECT name\nFROM cards\nWHERE frameVersion = '2015'\n  AND edhrecRank < 100;\t----- bird -----\tcard_games",
    "344": "SELECT DISTINCT c.name\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'gladiator'\n  AND l.status = 'banned'\n  AND c.rarity = 'mythic';\t----- bird -----\tcard_games",
    "345": "SELECT \n    c.name AS card_name,\n    l.status AS vintage_status\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    l.format = 'vintage'\n    AND (c.types LIKE '%artifact%' OR c.supertypes LIKE '%artifact%')\n    AND (c.otherFaceIds IS NULL OR c.otherFaceIds = '');\t----- bird -----\tcard_games",
    "346": "SELECT c.id, c.artist\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'commander'\n  AND l.status = 'legal'\n  AND (c.power IS NULL OR c.power = '');\t----- bird -----\tcard_games",
    "347": "SELECT\n    c.name AS card_name,\n    c.uuid,\n    r.text AS ruling_text,\n    CASE\n        WHEN c.manaCost IS NULL OR c.manaCost = '' THEN 'Missing manaCost'\n        WHEN c.power IS NULL OR c.power = '' THEN 'Missing power'\n        WHEN c.toughness IS NULL OR c.toughness = '' THEN 'Missing toughness'\n        WHEN c.text IS NULL OR c.text = '' THEN 'Missing card text'\n        WHEN c.types IS NULL OR c.types = '' THEN 'Missing types'\n        ELSE 'No missing or degraded properties'\n    END AS property_status\nFROM\n    cards c\nLEFT JOIN\n    rulings r ON c.uuid = r.uuid\nWHERE\n    c.artist = 'Stephen Daniel';\t----- bird -----\tcard_games",
    "348": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Sublime Epiphany' AND c.number = '74s';\t----- bird -----\tcard_games",
    "349": "SELECT \n    c.name AS card_name,\n    c.artist,\n    COUNT(r.id) AS ruling_count,\n    CASE \n        WHEN c.isPromo = 1 THEN 'Yes' \n        ELSE 'No' \n    END AS is_promo\nFROM \n    rulings r\nJOIN \n    cards c ON r.uuid = c.uuid\nGROUP BY \n    c.uuid\nORDER BY \n    ruling_count DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "350": "SELECT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Annul' AND c.number = '29';\t----- bird -----\tcard_games",
    "351": "SELECT DISTINCT c.name\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE fd.language = 'Japanese';\t----- bird -----\tcard_games",
    "352": "SELECT \n    (COUNT(DISTINCT fd.uuid) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage_chinese_simplified\nFROM \n    foreign_data fd\nWHERE \n    fd.language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "353": "SELECT \n    s.code AS setCode,\n    s.name AS setName,\n    COUNT(c.id) AS totalCards\nFROM \n    sets s\nJOIN \n    set_translations st ON s.code = st.setCode\nJOIN \n    cards c ON s.code = c.setCode\nWHERE \n    st.language = 'it'\nGROUP BY \n    s.code, s.name\nORDER BY \n    totalCards DESC;\t----- bird -----\tcard_games",
    "354": "SELECT COUNT(DISTINCT type) AS distinct_types_count\nFROM cards\nJOIN json_each(cards.types) AS t(type)\nWHERE artist = 'Aaron Boyd';\t----- bird -----\tcard_games",
    "355": "SELECT keywords\nFROM cards\nWHERE name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "356": "SELECT COUNT(*) AS infinite_power_cards\nFROM cards\nWHERE power = '\u221e';\t----- bird -----\tcard_games",
    "357": "SELECT promoTypes\nFROM cards\nWHERE name = 'Duress';\t----- bird -----\tcard_games",
    "358": "SELECT borderColor\nFROM cards\nWHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "359": "SELECT originalType\nFROM cards\nWHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "360": "SELECT DISTINCT st.language\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "361": "SELECT COUNT(DISTINCT cards.uuid) AS restricted_cards_with_text\nFROM legalities\nJOIN cards ON legalities.uuid = cards.uuid\nWHERE legalities.status = 'restricted'\n  AND cards.text IS NOT NULL;\t----- bird -----\tcard_games",
    "362": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Condemn';\t----- bird -----\tcard_games",
    "363": "SELECT COUNT(*) AS restricted_starter_cards\nFROM legalities\nJOIN cards ON legalities.uuid = cards.uuid\nWHERE legalities.status = 'restricted'\n  AND cards.isStarter = 1;\t----- bird -----\tcard_games",
    "364": "SELECT l.format, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.name = 'Cloudchaser Eagle';\t----- bird -----\tcard_games",
    "365": "SELECT type\nFROM cards\nWHERE name = 'Benalish Knight';\t----- bird -----\tcard_games",
    "366": "SELECT r.date, r.text\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.name = 'Benalish Knight';\t----- bird -----\tcard_games",
    "367": "SELECT DISTINCT artist\nFROM cards\nWHERE setCode = (\n    SELECT code\n    FROM sets\n    WHERE name = 'Phyrexian'\n);\t----- bird -----\tcard_games",
    "368": "SELECT \n    100.0 * COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) / COUNT(*) AS borderless_percentage\nFROM cards;\t----- bird -----\tcard_games",
    "369": "SELECT COUNT(DISTINCT fd.uuid) AS reprint_count\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE fd.language = 'German'\n  AND c.isReprint = 1;\t----- bird -----\tcard_games",
    "370": "SELECT COUNT(DISTINCT c.uuid) AS borderless_russian_cards_count\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.borderColor = 'borderless'\n  AND fd.language = 'Russian';\t----- bird -----\tcard_games",
    "371": "SELECT \n    100.0 * COUNT(CASE WHEN fd.language = 'French' THEN 1 END) / COUNT(*) AS percentage_french\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.isStorySpotlight = 1;\t----- bird -----\tcard_games",
    "372": "SELECT COUNT(*) \nFROM cards \nWHERE toughness = '99';\t----- bird -----\tcard_games",
    "373": "SELECT name\nFROM cards\nWHERE artist = 'Aaron Boyd';\t----- bird -----\tcard_games",
    "374": "SELECT COUNT(*) AS black_border_mtgo_only_cards\nFROM cards\nWHERE borderColor = 'black'\n  AND availability LIKE '%mtgo%';\t----- bird -----\tcard_games",
    "375": "SELECT id\nFROM cards\nWHERE convertedManaCost = 0;\t----- bird -----\tcard_games",
    "376": "SELECT layout\nFROM cards\nWHERE keywords LIKE '%flying%';\t----- bird -----\tcard_games",
    "377": "SELECT COUNT(*) AS count\nFROM cards\nWHERE originalType = 'Summon - Angel'\n  AND subtypes != 'Angel'\n  AND subtypes NOT LIKE '%, Angel'\n  AND subtypes NOT LIKE 'Angel, %'\n  AND subtypes NOT LIKE '%, Angel, %';\t----- bird -----\tcard_games",
    "378": "SELECT c.id\nFROM cards c\nWHERE c.hasFoil = 1\n  AND c.hasNonFoil = 1\n  AND c.edhrecRank <= 100  -- Top 100 EDHREC ranked cards\n  AND c.convertedManaCost >= 3  -- Consider cards with higher mana cost as more powerful\n  AND c.rarity IN ('Mythic', 'Rare')  -- High rarity cards are often more powerful\n  AND c.keywords LIKE '%Flying%' \n     OR c.keywords LIKE '%Deathtouch%'\n     OR c.keywords LIKE '%Trample%'\n     OR c.keywords LIKE '%Hexproof%'\n     OR c.keywords LIKE '%Indestructible%';\t----- bird -----\tcard_games",
    "379": "SELECT id\nFROM cards\nWHERE duelDeck = 'A';\t----- bird -----\tcard_games",
    "380": "SELECT edhrecRank\nFROM cards\nWHERE frameVersion = '2015';\t----- bird -----\tcard_games",
    "381": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "382": "SELECT DISTINCT c.name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.availability = 'paper'\n  AND fd.language = 'Japanese';\t----- bird -----\tcard_games",
    "383": "SELECT COUNT(*) AS banned_white_border_cards\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE l.status = 'banned' AND c.borderColor = 'white';\t----- bird -----\tcard_games",
    "384": "SELECT \n    f.uuid,\n    f.language\nFROM \n    legalities l\nJOIN \n    foreign_data f ON l.uuid = f.uuid\nWHERE \n    l.format = 'legacy' \n    AND l.status = 'legal';\t----- bird -----\tcard_games",
    "385": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Beacon of Immortality';\t----- bird -----\tcard_games",
    "386": "SELECT \n    l.format,\n    l.status,\n    COUNT(*) AS card_count\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    c.frameVersion = 'future'\nGROUP BY \n    l.format, l.status;\t----- bird -----\tcard_games",
    "387": "SELECT \n    c.name AS card_name,\n    c.colors\nFROM \n    cards c\nJOIN \n    sets s ON c.setCode = s.code\nWHERE \n    s.code = 'OGW';\t----- bird -----\tcard_games",
    "388": "SELECT \n    c.name AS card_name,\n    st.language\nFROM \n    cards c\nJOIN \n    set_translations st\n    ON c.setCode = st.setCode\nWHERE \n    c.setCode = '10E'\n    AND c.convertedManaCost = 5;\t----- bird -----\tcard_games",
    "389": "SELECT \n    c.name AS card_name,\n    r.date AS ruling_date\nFROM \n    cards c\nJOIN \n    rulings r ON c.uuid = r.uuid\nWHERE \n    c.originalType = 'Creature - Elf';\t----- bird -----\tcard_games",
    "390": "SELECT \n    id,\n    colors,\n    layout AS format\nFROM \n    cards\nWHERE \n    id BETWEEN 1 AND 20;\t----- bird -----\tcard_games",
    "391": "SELECT DISTINCT c.name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.types LIKE '%Artifact%'\n  AND (c.colors = 'B' OR c.colors = 'Black')\n  AND fd.language != 'English';\t----- bird -----\tcard_games",
    "392": "SELECT c.name, r.date\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.rarity = 'uncommon'\nORDER BY r.date ASC\nLIMIT 3;\t----- bird -----\tcard_games",
    "393": "SELECT COUNT(*) AS non_powerful_foil_count\nFROM cards\nWHERE artist = 'John Avon'\n  AND hasFoil = 1\n  AND isPromo = 0\n  AND isFullArt = 0\n  AND isOversized = 0\n  AND isTimeshifted = 0\n  AND isStorySpotlight = 0\n  AND isTextless = 0\n  AND isReprint = 0;\t----- bird -----\tcard_games",
    "394": "SELECT COUNT(*) AS powerful_white_bordered_cards\nFROM cards\nWHERE borderColor = 'white'\n  AND power IS NOT NULL\n  AND power != ''\n  AND power != '0';\t----- bird -----\tcard_games",
    "395": "SELECT COUNT(*) AS count\nFROM cards\nWHERE artist = 'UDON'\n  AND printings LIKE '%mtgo%'\n  AND hand = '-1';\t----- bird -----\tcard_games",
    "396": "SELECT COUNT(*) \nFROM cards\nWHERE frameVersion = '1993'\n  AND availability = 'paper'\n  AND hasContentWarning = 1;\t----- bird -----\tcard_games",
    "397": "SELECT manaCost;\t----- bird -----\tcard_games",
    "398": "SELECT SUM(convertedManaCost) AS totalManaCost\nFROM cards\nWHERE artist = 'Rob Alexander';\t----- bird -----\tcard_games",
    "399": "SELECT DISTINCT type\nFROM cards\nWHERE mtgArenaId IS NOT NULL\n  AND type IS NOT NULL;\t----- bird -----\tcard_games",
    "400": "SELECT DISTINCT c.setCode\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE fd.language = 'es';\t----- bird -----\tcard_games",
    "401": "SELECT \n    100.0 * COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 END) / COUNT(*) AS percentage_online_only_legendary\nFROM \n    cards\nWHERE \n    frameEffects LIKE '%legendary%';\t----- bird -----\tcard_games",
    "402": "WITH StorySpotlightCards AS (\n    SELECT COUNT(*) AS total_story_spotlight\n    FROM cards\n    WHERE isStorySpotlight = 1\n),\n\n-- Step 2: Count Story Spotlight cards without a text box\nStorySpotlightNoText AS (\n    SELECT COUNT(*) AS no_text_count\n    FROM cards\n    WHERE isStorySpotlight = 1\n      AND (text IS NULL OR text = '')\n),\n\n-- Step 3: List the IDs of Story Spotlight cards without a text box\nStorySpotlightNoTextList AS (\n    SELECT id\n    FROM cards\n    WHERE isStorySpotlight = 1\n      AND (text IS NULL OR text = '')\n)\n\n-- Step 4: Calculate percentage and list IDs\nSELECT \n    (100.0 * no_text_count / total_story_spotlight) AS percentage_no_text,\n    (SELECT GROUP_CONCAT(id) FROM StorySpotlightNoTextList) AS ids_without_text\nFROM \n    StorySpotlightCards, StorySpotlightNoText;\t----- bird -----\tcard_games",
    "403": "SELECT \n    (COUNT(fd.uuid) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage_spanish,\n    c.name AS card_name\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    fd.language = 'Spanish'\nORDER BY \n    c.name;\t----- bird -----\tcard_games",
    "404": "SELECT DISTINCT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.baseSetSize = 309;\t----- bird -----\tcard_games",
    "405": "SELECT COUNT(*) AS brazilian_portuguese_commander_sets\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.block = 'Commander'\n  AND set_translations.language = 'pt-br';\t----- bird -----\tcard_games",
    "406": "SELECT DISTINCT c.id\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.types LIKE '%Creature%'\n  AND l.status = 'legal';\t----- bird -----\tcard_games",
    "407": "SELECT fd.type AS german_type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'German';\t----- bird -----\tcard_games",
    "408": "SELECT COUNT(*) AS unknown_power_cards_with_triggered_ability\nFROM cards\nWHERE \n    (power IS NULL OR power = '*')\n    AND (\n        text LIKE '%when%' \n        OR text LIKE '%whenever%' \n        OR text LIKE '%at%'\n        OR keywords LIKE '%when%' \n        OR keywords LIKE '%whenever%' \n        OR keywords LIKE '%at%'\n    );\t----- bird -----\tcard_games",
    "409": "SELECT COUNT(DISTINCT c.uuid)\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN rulings r ON c.uuid = r.uuid\nWHERE l.format = 'pre-modern'\n  AND r.text = 'This is a triggered mana ability.'\n  AND c.layout = 'normal';\t----- bird -----\tcard_games",
    "410": "SELECT c.id\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.artist = 'Erica Yang'\n  AND l.format = 'pauper'\n  AND l.status = 'legal'\n  AND c.availability = 'paper';\t----- bird -----\tcard_games",
    "411": "SELECT c.artist\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation';\t----- bird -----\tcard_games",
    "412": "SELECT fd.name AS french_name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.layout = 'normal'\n  AND c.borderColor = 'black'\n  AND c.types LIKE '%Creature%'\n  AND c.artist = 'Matthew D. Wilson'\n  AND fd.language = 'French';\t----- bird -----\tcard_games",
    "413": "SELECT COUNT(DISTINCT c.uuid)\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.rarity IS NOT NULL\n  AND c.rarity <> ''\n  AND r.date = '2007-02-01';\t----- bird -----\tcard_games",
    "414": "SELECT code, name\nFROM sets\nWHERE block = 'Ravnica' AND baseSetSize = 180;\t----- bird -----\tcard_games",
    "415": "SELECT \n    100.0 * COUNT(CASE WHEN cards.hasContentWarning = 0 THEN 1 END) / COUNT(*) AS percentage_no_content_warning\nFROM \n    cards\nJOIN \n    legalities ON cards.uuid = legalities.uuid\nWHERE \n    legalities.format = 'commander' \n    AND legalities.status = 'legal';\t----- bird -----\tcard_games",
    "416": "SELECT \n    100.0 * COUNT(CASE WHEN fd.language = 'French' THEN 1 END) / COUNT(*) AS percentage_french_without_power\nFROM \n    cards c\nLEFT JOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.power IS NULL OR c.power = '';\t----- bird -----\tcard_games",
    "417": "SELECT \n    100.0 * COUNT(CASE WHEN s.type = 'expansion' THEN 1 END) / COUNT(*) AS percentage_expansion_sets\nFROM \n    set_translations st\nJOIN \n    sets s ON st.setCode = s.code\nWHERE \n    st.language = 'Japanese';\t----- bird -----\tcard_games",
    "418": "SELECT printings\nFROM cards\nWHERE artist = 'Daren Bader';\t----- bird -----\tcard_games",
    "419": "SELECT COUNT(*) AS color_cards_with_no_border_high_edhrec\nFROM cards\nWHERE borderColor IS NULL OR borderColor = ''\n  AND colorIdentity != ''\n  AND edhrecRank > 12000;\t----- bird -----\tcard_games",
    "420": "SELECT COUNT(*) AS oversized_reprinted_promo_cards\nFROM cards\nWHERE isOversized = 1\n  AND isReprint = 1\n  AND isPromo = 1;\t----- bird -----\tcard_games",
    "421": "SELECT name\nFROM cards\nWHERE power IS NULL\n  AND promoTypes LIKE '%arena league%'\nORDER BY name ASC\nLIMIT 3;\t----- bird -----\tcard_games",
    "422": "SELECT language\nFROM foreign_data\nWHERE multiverseid = 149934;\t----- bird -----\tcard_games",
    "423": "SELECT \n    cardKingdomFoilId,\n    cardKingdomId,\n    COUNT(*) AS pair_count\nFROM \n    cards\nWHERE \n    cardKingdomFoilId IS NOT NULL \n    AND cardKingdomId IS NOT NULL\nGROUP BY \n    cardKingdomFoilId, \n    cardKingdomId\nORDER BY \n    cardKingdomFoilId ASC\nLIMIT 3;\t----- bird -----\tcard_games",
    "424": "SELECT\n    COUNT(*) AS total_cards,\n    SUM(CASE\n        WHEN text IS NULL OR layout != 'normal' THEN 1\n        ELSE 0\n    END) AS non_normal_text_cards,\n    ROUND(\n        100.0 * SUM(CASE\n            WHEN text IS NULL OR layout != 'normal' THEN 1\n            ELSE 0\n        END) / COUNT(*),\n        2\n    ) AS proportion_percent\nFROM cards;\t----- bird -----\tcard_games",
    "425": "SELECT number\nFROM cards\nWHERE layout NOT IN ('double', 'split', 'flip', 'transform', 'modal_dfc')\n  AND INSTR(subtypes, 'Angel') > 0\n  AND INSTR(subtypes, 'Wizard') > 0;\t----- bird -----\tcard_games",
    "426": "SELECT name\nFROM sets\nWHERE isOnlineOnly = 0\nORDER BY name ASC\nLIMIT 3;\t----- bird -----\tcard_games",
    "427": "SELECT DISTINCT fd.language\nFROM sets s\nJOIN cards c ON c.setCode = s.code\nJOIN foreign_data fd ON fd.uuid = c.uuid\nWHERE s.code = 'ARC';\t----- bird -----\tcard_games",
    "428": "SELECT \n    s.code AS setCode,\n    s.name AS setName,\n    st.translation\nFROM \n    sets s\nLEFT JOIN \n    set_translations st ON s.code = st.setCode\nWHERE \n    s.id = 5;\t----- bird -----\tcard_games",
    "429": "SELECT \n    st.language,\n    s.type AS expansion_type\nFROM \n    sets s\nJOIN \n    set_translations st ON s.code = st.setCode\nWHERE \n    s.id = 206;\t----- bird -----\tcard_games",
    "430": "SELECT DISTINCT s.id, s.name\nFROM sets s\nJOIN foreign_data fd ON s.code = (\n    SELECT setCode\n    FROM cards\n    WHERE uuid = fd.uuid\n)\nWHERE s.block = 'Shadowmoor'\n  AND fd.language = 'it'\nORDER BY s.name\nLIMIT 2;\t----- bird -----\tcard_games",
    "431": "SELECT DISTINCT c.setCode\n   FROM cards c\n   JOIN foreign_data fd ON c.uuid = fd.uuid\n   WHERE c.hasFoil = 1\n     AND fd.language = 'Japanese';\t----- bird -----\tcard_games",
    "432": "SELECT \n    s.code AS setCode,\n    s.name AS setName,\n    COUNT(c.id) AS totalCards\nFROM \n    set_translations st\nJOIN \n    sets s ON st.setCode = s.code\nLEFT JOIN \n    cards c ON s.code = c.setCode\nWHERE \n    st.language = 'Russian'\nGROUP BY \n    s.code, s.name\nORDER BY \n    totalCards DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "433": "SELECT \n    100.0 * COUNT(DISTINCT fd.uuid) / (SELECT COUNT(*) FROM cards) AS percentage\nFROM \n    foreign_data fd\nJOIN \n    cards c ON fd.uuid = c.uuid\nWHERE \n    fd.language = 'Chinese Simplified'\n    AND c.isOnlineOnly = 1;\t----- bird -----\tcard_games",
    "434": "SELECT COUNT(DISTINCT st.setCode) AS japanese_only_sets\nFROM set_translations st\nJOIN sets s ON st.setCode = s.code\nWHERE st.language = 'Japanese'\n  AND s.isOnlineOnly = 0;\t----- bird -----\tcard_games",
    "435": "SELECT id\nFROM cards\nWHERE borderColor = 'black';\t----- bird -----\tcard_games",
    "436": "SELECT id\nFROM cards\nWHERE frameEffects = 'extendedart';\t----- bird -----\tcard_games",
    "437": "SELECT name, uuid\nFROM cards\nWHERE borderColor = 'black' AND isFullArt = 1;\t----- bird -----\tcard_games",
    "438": "SELECT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.id = 174;\t----- bird -----\tcard_games",
    "439": "SELECT name\nFROM sets\nWHERE code = 'ALL';\t----- bird -----\tcard_games",
    "440": "SELECT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'A Pedra Fellwar';\t----- bird -----\tcard_games",
    "441": "SELECT code\nFROM sets\nWHERE releaseDate = '07/13/2007';\t----- bird -----\tcard_games",
    "442": "SELECT baseSetSize, code\nFROM sets\nWHERE block IN ('Masques', 'Mirage');\t----- bird -----\tcard_games",
    "443": "SELECT code\nFROM sets\nWHERE type = 'expansion';\t----- bird -----\tcard_games",
    "444": "SELECT \n    fd.name AS foreign_name,\n    c.type AS card_type\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.watermark = 'boros';\t----- bird -----\tcard_games",
    "445": "SELECT \n    fd.language,\n    fd.flavorText,\n    c.type AS cardType\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.watermark = 'colorpie';\t----- bird -----\tcard_games",
    "446": "SELECT \n    (CAST(high_cmc_cards.cmc10_count AS REAL) / total_cards.total_count) * 100 AS percentage\nFROM\n    (SELECT COUNT(*) AS total_count\n     FROM cards\n     WHERE setCode = (SELECT code FROM sets WHERE name = 'Abyssal Horror')) AS total_cards,\n    (SELECT COUNT(*) AS cmc10_count\n     FROM cards\n     WHERE setCode = (SELECT code FROM sets WHERE name = 'Abyssal Horror')\n       AND convertedManaCost = 10) AS high_cmc_cards;\t----- bird -----\tcard_games",
    "447": "SELECT code\nFROM sets\nWHERE type = 'expansion'\n  AND (name LIKE '%commander%' OR code LIKE '%cmdr%');\t----- bird -----\tcard_games",
    "448": "SELECT \n    fd.language,\n    fd.name AS foreign_name,\n    c.type AS card_type\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.watermark = 'Abzan';\t----- bird -----\tcard_games",
    "449": "SELECT \n    fd.language,\n    c.type\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.watermark = 'azorius';\t----- bird -----\tcard_games",
    "450": "SELECT COUNT(*) AS incredibly_powerful_count\nFROM cards\nWHERE artist = 'Aaron Miller'\n  AND convertedManaCost >= 5\n  AND rarity = 'Mythic Rare'\n  AND power >= '5'\n  AND toughness >= '5';\t----- bird -----\tcard_games",
    "451": "SELECT COUNT(*) AS paper_cards_with_positive_hand\nFROM cards\nWHERE availability = 'paper'\n  AND hand > 0;\t----- bird -----\tcard_games",
    "452": "SELECT name\nFROM cards\nWHERE text IS NOT NULL;\t----- bird -----\tcard_games",
    "453": "SELECT manaCost\nFROM cards\nWHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "454": "SELECT COUNT(*) AS unknown_power_count\nFROM cards\nWHERE borderColor = 'white'\n  AND (power IS NULL OR power = '');\t----- bird -----\tcard_games",
    "455": "SELECT name\nFROM cards\nWHERE promoTypes = 'painting'\n  AND layout IN ('transform', 'double-faced', 'modal_dfc', 'split', 'flipped', 'token', 'art_series', 'aftermath');\t----- bird -----\tcard_games",
    "456": "SELECT types\nFROM cards\nWHERE name = 'Molimo, Maro-Sorcerer';\t----- bird -----\tcard_games",
    "457": "SELECT \n    name AS card_name,\n    promoTypes,\n    purchaseUrls\nFROM \n    cards\nWHERE \n    promoTypes LIKE '%bundle%';\t----- bird -----\tcard_games",
    "458": "SELECT COUNT(DISTINCT artist) AS artist_count\nFROM cards\nWHERE borderColor = 'black'\n  AND printings LIKE '%arena%'\n  AND printings LIKE '%mtgo%'\n  AND artist IS NOT NULL;\t----- bird -----\tcard_games",
    "459": "SELECT \n    name, \n    convertedManaCost\nFROM \n    cards\nWHERE \n    name IN ('Serra Angel', 'Shrine Keeper');\t----- bird -----\tcard_games",
    "460": "SELECT artist\nFROM cards\nWHERE flavorName = 'Battra, Dark Destroyer';\t----- bird -----\tcard_games",
    "461": "SELECT name, convertedManaCost\nFROM cards\nWHERE frameVersion = '2003'\n  AND convertedManaCost IS NOT NULL\nORDER BY convertedManaCost DESC\nLIMIT 3;\t----- bird -----\tcard_games",
    "462": "SELECT st.translation AS italianSetName\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Ancestor''s Chosen'\n  AND st.language = 'Italian';\t----- bird -----\tcard_games",
    "463": "SELECT COUNT(*) AS translation_count\nFROM set_translations\nWHERE setCode = (\n    SELECT setCode\n    FROM cards\n    WHERE name = 'Angel of Mercy'\n);\t----- bird -----\tcard_games",
    "464": "SELECT code\nFROM sets\nWHERE name = 'Hauptset Zehnte Edition';\t----- bird -----\tcard_games",
    "465": "SELECT fd.uuid, fd.language, fd.name, fd.text, fd.flavorText\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE c.name = 'Ancestor''s Chosen'\n  AND fd.language = 'ko';\t----- bird -----\tcard_games",
    "466": "SELECT code FROM sets WHERE name = 'Hauptset Zehnte Edition';\t----- bird -----\tcard_games",
    "467": "SELECT baseSetSize\nFROM sets\nWHERE name = 'Hauptset Zehnte Edition';\t----- bird -----\tcard_games",
    "468": "SELECT st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Eighth Edition'\n  AND st.language = 'zh-Hans';\t----- bird -----\tcard_games",
    "469": "SELECT DISTINCT s.name AS setName, s.code AS setCode, s.isOnlineOnly\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "470": "SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "471": "SELECT type\nFROM sets\nWHERE name = 'Hauptset Zehnte Edition';\t----- bird -----\tcard_games",
    "472": "SELECT COUNT(DISTINCT s.code) AS italian_translations_count\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Ice Age'\n  AND st.language = 'Italian';\t----- bird -----\tcard_games",
    "473": "SELECT \n    s.code AS setCode,\n    s.isForeignOnly\nFROM \n    cards c\nJOIN \n    sets s ON c.setCode = s.code\nWHERE \n    c.name = 'Adarkar Valkyrie';\t----- bird -----\tcard_games",
    "474": "SELECT COUNT(DISTINCT s.code) AS count\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Italian'\n  AND s.baseSetSize < 100;\t----- bird -----\tcard_games",
    "475": "SELECT COUNT(*) AS black_border_coldsnap_cards\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.code = 'Coldsnap'\n  AND cards.borderColor = 'black';\t----- bird -----\tcard_games",
    "476": "SELECT name\nFROM cards\nWHERE setCode = 'Coldsnap'\n  AND convertedManaCost = (\n    SELECT MAX(convertedManaCost)\n    FROM cards\n    WHERE setCode = 'Coldsnap'\n  );\t----- bird -----\tcard_games",
    "477": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.code = 'CSP'\n  AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');\t----- bird -----\tcard_games",
    "478": "SELECT *\nFROM cards\nWHERE number = '4' AND setCode = 'CSP';\t----- bird -----\tcard_games",
    "479": "SELECT COUNT(*) AS unknown_power_count\nFROM cards\nWHERE convertedManaCost > 5\n  AND setCode = 'CSP'\n  AND (power IS NULL OR power = '');\t----- bird -----\tcard_games",
    "480": "SELECT fd.flavorText\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen'\n  AND fd.language = 'it';\t----- bird -----\tcard_games",
    "481": "SELECT DISTINCT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen'\n  AND fd.flavorText IS NOT NULL;\t----- bird -----\tcard_games",
    "482": "SELECT fd.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';\t----- bird -----\tcard_games",
    "483": "SELECT r.text\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.setCode = 'Coldsnap'\n  AND r.text LIKE 'Italian:%';\t----- bird -----\tcard_games",
    "484": "with the highest converted mana cost**, we need to:\n\n1. **Filter cards in the \"Coldsnap\" set** using the `cards.setCode = 'CSP'` condition.\n2. **Find the highest converted mana cost** among those cards.\n3. **Get the Italian names** from the `foreign_data` table where `language = 'it'`.\n\nHere is the **step-by-step SQL query**:\n\n```sql\n-- Step 1: Find the highest converted mana cost in the Coldsnap set\nWITH MaxCMC AS (\n    SELECT MAX(convertedManaCost) AS max_cmc\n    FROM cards\n    WHERE setCode = 'CSP'\n)\n\n-- Step 2: Get the Italian names of cards with that max CMC\nSELECT fd.name AS italian_name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nJOIN MaxCMC ON c.convertedManaCost = MaxCMC.max_cmc\nWHERE c.setCode = 'CSP'\n  AND fd.language = 'it';\t----- bird -----\tcard_games",
    "485": "SELECT uuid FROM cards WHERE name = 'Reminisce';\t----- bird -----\tcard_games",
    "486": "SELECT \n    (COUNT(CASE WHEN convertedManaCost = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_cmc_7\nFROM \n    cards\nWHERE \n    setCode = 'CSP';\t----- bird -----\tcard_games",
    "487": "SELECT \n    100.0 * COUNT(CASE WHEN convertedManaCost >= 5 THEN 1 END) / COUNT(*) AS percentage_incredibly_powerful\nFROM \n    cards\nWHERE \n    setCode = 'CSP';\t----- bird -----\tcard_games",
    "488": "SELECT code\nFROM sets\nWHERE releaseDate = '2017-07-14';\t----- bird -----\tcard_games",
    "489": "SELECT keyruneCode\nFROM sets\nWHERE code = 'PKHC';\t----- bird -----\tcard_games",
    "490": "SELECT mcmId\nFROM sets\nWHERE code = 'SS2';\t----- bird -----\tcard_games",
    "491": "SELECT name\nFROM sets\nWHERE releaseDate = '2017-06-09';\t----- bird -----\tcard_games",
    "492": "SELECT code FROM sets WHERE name = 'From the Vault: Lore';\t----- bird -----\tcard_games",
    "493": "SELECT parentCode\nFROM sets\nWHERE name = 'Commander 2014 Oversized';\t----- bird -----\tcard_games",
    "494": "SELECT\n    c.name,\n    c.uuid,\n    c.artist,\n    c.manaCost,\n    c.power,\n    c.toughness,\n    c.loyalty,\n    c.types,\n    c.text,\n    c.convertedManaCost,\n    c.rarity,\n    c.setCode,\n    r.date,\n    r.text AS ruling_text,\n    CASE\n        WHEN c.manaCost IS NULL OR c.manaCost = '' THEN 1 ELSE 0 END AS missing_manaCost,\n    CASE\n        WHEN c.power IS NULL OR c.power = '' THEN 1 ELSE 0 END AS missing_power,\n    CASE\n        WHEN c.toughness IS NULL OR c.toughness = '' THEN 1 ELSE 0 END AS missing_toughness,\n    CASE\n        WHEN c.loyalty IS NULL OR c.loyalty = '' THEN 1 ELSE 0 END AS missing_loyalty,\n    CASE\n        WHEN c.types IS NULL OR c.types = '' THEN 1 ELSE 0 END AS missing_types,\n    CASE\n        WHEN c.text IS NULL OR c.text = '' THEN 1 ELSE 0 END AS missing_text,\n    CASE\n        WHEN c.convertedManaCost IS NULL THEN 1 ELSE 0 END AS missing_convertedManaCost,\n    CASE\n        WHEN c.rarity IS NULL OR c.rarity = '' THEN 1 ELSE 0 END AS missing_rarity,\n    CASE\n        WHEN c.setCode IS NULL OR c.setCode = '' THEN 1 ELSE 0 END AS missing_setCode,\n    CASE\n        WHEN c.name IS NULL OR c.name = '' THEN 1 ELSE 0 END AS missing_name\nFROM\n    cards c\nLEFT JOIN\n    rulings r ON c.uuid = r.uuid\nWHERE\n    c.artist = 'Jim Pavelec';\t----- bird -----\tcard_games",
    "495": "SELECT s.releaseDate\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Evacuation';\t----- bird -----\tcard_games",
    "496": "SELECT COUNT(*) AS card_count\nFROM cards\nWHERE setCode = (\n    SELECT code\n    FROM sets\n    WHERE name = 'Rinascita di Alara'\n);\t----- bird -----\tcard_games",
    "497": "SELECT code FROM sets WHERE name = 'Huiti\u00e8me \u00e9dition';\t----- bird -----\tcard_games",
    "498": "SELECT st.translation AS french_set_name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Tendo Ice Bridge'\n  AND st.language = 'French';\t----- bird -----\tcard_games",
    "499": "SELECT code FROM sets WHERE name = 'Tenth Edition';\t----- bird -----\tcard_games",
    "500": "SELECT st.translation AS japanese_set_name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Fellwar Stone'\n  AND st.language = 'Japanese';\t----- bird -----\tcard_games",
    "501": "SELECT c.name, c.convertedManaCost\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Journey into Nyx Hero''s Path'\nORDER BY c.convertedManaCost DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "502": "SELECT releaseDate\nFROM sets\nWHERE name = 'Ola de fr\u00edo';\t----- bird -----\tcard_games",
    "503": "SELECT uuid FROM cards WHERE name = 'Samite Pilgrim';\t----- bird -----\tcard_games",
    "504": "SELECT COUNT(*) AS card_count\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'World Championship Decks 2004'\n  AND cards.convertedManaCost = 3;\t----- bird -----\tcard_games",
    "505": "SELECT st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Mirrodin'\n  AND st.language = 'zh-Hans';\t----- bird -----\tcard_games",
    "506": "SELECT \n    100.0 * SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) / COUNT(*) AS percentage_non_foil_only\nFROM \n    foreign_data fd\nJOIN \n    cards c ON fd.uuid = c.uuid\nWHERE \n    fd.language = 'Japanese';\t----- bird -----\tcard_games",
    "507": "SELECT \n    100.0 * SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) / COUNT(*) AS percentage_online_only\nFROM \n    foreign_data fd\nJOIN \n    cards c ON fd.uuid = c.uuid\nWHERE \n    fd.language = 'pt-br';\t----- bird -----\tcard_games",
    "508": "SELECT DISTINCT printings\nFROM cards\nWHERE artist != 'Aleksi Briclot'\n  AND printings IS NOT NULL;\t----- bird -----\tcard_games",
    "509": "SELECT id\nFROM sets\nORDER BY baseSetSize DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "510": "SELECT artist\nFROM cards\nWHERE layout NOT IN ('transform', 'modal_dfc', 'double_sided', 'split', 'flipped', 'token', 'art_series', 'scheme', 'vanguard', 'planar', 'augment', 'host', 'adventure')\n  AND otherFaceIds IS NULL\nORDER BY convertedManaCost DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "511": "SELECT frameEffects, COUNT(*) AS effectCount\nFROM cards\nWHERE hasFoil = 1\n  AND edhrecRank IS NOT NULL\n  AND edhrecRank <= 100  -- Assuming top 100 EDHREC rank means \"incredibly powerful\"\nGROUP BY frameEffects\nORDER BY effectCount DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "512": "SELECT COUNT(*) AS unknown_power_non_foil_in_duel_deck_A\nFROM cards\nWHERE (power IS NULL OR power = '')\n  AND hasFoil = 0\n  AND duelDeck = 'A';\t----- bird -----\tcard_games",
    "513": "SELECT id\nFROM sets\nWHERE type = 'Commander'\n  AND code NOT LIKE 'ALC%'\nORDER BY totalSetSize DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "514": "SELECT name, manaCost\nFROM cards\nWHERE duelDeck IS NOT NULL AND duelDeck <> ''\nORDER BY manaCost DESC\nLIMIT 10;\t----- bird -----\tcard_games",
    "515": "SELECT \n    c.originalReleaseDate AS release_date,\n    l.format AS legal_format\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    c.rarity = 'mythic'\nORDER BY \n    c.originalReleaseDate ASC\nLIMIT 1;\t----- bird -----\tcard_games",
    "516": "SELECT COUNT(DISTINCT c.uuid) AS card_count\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.artist = 'Volkan Ba\u00e7\u00e7a'\n  AND f.language = 'French';\t----- bird -----\tcard_games",
    "517": "SELECT COUNT(*) AS rare_enchantment_abundance_legal\nFROM cards c\nWHERE c.rarity = 'rare'\n  AND c.types LIKE '%enchantment%'\n  AND c.name = 'Abundance'\n  AND NOT EXISTS (\n    SELECT 1\n    FROM legalities l\n    WHERE l.uuid = c.uuid\n      AND l.status != 'legal'\n  );\t----- bird -----\tcard_games",
    "518": "SELECT \n    format, \n    COUNT(*) AS banned_count\nFROM legalities\nWHERE status = 'banned'\nGROUP BY format\nORDER BY banned_count DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "519": "SELECT code FROM sets WHERE name = 'Battlebond';\t----- bird -----\tcard_games",
    "520": "WITH IllustratorCounts AS (\n    SELECT \n        artist,\n        COUNT(*) AS card_count\n    FROM \n        cards\n    WHERE \n        artist IS NOT NULL\n    GROUP BY \n        artist\n    ORDER BY \n        card_count ASC\n    LIMIT 1\n),\nIllustratorCards AS (\n    SELECT \n        c.uuid\n    FROM \n        cards c\n    JOIN \n        IllustratorCounts i ON c.artist = i.artist\n)\nSELECT \n    l.format,\n    COUNT(*) AS count_in_format\nFROM \n    legalities l\nWHERE \n    l.uuid IN (SELECT uuid FROM IllustratorCards)\nGROUP BY \n    l.format;\t----- bird -----\tcard_games",
    "521": "SELECT \n    c.name AS card_name,\n    l.status AS legacy_status\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    c.frameVersion = '1997'\n    AND c.artist = 'D. Alexander Gregory'\n    AND c.hasContentWarning = 1\n    AND l.format = 'legacy';\t----- bird -----\tcard_games",
    "522": "SELECT \n    c.name AS card_name,\n    l.format AS banned_format\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    c.edhrecRank = 1\n    AND l.status = 'banned';\t----- bird -----\tcard_games",
    "523": "SELECT AVG(yearly_count) AS average_sets_per_year\nFROM (\n    SELECT strftime('%Y', releaseDate) AS release_year, COUNT(*) AS yearly_count\n    FROM sets\n    WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'\n    GROUP BY release_year\n);\t----- bird -----\tcard_games",
    "524": "SELECT DISTINCT artist\nFROM cards\nWHERE borderColor = 'black'\n  AND availability = 'arena'\n  AND isOnlineOnly = 1;\t----- bird -----\tcard_games",
    "525": "SELECT DISTINCT uuid\nFROM legalities\nWHERE format = 'oldschool'\n  AND status IN ('restricted', 'banned');\t----- bird -----\tcard_games",
    "526": "SELECT COUNT(*) AS paper_only_count\nFROM cards\nWHERE artist = 'Matthew D. Wilson'\n  AND availability = 'paper';\t----- bird -----\tcard_games",
    "527": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.artist = 'Kev Walker'\nORDER BY r.date DESC;\t----- bird -----\tcard_games",
    "528": "SELECT \n    c.name AS card_name,\n    l.format AS format,\n    l.status AS legality_status\nFROM \n    cards c\nJOIN \n    sets s ON c.setCode = s.code\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    s.code = 'HOU';\t----- bird -----\tcard_games",
    "529": "SELECT s.name\nFROM sets s\nJOIN set_translations st_ko ON s.code = st_ko.setCode AND st_ko.language = 'ko'\nLEFT JOIN set_translations st_ja ON s.code = st_ja.setCode AND st_ja.language = 'ja'\nWHERE st_ja.id IS NULL;\t----- bird -----\tcard_games",
    "530": "SELECT \n    c.name AS card_name,\n    c.frameVersion AS frame_style,\n    l.format,\n    l.status\nFROM \n    cards c\nLEFT JOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    c.artist = 'Allen Williams'\n    AND (l.status = 'banned' OR l.status IS NULL)\nORDER BY \n    c.name, l.format;\t----- bird -----\tcard_games",
    "531": "SELECT DisplayName, Reputation\nFROM users\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nORDER BY Reputation DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "532": "SELECT DisplayName\nFROM users\nWHERE strftime('%Y', CreationDate) = '2011';\t----- bird -----\tcodebase_community",
    "533": "SELECT COUNT(*) AS UsersAfter2014\nFROM users\nWHERE LastAccessDate > '2014-09-01';\t----- bird -----\tcodebase_community",
    "534": "SELECT DisplayName\nFROM users\nORDER BY Views DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "535": "SELECT COUNT(*) AS users_with_more_than_100_upvotes_and_more_than_1_downvote\nFROM users\nWHERE UpVotes > 100\n  AND DownVotes > 1;\t----- bird -----\tcodebase_community",
    "536": "with more than 10 views created their account after the year 2013?**\n\nWe need to:\n\n1. **Filter users** who have:\n   - `Views > 10`\n   - `CreationDate` after the year 2013\n\n2. **Count** the number of such users.\n\n---\n\n### Step-by-step SQL Construction:\n\n- **Filter by `Views > 10`**:\n  ```sql\n  WHERE Views > 10\n  ```\n\n- **Filter by `CreationDate` after 2013**:\n  Since `CreationDate` is a `DATETIME`, we can compare it to a date in 2013:\n  ```sql\n  WHERE CreationDate > '2013-12-31'\n  ```\n\n- **Combine both conditions**:\n  ```sql\n  WHERE Views > 10 AND CreationDate > '2013-12-31'\n  ```\n\n- **Count the number of such users**:\n  ```sql\n  SELECT COUNT(*) FROM users\n  WHERE Views > 10 AND CreationDate > '2013-12-31'\n  ```\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT COUNT(*) \nFROM users\nWHERE Views > 10 AND CreationDate > '2013-12-31';\t----- bird -----\tcodebase_community",
    "537": "SELECT COUNT(*) AS PostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);\t----- bird -----\tcodebase_community",
    "538": "SELECT Title\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);\t----- bird -----\tcodebase_community",
    "539": "SELECT u.DisplayName AS OwnerDisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community",
    "540": "SELECT Id FROM users WHERE DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "541": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score = (\n    SELECT MAX(Score)\n    FROM posts\n    WHERE OwnerUserId IS NOT NULL\n);\t----- bird -----\tcodebase_community",
    "542": "SELECT COUNT(*) AS TotalComments\nFROM comments\nWHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE OwnerUserId = (\n        SELECT Id\n        FROM users\n        WHERE DisplayName = 'csgillespie'\n    )\n);\t----- bird -----\tcodebase_community",
    "543": "SELECT \n    p.Id AS PostId,\n    COUNT(a.Id) AS AnswerCount\nFROM \n    users u\nJOIN \n    posts p ON u.Id = p.OwnerUserId\nLEFT JOIN \n    posts a ON p.Id = a.ParentId AND a.PostTypeId = 2\nWHERE \n    u.DisplayName = 'csgillespie'\nGROUP BY \n    p.Id\nORDER BY \n    AnswerCount DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "544": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Title = 'Examples for teaching: Correlation does not mean causation';\t----- bird -----\tcodebase_community",
    "545": "SELECT COUNT(*) AS RootPostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n)\nAND ParentId IS NULL;\t----- bird -----\tcodebase_community",
    "546": "SELECT DISTINCT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 0\n  AND p.CommentCount > 0\n  AND p.AnswerCount > 0\n  AND p.ClosedDate IS NULL\n  AND p.Title IS NOT NULL\n  AND p.Body IS NOT NULL\n  AND p.LastEditDate IS NOT NULL;\t----- bird -----\tcodebase_community",
    "547": "SELECT COUNT(*) AS HighScoreElderPosts\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.Age > 60\n  AND posts.Score > 19;\t----- bird -----\tcodebase_community",
    "548": "SELECT u.Location\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community",
    "549": "SELECT p.Body\nFROM tags t\nJOIN posts p ON t.ExcerptPostId = p.Id\nWHERE t.TagName = 'bayesian';\t----- bird -----\tcodebase_community",
    "550": "SELECT p.Body\nFROM tags t\nJOIN posts p ON t.ExcerptPostId = p.Id\nWHERE t.Count = (\n    SELECT MAX(Count)\n    FROM tags\n);\t----- bird -----\tcodebase_community",
    "551": "SELECT COUNT(*) AS BadgeCount\nFROM badges\nWHERE UserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);\t----- bird -----\tcodebase_community",
    "552": "SELECT b.Name AS BadgeName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "553": "SELECT COUNT(*) AS BadgeCount\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'csgillespie'\n  AND strftime('%Y', b.Date) = '2011';\t----- bird -----\tcodebase_community",
    "554": "SELECT u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nGROUP BY b.UserId\nORDER BY COUNT(b.Id) DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "555": "SELECT AVG(p.Score) AS AverageScore\nFROM posts p\nWHERE p.OwnerUserId = (\n    SELECT u.Id\n    FROM users u\n    WHERE u.DisplayName = 'csgillespie'\n);\t----- bird -----\tcodebase_community",
    "556": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT u.Id, COUNT(b.Id) AS badge_count\n    FROM users u\n    LEFT JOIN badges b ON u.Id = b.UserId\n    WHERE u.Views > 200\n    GROUP BY u.Id\n) AS user_badge_counts;\t----- bird -----\tcodebase_community",
    "557": "SELECT\n    100.0 * COUNT(CASE WHEN user_age >= 60 THEN 1 END) / COUNT(*) AS percentage_elder_owners\nFROM (\n    SELECT\n        p.Id,\n        p.Score,\n        p.CreationDate AS post_creation_date,\n        u.CreationDate AS user_creation_date,\n        julianday(p.CreationDate) - julianday(u.CreationDate) AS days_between,\n        (julianday(p.CreationDate) - julianday(u.CreationDate)) / 365.25 AS user_age\n    FROM posts p\n    JOIN users u ON p.OwnerUserId = u.Id\n    WHERE p.Score > 5\n) subquery;\t----- bird -----\tcodebase_community",
    "558": "SELECT COUNT(*) AS VoteCount\nFROM votes\nWHERE UserId = 58\n  AND CreationDate = '2010-07-19';\t----- bird -----\tcodebase_community",
    "559": "SELECT CreationDate\nFROM votes\nGROUP BY CreationDate\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "560": "SELECT COUNT(*) AS RevivalBadgeCount\nFROM badges\nWHERE Name = 'Revival';\t----- bird -----\tcodebase_community",
    "561": "SELECT p.Title\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.Score = (\n    SELECT MAX(Score)\n    FROM comments\n    WHERE Score IS NOT NULL\n);\t----- bird -----\tcodebase_community",
    "562": "SELECT COUNT(c.Id) AS CommentCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.ViewCount = 1910;\t----- bird -----\tcodebase_community",
    "563": "SELECT p.FavoriteCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.UserId = 3025\n  AND c.CreationDate = '2014-04-23 20:29:39';\t----- bird -----\tcodebase_community",
    "564": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ParentId = 107829\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "565": "SELECT \n    p.Id AS PostId,\n    p.Score,\n    p.ViewCount,\n    p.AnswerCount,\n    p.CommentCount,\n    p.FavoriteCount,\n    p.LastActivityDate\nFROM \n    comments c\nJOIN \n    posts p ON c.PostId = p.Id\nWHERE \n    c.UserId = 23853\n    AND c.CreationDate = '2013-07-12 09:08:18';\t----- bird -----\tcodebase_community",
    "566": "SELECT u.Reputation\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Id = 65041;\t----- bird -----\tcodebase_community",
    "567": "SELECT COUNT(*) AS OwnedPostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Tiago Pasqualini'\n);\t----- bird -----\tcodebase_community",
    "568": "SELECT u.DisplayName\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;\t----- bird -----\tcodebase_community",
    "569": "SELECT COUNT(*) AS VoteCount\nFROM votes\nWHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE Tags LIKE '%data-visualization%' OR Title LIKE '%data visualization%'\n);\t----- bird -----\tcodebase_community",
    "570": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';\t----- bird -----\tcodebase_community",
    "571": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) * 1.0 / \n    NULLIF((SELECT COUNT(*) FROM votes WHERE UserId = 24), 0) AS post_to_vote_ratio;\t----- bird -----\tcodebase_community",
    "572": "SELECT ViewCount\nFROM posts\nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t----- bird -----\tcodebase_community",
    "573": "SELECT Text\nFROM comments\nWHERE Score = 17;\t----- bird -----\tcodebase_community",
    "574": "SELECT Id, DisplayName\nFROM users\nWHERE WebsiteUrl = 'http://stackoverflow.com';\t----- bird -----\tcodebase_community",
    "575": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'SilentGhost';\t----- bird -----\tcodebase_community",
    "576": "SELECT u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Text = 'thank you user93!';\t----- bird -----\tcodebase_community",
    "577": "SELECT \n    Text AS CommentText,\n    CreationDate\nFROM \n    comments\nWHERE \n    UserDisplayName = 'A Lion.';\t----- bird -----\tcodebase_community",
    "578": "SELECT \n    u.Id AS UserId,\n    u.DisplayName,\n    u.Reputation\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    p.Title = 'Understanding what Dassault iSight is doing?';\t----- bird -----\tcodebase_community",
    "579": "with the given title from the `posts` table.\n2. **Use that `Id` to find all related comments** in the `comments` table where `PostId` matches the post's `Id`.\n\n---\n\n### \u2705 Step-by-step SQL Query:\n\n```sql\n-- Step 1: Find the PostId of the post with the given title\nSELECT Id\nFROM posts\nWHERE Title = 'How does gentle boosting differ from AdaBoost?';\t----- bird -----\tcodebase_community",
    "580": "SELECT DISTINCT UserId\nFROM badges\nWHERE Name = 'Necromancer'\n  AND UserId IS NOT NULL\nLIMIT 10;\t----- bird -----\tcodebase_community",
    "581": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Title = 'Open source tools for visualizing multi-dimensional data?';\t----- bird -----\tcodebase_community",
    "582": "SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa';\t----- bird -----\tcodebase_community",
    "583": "SELECT \n    u.WebsiteUrl,\n    SUM(p.Score) AS TotalScore\nFROM \n    postHistory ph\nJOIN \n    users u ON ph.UserId = u.Id\nJOIN \n    posts p ON ph.PostId = p.Id\nWHERE \n    u.DisplayName = 'Yevgeny';\t----- bird -----\tcodebase_community",
    "584": "with the given title from the `posts` table.\n2. **Find all the edits** (i.e., entries in `postHistory`) for that post.\n3. **Identify the `UserId`s** of the users who made those edits.\n4. **Find all comments** in the `comments` table made by those users.\n\n---\n\n### \u2705 **SQL Query:**\n\n```sql\n-- Step 1: Find the post ID for the given title\nWITH TargetPost AS (\n    SELECT Id\n    FROM posts\n    WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n),\n\n-- Step 2: Find all users who edited that post\nEditors AS (\n    SELECT DISTINCT UserId\n    FROM postHistory\n    WHERE PostId = (SELECT Id FROM TargetPost)\n      AND UserId IS NOT NULL\n)\n\n-- Step 3: Find all comments made by those users\nSELECT c.Text AS CommentText\nFROM comments c\nWHERE c.UserId IN (SELECT UserId FROM Editors);\t----- bird -----\tcodebase_community",
    "585": "SELECT SUM(v.BountyAmount) AS TotalBountyAmount\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE p.Title = 'data'\n  AND v.VoteTypeId = 8;\t----- bird -----\tcodebase_community",
    "586": "SELECT u.Id AS UserId, u.DisplayName\nFROM votes v\nJOIN posts p ON v.PostId = p.Id\nJOIN users u ON v.UserId = u.Id\nWHERE v.VoteTypeId = 8\n  AND v.BountyAmount = 50\n  AND p.Title LIKE '%variance%';\t----- bird -----\tcodebase_community",
    "587": "SELECT \n    p.Title,\n    p.ViewCount,\n    c.Text AS Comment\nFROM \n    posts p\nLEFT JOIN \n    comments c ON p.Id = c.PostId\nWHERE \n    p.Tags LIKE '%<humor>%';\t----- bird -----\tcodebase_community",
    "588": "SELECT COUNT(*) AS TotalComments\nFROM comments\nWHERE UserId = 13;\t----- bird -----\tcodebase_community",
    "589": "SELECT Id\nFROM users\nORDER BY Reputation DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "590": "SELECT Id\nFROM users\nORDER BY Views ASC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "591": "SELECT COUNT(DISTINCT UserId) AS SupporterCount\nFROM badges\nWHERE Name = 'Supporter'\n  AND Date >= '2011-01-01'\n  AND Date <= '2011-12-31';\t----- bird -----\tcodebase_community",
    "592": "SELECT COUNT(*) AS UserCount\nFROM (\n    SELECT UserId\n    FROM badges\n    WHERE UserId IS NOT NULL\n    GROUP BY UserId\n    HAVING COUNT(*) > 5\n) AS badge_counts;\t----- bird -----\tcodebase_community",
    "593": "SELECT COUNT(DISTINCT u.Id) AS UserCount\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Location = 'New York'\n  AND b.Name IN ('teacher', 'supporter')\nGROUP BY u.Id\nHAVING COUNT(DISTINCT b.Name) = 2;\t----- bird -----\tcodebase_community",
    "594": "SELECT \n    u.Id AS UserId,\n    u.DisplayName,\n    u.Reputation\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    p.Id = 1;\t----- bird -----\tcodebase_community",
    "595": "SELECT DISTINCT u.Id AS UserId, u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN postHistory ph ON p.Id = ph.PostId\nWHERE p.ViewCount >= 1000\nGROUP BY u.Id, p.Id\nHAVING COUNT(ph.Id) = 1;\t----- bird -----\tcodebase_community",
    "596": "SELECT \n    c.UserId,\n    COUNT(c.Id) AS CommentCount,\n    b.Name AS BadgeName\nFROM \n    comments c\nJOIN \n    badges b ON c.UserId = b.UserId\nGROUP BY \n    c.UserId, b.Name\nORDER BY \n    CommentCount DESC;\t----- bird -----\tcodebase_community",
    "597": "SELECT COUNT(DISTINCT u.Id) AS TeacherUsersFromIndia\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Location = 'India'\n  AND b.Name = 'Teacher';\t----- bird -----\tcodebase_community",
    "598": "SELECT\n    100.0 * (2011_count - 2010_count) / 2010_count AS percentage_difference\nFROM\n    (SELECT\n        SUM(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS 2010_count,\n        SUM(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS 2011_count\n     FROM\n        badges\n     WHERE\n        Name = 'Student') AS badge_counts;\t----- bird -----\tcodebase_community",
    "599": "SELECT\n    (SELECT GROUP_CONCAT(DISTINCT PostHistoryTypeId) \n     FROM postHistory \n     WHERE PostId = 3720) AS PostHistoryTypeIDs,\n    (SELECT COUNT(DISTINCT UserId) \n     FROM comments \n     WHERE PostId = 3720) AS UniqueCommenters;\t----- bird -----\tcodebase_community",
    "600": "SELECT \n    pl.RelatedPostId AS RelatedPostId\nFROM \n    postLinks pl\nWHERE \n    pl.PostId = 61217\nUNION\nSELECT \n    pl.PostId AS RelatedPostId\nFROM \n    postLinks pl\nWHERE \n    pl.RelatedPostId = 61217\n\nUNION\n\n-- Get the popularity (score) of post ID 61217\nSELECT \n    p.Id AS RelatedPostId,\n    p.Score AS Popularity\nFROM \n    posts p\nWHERE \n    p.Id = 61217;\t----- bird -----\tcodebase_community",
    "601": "SELECT \n    p.Score,\n    pl.LinkTypeId\nFROM \n    posts p\nLEFT JOIN \n    postLinks pl ON p.Id = pl.PostId\nWHERE \n    p.Id = 395;\t----- bird -----\tcodebase_community",
    "602": "SELECT \n    Id AS PostId, \n    OwnerUserId AS UserId\nFROM \n    posts\nWHERE \n    Score > 60;\t----- bird -----\tcodebase_community",
    "603": "SELECT SUM(FavoriteCount) AS TotalFavoriteCount\nFROM posts\nWHERE OwnerUserId = 686\n  AND strftime('%Y', CreaionDate) = '2011';\t----- bird -----\tcodebase_community",
    "604": "SELECT \n    AVG(u.UpVotes) AS AverageUpVotes,\n    AVG(u.Age) AS AverageUserAge\nFROM \n    users u\nWHERE \n    u.Id IN (\n        SELECT \n            p.OwnerUserId\n        FROM \n            posts p\n        WHERE \n            p.OwnerUserId IS NOT NULL\n        GROUP BY \n            p.OwnerUserId\n        HAVING \n            COUNT(p.Id) > 10\n    );\t----- bird -----\tcodebase_community",
    "605": "SELECT COUNT(DISTINCT UserId) AS AnnouncerCount\nFROM badges\nWHERE Name = 'Announcer';\t----- bird -----\tcodebase_community",
    "606": "SELECT Name\nFROM badges\nWHERE Date = '2010-07-19 19:39:08';\t----- bird -----\tcodebase_community",
    "607": "SELECT COUNT(*) AS PositiveCommentCount\nFROM comments\nWHERE Score > 0;\t----- bird -----\tcodebase_community",
    "608": "SELECT Text\nFROM comments\nWHERE CreationDate = '2010-07-19 19:25:47';\t----- bird -----\tcodebase_community",
    "609": "SELECT COUNT(*) \nFROM posts \nWHERE Score = 10;\t----- bird -----\tcodebase_community",
    "610": "SELECT MAX(Reputation) FROM users;\t----- bird -----\tcodebase_community",
    "611": "SELECT u.Reputation\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Date = '2010-07-19 19:39:08';\t----- bird -----\tcodebase_community",
    "612": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'Pierre';\t----- bird -----\tcodebase_community",
    "613": "SELECT b.Date\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Location = 'Rochester, NY';\t----- bird -----\tcodebase_community",
    "614": "SELECT \n    (COUNT(DISTINCT b.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS PercentageWithTeacherBadge\nFROM \n    badges b\nWHERE \n    b.Name = 'Teacher';\t----- bird -----\tcodebase_community",
    "615": "SELECT \n    100.0 * COUNT(CASE WHEN users.Age BETWEEN 13 AND 19 THEN 1 END) / COUNT(*) AS TeenPercentage\nFROM \n    badges\nJOIN \n    users ON badges.UserId = users.Id\nWHERE \n    badges.Name = 'Organizer';\t----- bird -----\tcodebase_community",
    "616": "SELECT c.Score\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.CreationDate = '2010-07-19 19:19:56';\t----- bird -----\tcodebase_community",
    "617": "SELECT c.Text\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.CreationDate = '2010-07-19 19:37:33';\t----- bird -----\tcodebase_community",
    "618": "SELECT u.Age\nFROM users u\nWHERE u.Location = 'Vienna, Austria'\n  AND EXISTS (\n    SELECT 1\n    FROM badges b\n    WHERE b.UserId = u.Id\n  );\t----- bird -----\tcodebase_community",
    "619": "SELECT COUNT(DISTINCT b.UserId) AS AdultSupporterCount\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Supporter'\n  AND u.Age >= 18;\t----- bird -----\tcodebase_community",
    "620": "SELECT u.Views\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Date = '2010-07-19 19:39:08';\t----- bird -----\tcodebase_community",
    "621": "SELECT b.Name AS BadgeName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Reputation = (\n    SELECT MIN(Reputation)\n    FROM users\n    WHERE Reputation IS NOT NULL\n);\t----- bird -----\tcodebase_community",
    "622": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'Sharpie';\t----- bird -----\tcodebase_community",
    "623": "SELECT COUNT(DISTINCT b.UserId) AS ElderSupporterCount\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Supporter'\n  AND u.CreationDate < '2010-01-01';\t----- bird -----\tcodebase_community",
    "624": "SELECT DisplayName\nFROM users\nWHERE Id = 30;\t----- bird -----\tcodebase_community",
    "625": "SELECT COUNT(*) AS NewYorkUsers\nFROM users\nWHERE Location = 'New York';\t----- bird -----\tcodebase_community",
    "626": "SELECT COUNT(*) AS VoteCount\nFROM votes\nWHERE strftime('%Y', CreationDate) = '2010';\t----- bird -----\tcodebase_community",
    "627": "SELECT COUNT(*) AS AdultUserCount\nFROM users\nWHERE Age >= 18;\t----- bird -----\tcodebase_community",
    "628": "SELECT Id, DisplayName, Views\nFROM users\nORDER BY Views DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "629": "SELECT\n    (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 /\n    (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS vote_ratio;\t----- bird -----\tcodebase_community",
    "630": "SELECT DISTINCT TRIM(SUBSTR(tags.TagName, 2, LENGTH(tags.TagName) - 2)) AS TagName\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nJOIN tags ON posts.Tags LIKE '%' || tags.TagName || '%'\nWHERE users.DisplayName = 'John Salvatier';\t----- bird -----\tcodebase_community",
    "631": "SELECT COUNT(*) AS PostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Daniel Vassallo'\n);\t----- bird -----\tcodebase_community",
    "632": "SELECT Id FROM users WHERE DisplayName = 'Harlan';\t----- bird -----\tcodebase_community",
    "633": "SELECT p.Id\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'slashnick'\nORDER BY p.AnswerCount DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "634": "SELECT \n    u.DisplayName,\n    SUM(p.Score) AS TotalScore,\n    SUM(p.ViewCount) AS TotalViews,\n    SUM(p.AnswerCount) AS TotalAnswers,\n    SUM(p.CommentCount) AS TotalComments\nFROM \n    users u\nJOIN \n    posts p ON u.Id = p.OwnerUserId\nWHERE \n    u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')\nGROUP BY \n    u.DisplayName;\t----- bird -----\tcodebase_community",
    "635": "SELECT COUNT(*) AS PostCount\nFROM (\n    SELECT p.Id\n    FROM posts p\n    JOIN users u ON p.OwnerUserId = u.Id\n    JOIN votes v ON p.Id = v.PostId\n    WHERE u.DisplayName = 'Matt Parker'\n    GROUP BY p.Id\n    HAVING COUNT(v.Id) > 4\n) AS result;\t----- bird -----\tcodebase_community",
    "636": "SELECT COUNT(*) AS NegativeCommentCount\nFROM comments\nWHERE UserId != (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Neil McGuigan'\n)\n  AND Score < 0;\t----- bird -----\tcodebase_community",
    "637": "SELECT DISTINCT TRIM(SUBSTR(tags.Tags, INSTR(tags.Tags, '>', 1, n.n) + 1, \n                     INSTR(tags.Tags, '<', INSTR(tags.Tags, '>', 1, n.n) + 1) - \n                     INSTR(tags.Tags, '>', 1, n.n) - 1)) AS TagName\nFROM (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Mark Meckes'\n) AS user\nJOIN posts ON posts.OwnerUserId = user.Id\nLEFT JOIN comments ON comments.PostId = posts.Id\nJOIN (\n    SELECT 1 AS n UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5\n    UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9\n) AS n ON INSTR(posts.Tags, '><', n.n) > 0\nCROSS JOIN (SELECT '><' AS delimiter) AS d\nWHERE comments.Id IS NULL\n  AND INSTR(posts.Tags, '>', 1, n.n) > 0\n  AND INSTR(posts.Tags, '<', INSTR(posts.Tags, '>', 1, n.n) + 1) > 0;\t----- bird -----\tcodebase_community",
    "638": "SELECT DISTINCT u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Organizer';\t----- bird -----\tcodebase_community",
    "639": "SELECT\n    100.0 * COUNT(CASE WHEN LOWER(Tags) LIKE '%<r>%' THEN 1 END) / COUNT(*) AS R_Posts_Percentage\nFROM\n    posts\nWHERE\n    OwnerUserId IS NULL\n    AND CommunityOwnedDate IS NOT NULL;\t----- bird -----\tcodebase_community",
    "640": "SELECT \n    (SELECT SUM(p.ViewCount)\n     FROM posts p\n     JOIN users u ON p.OwnerUserId = u.Id\n     WHERE u.DisplayName = 'Mornington') \n    -\n    (SELECT SUM(p.ViewCount)\n     FROM posts p\n     JOIN users u ON p.OwnerUserId = u.Id\n     WHERE u.DisplayName = 'Amos') AS ViewCountDifference;\t----- bird -----\tcodebase_community",
    "641": "SELECT COUNT(DISTINCT UserId) AS CommentatorBadgeCount\nFROM badges\nWHERE Name = 'Commentator'\n  AND Date >= '2014-01-01'\n  AND Date < '2015-01-01';\t----- bird -----\tcodebase_community",
    "642": "SELECT COUNT(*) AS PostCount\nFROM posts\nWHERE CreationDate = '2010-07-21';\t----- bird -----\tcodebase_community",
    "643": "SELECT DisplayName, Age\nFROM users\nWHERE Views = (\n    SELECT MAX(Views)\n    FROM users\n);\t----- bird -----\tcodebase_community",
    "644": "SELECT \n    LastEditDate, \n    LastEditorUserId\nFROM \n    posts\nWHERE \n    Title = 'Detecting a given face in a database of facial images';\t----- bird -----\tcodebase_community",
    "645": "SELECT COUNT(*) AS NegativeCommentCount\nFROM comments\nWHERE UserId = 13 AND Score < 0;\t----- bird -----\tcodebase_community",
    "646": "SELECT \n    p.Title AS PostTitle,\n    c.Text AS CommentText,\n    c.UserDisplayName AS CommenterDisplayName\nFROM \n    comments c\nJOIN \n    posts p ON c.PostId = p.Id\nWHERE \n    c.Score > 0;\t----- bird -----\tcodebase_community",
    "647": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE strftime('%Y', b.Date) = '2011'\n  AND u.Location = 'North Pole';\t----- bird -----\tcodebase_community",
    "648": "SELECT \n    u.DisplayName,\n    u.WebsiteUrl\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    p.FavoriteCount > 150;\t----- bird -----\tcodebase_community",
    "649": "SELECT \n    p.Id AS PostId,\n    p.Title,\n    COUNT(ph.Id) AS PostHistoryCount,\n    MAX(ph.CreationDate) AS LastEditDate\nFROM \n    posts p\nLEFT JOIN \n    postHistory ph ON p.Id = ph.PostId\nWHERE \n    p.Title = 'What is the best introductory Bayesian statistics textbook?'\nGROUP BY \n    p.Id, p.Title;\t----- bird -----\tcodebase_community",
    "650": "SELECT \n    u.LastAccessDate,\n    u.Location\nFROM \n    badges b\nJOIN \n    users u ON b.UserId = u.Id\nWHERE \n    b.Name = 'Outliers';\t----- bird -----\tcodebase_community",
    "651": "SELECT p.Title\nFROM posts p\nJOIN postLinks pl ON p.Id = pl.RelatedPostId\nJOIN posts original ON pl.PostId = original.Id\nWHERE original.Title = 'How to tell if something happened in a data set which monitors a value over time';\t----- bird -----\tcodebase_community",
    "652": "SELECT \n    p.Id AS PostId,\n    b.Name AS BadgeName\nFROM \n    users u\nJOIN \n    badges b ON u.Id = b.UserId\nLEFT JOIN \n    posts p ON u.Id = p.OwnerUserId\nWHERE \n    u.DisplayName = 'Samuel'\n    AND strftime('%Y', b.Date) = '2013';\t----- bird -----\tcodebase_community",
    "653": "SELECT OwnerDisplayName\nFROM posts\nORDER BY Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "654": "SELECT u.DisplayName, u.Location\nFROM tags t\nJOIN posts p ON t.ExcerptPostId = p.Id\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE t.TagName = 'hypothesis-testing';\t----- bird -----\tcodebase_community",
    "655": "SELECT \n    pl.LinkTypeId,\n    p2.Title AS RelatedPostTitle\nFROM \n    posts p\nJOIN \n    postLinks pl ON p.Id = pl.PostId\nJOIN \n    posts p2 ON pl.RelatedPostId = p2.Id\nWHERE \n    p.Title = 'What are principal component scores?';\t----- bird -----\tcodebase_community",
    "656": "SELECT p.OwnerDisplayName\nFROM posts p\nWHERE p.Id = (\n    SELECT ParentId\n    FROM posts\n    WHERE ParentId IS NOT NULL\n    ORDER BY Score DESC\n    LIMIT 1\n);\t----- bird -----\tcodebase_community",
    "657": "SELECT u.DisplayName, u.WebsiteUrl\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.VoteTypeId = 8\n  AND v.BountyAmount = (\n    SELECT MAX(BountyAmount)\n    FROM votes\n    WHERE VoteTypeId = 8\n  );\t----- bird -----\tcodebase_community",
    "658": "with the highest popularity**, we need to define what \"popularity\" means. Since the `posts` table contains several metrics like `Score`, `ViewCount`, `AnswerCount`, `CommentCount`, and `FavoriteCount`, we can create a **composite popularity score** by summing or weighting these values.\n\nA common approach is to use a **weighted popularity score**, such as:\n\n```\nPopularity = Score + ViewCount + AnswerCount + CommentCount + FavoriteCount\n```\n\nWe can then select the top 5 posts based on this score and retrieve their titles.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT Title\nFROM posts\nWHERE Title IS NOT NULL\nORDER BY \n    (Score + ViewCount + AnswerCount + CommentCount + COALESCE(FavoriteCount, 0)) DESC\nLIMIT 5;\t----- bird -----\tcodebase_community",
    "659": "SELECT COUNT(*) AS TagCount\nFROM tags\nWHERE Count BETWEEN 5000 AND 7000;\t----- bird -----\tcodebase_community",
    "660": "SELECT OwnerUserId\nFROM posts\nORDER BY Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "661": "SELECT Id\n   FROM users\n   ORDER BY Reputation DESC\n   LIMIT 1;\t----- bird -----\tcodebase_community",
    "662": "with votes that were created in 2011 have a bounty of 50?**\n\nWe need to:\n\n1. **Join** the `posts` and `votes` tables on `PostId`.\n2. **Filter** for posts created in **2011**.\n3. **Filter** for votes where `VoteTypeId` corresponds to a **bounty** and `BountyAmount = 50`.\n4. **Count** the number of such posts.\n\n---\n\n### Step-by-step SQL Construction:\n\n1. **Join** `posts` and `votes` on `PostId`:\n   ```sql\n   FROM posts p\n   JOIN votes v ON p.Id = v.PostId\n   ```\n\n2. **Filter for posts created in 2011**:\n   ```sql\n   WHERE strftime('%Y', p.CreationDate) = '2011'\n   ```\n\n3. **Filter for bounty votes with amount 50**:\n   ```sql\n   AND v.VoteTypeId = 8  -- Assuming 8 is the bounty vote type\n   AND v.BountyAmount = 50\n   ```\n\n4. **Count the number of such posts**:\n   ```sql\n   SELECT COUNT(DISTINCT p.Id)\n   ```\n\n---\n\n### Final SQL Query:\n\n```sql\nSELECT COUNT(DISTINCT p.Id)\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE strftime('%Y', p.CreationDate) = '2011'\n  AND v.VoteTypeId = 8\n  AND v.BountyAmount = 50;\t----- bird -----\tcodebase_community",
    "663": "SELECT Id\nFROM users\nWHERE Age = (\n    SELECT MIN(Age)\n    FROM users\n    WHERE Age IS NOT NULL\n);\t----- bird -----\tcodebase_community",
    "664": "SELECT SUM(Score) AS TotalScore\nFROM posts\nWHERE CreationDate = '2010-07-19';\t----- bird -----\tcodebase_community",
    "665": "SELECT AVG(monthly_link_count) AS average_monthly_links\nFROM (\n    SELECT strftime('%Y-%m', pl.CreationDate) AS month,\n           COUNT(*) AS monthly_link_count\n    FROM postLinks pl\n    JOIN posts p ON pl.PostId = p.Id\n    WHERE strftime('%Y', pl.CreationDate) = '2010'\n      AND p.AnswerCount <= 2\n    GROUP BY month\n) AS monthly_links;\t----- bird -----\tcodebase_community",
    "666": "SELECT p.Id\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE v.UserId = 1465\nORDER BY p.Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "667": "SELECT p.Title\nFROM posts p\nWHERE p.Id = (\n    SELECT PostId\n    FROM postLinks\n    WHERE CreationDate = (\n        SELECT MIN(CreationDate)\n        FROM postLinks\n    )\n);\t----- bird -----\tcodebase_community",
    "668": "SELECT u.DisplayName\nFROM users u\nJOIN (\n    SELECT UserId, COUNT(*) AS BadgeCount\n    FROM badges\n    GROUP BY UserId\n    ORDER BY BadgeCount DESC\n    LIMIT 1\n) b ON u.Id = b.UserId;\t----- bird -----\tcodebase_community",
    "669": "SELECT Id FROM users WHERE DisplayName = 'chl';\t----- bird -----\tcodebase_community",
    "670": "SELECT MIN(p.CreationDate) AS FirstPostDate\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Age = (\n    SELECT MIN(Age)\n    FROM users\n    WHERE Age IS NOT NULL\n);\t----- bird -----\tcodebase_community",
    "671": "SELECT u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Autobiographer'\nORDER BY b.Date ASC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "672": "SELECT COUNT(DISTINCT u.Id) AS UserCount\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom'\nGROUP BY u.Id\nHAVING SUM(p.FavoriteCount) >= 4;\t----- bird -----\tcodebase_community",
    "673": "SELECT AVG(vote_counts.post_count) AS average_posts_voted\nFROM (\n    SELECT v.UserId, COUNT(DISTINCT v.PostId) AS post_count\n    FROM votes v\n    JOIN users u ON v.UserId = u.Id\n    WHERE u.CreationDate = (\n        SELECT MIN(CreationDate)\n        FROM users\n    )\n    GROUP BY v.UserId\n) AS vote_counts;\t----- bird -----\tcodebase_community",
    "674": "SELECT DisplayName, Reputation\nFROM users\nORDER BY Reputation DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "675": "SELECT COUNT(*) AS UserCount\nFROM users\nWHERE Reputation > 2000 AND Views > 1000;\t----- bird -----\tcodebase_community",
    "676": "SELECT DisplayName\nFROM users\nWHERE Age >= 18;\t----- bird -----\tcodebase_community",
    "677": "SELECT Id FROM users WHERE DisplayName = 'Jay Stevens';\t----- bird -----\tcodebase_community",
    "678": "SELECT \n    p.Id, \n    p.Title, \n    p.ViewCount\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    u.DisplayName = 'Harvey Motulsky'\nORDER BY \n    p.ViewCount DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "679": "SELECT Id, Title\nFROM posts\nORDER BY Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "680": "SELECT AVG(p.Score) AS AverageScore\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Stephen Turner';\t----- bird -----\tcodebase_community",
    "681": "SELECT DISTINCT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.ViewCount > 20000\n  AND strftime('%Y', p.CreationDate) = '2011';\t----- bird -----\tcodebase_community",
    "682": "SELECT \n    p.Id AS PostId,\n    p.OwnerDisplayName\nFROM \n    posts p\nWHERE \n    strftime('%Y', p.CreationDate) = '2010'\nORDER BY \n    p.Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "683": "with reputation > 1000) / (Total number of posts in 2011) * 100\n   ```\n\nHere is the SQL query to do this:\n\n```sql\nSELECT\n    100.0 * COUNT(CASE WHEN u.Reputation > 1000 THEN 1 END) / COUNT(*) AS percentage\nFROM\n    posts p\nJOIN\n    users u ON p.OwnerUserId = u.Id\nWHERE\n    strftime('%Y', p.CreaionDate) = '2011';\t----- bird -----\tcodebase_community",
    "684": "SELECT \n    100.0 * COUNT(CASE WHEN Age BETWEEN 13 AND 19 THEN 1 END) / COUNT(*) AS TeenagePercentage\nFROM users;\t----- bird -----\tcodebase_community",
    "685": "SELECT Id FROM posts WHERE Title = 'Computer Game Datasets';\t----- bird -----\tcodebase_community",
    "686": "SELECT COUNT(*) AS PostsAboveAverageViews\nFROM posts\nWHERE ViewCount > (\n    SELECT AVG(ViewCount)\n    FROM posts\n    WHERE ViewCount IS NOT NULL\n);\t----- bird -----\tcodebase_community",
    "687": "SELECT COUNT(*) AS CommentCount\nFROM comments\nWHERE PostId = (\n    SELECT Id\n    FROM posts\n    ORDER BY Score DESC\n    LIMIT 1\n);\t----- bird -----\tcodebase_community",
    "688": "SELECT COUNT(*) AS HighViewNoCommentPosts\nFROM posts p\nWHERE p.ViewCount > 35000\n  AND NOT EXISTS (\n    SELECT 1\n    FROM comments c\n    WHERE c.PostId = p.Id\n  );\t----- bird -----\tcodebase_community",
    "689": "SELECT u.DisplayName, u.Location\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Id = 183;\t----- bird -----\tcodebase_community",
    "690": "SELECT b.*\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'Emmett'\nORDER BY b.Date DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "691": "SELECT COUNT(*) AS AdultUsersWithOver5000Upvotes\nFROM (\n    SELECT u.Id\n    FROM users u\n    JOIN votes v ON u.Id = v.UserId\n    WHERE v.VoteTypeId = 2\n      AND u.Age >= 18\n    GROUP BY u.Id\n    HAVING COUNT(*) > 5000\n) AS adult_upvoters;\t----- bird -----\tcodebase_community",
    "692": "SELECT \n    julianday(b.Date) - julianday(u.CreationDate) AS DaysToGetBadge\nFROM \n    users u\nJOIN \n    badges b ON u.Id = b.UserId\nWHERE \n    u.DisplayName = 'Zolomon'\nORDER BY \n    b.Date\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "693": "SELECT\n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = u.Id) AS PostCount,\n    (SELECT COUNT(*) FROM comments WHERE UserId = u.Id) AS CommentCount\nFROM\n    users u\nWHERE\n    u.CreationDate = (SELECT MAX(CreationDate) FROM users);\t----- bird -----\tcodebase_community",
    "694": "SELECT \n    c.Text AS CommentText,\n    c.UserDisplayName\nFROM \n    comments c\nJOIN \n    posts p ON c.PostId = p.Id\nWHERE \n    p.Title = 'Analysing wind data with R'\nORDER BY \n    c.CreationDate DESC\nLIMIT 10;\t----- bird -----\tcodebase_community",
    "695": "SELECT COUNT(DISTINCT UserId) AS CitizenPatrolCount\nFROM badges\nWHERE Name = 'Citizen Patrol';\t----- bird -----\tcodebase_community",
    "696": "SELECT COUNT(*) AS CareersPostCount\nFROM posts\nWHERE Tags LIKE '%careers%';\t----- bird -----\tcodebase_community",
    "697": "SELECT Reputation, Views\nFROM users\nWHERE DisplayName = 'Jarrod Dixon';\t----- bird -----\tcodebase_community",
    "698": "SELECT\n    (SELECT COUNT(*) FROM comments WHERE PostId = p.Id) AS comment_count,\n    (SELECT COUNT(*) FROM posts WHERE ParentId = p.Id AND PostTypeId = 2) AS answer_count\nFROM\n    posts p\nWHERE\n    p.Title = 'Clustering 1D data';\t----- bird -----\tcodebase_community",
    "699": "SELECT CreationDate\nFROM users\nWHERE DisplayName = 'IrishStat';\t----- bird -----\tcodebase_community",
    "700": "SELECT COUNT(DISTINCT PostId) AS NumPosts\nFROM votes\nWHERE VoteTypeId = 9 AND BountyAmount > 30;\t----- bird -----\tcodebase_community",
    "701": "SELECT Id\n   FROM users\n   ORDER BY Reputation DESC\n   LIMIT 1;\t----- bird -----\tcodebase_community",
    "702": "SELECT COUNT(*) \nFROM posts \nWHERE Score < 20;\t----- bird -----\tcodebase_community",
    "703": "SELECT COUNT(*) AS TagCount\nFROM tags\nWHERE Id < 15\n  AND Count <= 20;\t----- bird -----\tcodebase_community",
    "704": "SELECT ExcerptPostId, WikiPostId\nFROM tags\nWHERE TagName = 'sample';\t----- bird -----\tcodebase_community",
    "705": "SELECT \n    u.Reputation,\n    u.UpVotes\nFROM \n    comments c\nJOIN \n    users u ON c.UserId = u.Id\nWHERE \n    c.Text = 'fine, you win :)';\t----- bird -----\tcodebase_community",
    "706": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.Body LIKE '%linear regression%' OR p.Title LIKE '%linear regression%';\t----- bird -----\tcodebase_community",
    "707": "SELECT c.Text AS CommentText, c.Score\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ViewCount BETWEEN 100 AND 150\nORDER BY c.Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "708": "SELECT \n    u.CreationDate,\n    u.Age\nFROM \n    comments c\nJOIN \n    users u ON c.UserId = u.Id\nWHERE \n    u.WebsiteUrl IS NOT NULL;\t----- bird -----\tcodebase_community",
    "709": "SELECT COUNT(DISTINCT p.Id) AS PostCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.Score = 0\n  AND p.ViewCount < 5;\t----- bird -----\tcodebase_community",
    "710": "SELECT COUNT(*) AS ZeroScoreComments\nFROM comments c\nWHERE c.Score = 0\n  AND c.PostId IN (\n    SELECT PostId\n    FROM comments\n    GROUP BY PostId\n    HAVING COUNT(*) = 1\n);\t----- bird -----\tcodebase_community",
    "711": "SELECT COUNT(DISTINCT u.Id) AS TotalUsersAge40\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score = 0 AND u.Age = 40;\t----- bird -----\tcodebase_community",
    "712": "SELECT \n    p.Id AS PostId,\n    c.Text AS CommentText\nFROM \n    posts p\nJOIN \n    comments c ON p.Id = c.PostId\nWHERE \n    p.Title = 'Group differences on a five point Likert item';\t----- bird -----\tcodebase_community",
    "713": "SELECT UserId\n   FROM comments\n   WHERE Text = 'R is also lazy evaluated.';\t----- bird -----\tcodebase_community",
    "714": "SELECT c.*\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky';\t----- bird -----\tcodebase_community",
    "715": "SELECT DISTINCT c.UserDisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score BETWEEN 1 AND 5\n  AND u.DownVotes = 0;\t----- bird -----\tcodebase_community",
    "716": "SELECT \n    100.0 * COUNT(CASE WHEN u.UpVotes = 0 THEN 1 END) / COUNT(DISTINCT c.UserId) AS PercentageZeroUpVotes\nFROM \n    comments c\nJOIN \n    users u ON c.UserId = u.Id\nWHERE \n    c.Score BETWEEN 5 AND 10;\t----- bird -----\tcodebase_community",
    "717": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
    "718": "SELECT COUNT(DISTINCT hp.hero_id) AS num_superheroes_with_super_strength\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength';\t----- bird -----\tsuperhero",
    "719": "SELECT COUNT(*) AS num_superheroes\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE p.power_name = 'Super Strength'\n  AND s.height_cm > 200;\t----- bird -----\tsuperhero",
    "720": "SELECT s.full_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.id\nHAVING COUNT(hp.power_id) > 15;\t----- bird -----\tsuperhero",
    "721": "SELECT COUNT(*) AS blue_eyed_superheroes\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE colour.colour = 'blue';\t----- bird -----\tsuperhero",
    "722": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE s.superhero_name = 'Apocalypse';\t----- bird -----\tsuperhero",
    "723": "SELECT COUNT(DISTINCT s.id) AS num_superheroes\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE c.colour = 'blue'\n  AND p.power_name = 'Agility';\t----- bird -----\tsuperhero",
    "724": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour eye_colour ON s.eye_colour_id = eye_colour.id\nJOIN colour hair_colour ON s.hair_colour_id = hair_colour.id\nWHERE eye_colour.colour = 'blue'\n  AND hair_colour.colour = 'blond';\t----- bird -----\tsuperhero",
    "725": "SELECT COUNT(*) AS marvel_superhero_count\nFROM superhero\nWHERE publisher_id = (\n    SELECT id\n    FROM publisher\n    WHERE publisher_name = 'Marvel Comics'\n);\t----- bird -----\tsuperhero",
    "726": "SELECT \n    s.superhero_name,\n    s.height_cm\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    p.publisher_name = 'Marvel Comics'\nORDER BY \n    s.height_cm DESC;\t----- bird -----\tsuperhero",
    "727": "SELECT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Sauron';\t----- bird -----\tsuperhero",
    "728": "SELECT c.colour AS eye_color, COUNT(*) AS count\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.publisher_id = (\n    SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'\n)\nGROUP BY c.colour\nORDER BY count DESC;\t----- bird -----\tsuperhero",
    "729": "SELECT AVG(height_cm) AS average_height\nFROM superhero\nWHERE publisher_id = (\n    SELECT id\n    FROM publisher\n    WHERE publisher_name = 'Marvel Comics'\n);\t----- bird -----\tsuperhero",
    "730": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE p.publisher_name = 'Marvel Comics'\n  AND sp.power_name = 'Super Strength';\t----- bird -----\tsuperhero",
    "731": "SELECT COUNT(*) AS dc_superhero_count\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'DC Comics';\t----- bird -----\tsuperhero",
    "732": "SELECT id FROM attribute WHERE attribute_name = 'speed';\t----- bird -----\tsuperhero",
    "733": "SELECT COUNT(*) AS gold_eyed_marvel_superheroes\nFROM superhero\nJOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE eye_colour.colour = 'gold'\n  AND publisher.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "734": "SELECT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Blue Beetle II';\t----- bird -----\tsuperhero",
    "735": "SELECT COUNT(*) AS blonde_superheroes_count\nFROM superhero\nWHERE hair_colour_id = (\n    SELECT id\n    FROM colour\n    WHERE colour = 'blonde'\n);\t----- bird -----\tsuperhero",
    "736": "SELECT \n    s.superhero_name,\n    a.attribute_name,\n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    a.attribute_name = 'intelligence'\nORDER BY \n    ha.attribute_value ASC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "737": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.superhero_name = 'Copycat';\t----- bird -----\tsuperhero",
    "738": "SELECT s.superhero_name, ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;\t----- bird -----\tsuperhero",
    "739": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE p.power_name = 'death touch';\t----- bird -----\tsuperhero",
    "740": "SELECT COUNT(*) AS female_strength_100_count\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE g.gender = 'female'\n  AND a.attribute_name = 'strength'\n  AND ha.attribute_value = 100;\t----- bird -----\tsuperhero",
    "741": "SELECT s.superhero_name, COUNT(hp.power_id) AS power_count\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.id\nORDER BY power_count DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "742": "SELECT id FROM race WHERE race = 'vampire';\t----- bird -----\tsuperhero",
    "743": "SELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero) AS percentage,\n    (SELECT COUNT(*) \n     FROM superhero s\n     JOIN publisher p ON s.publisher_id = p.id\n     WHERE s.alignment_id IN (\n         SELECT id FROM alignment \n         WHERE alignment IN ('self-interest', 'lawful neutral', 'neutral', 'chaotic neutral', 'neutral good', 'chaotic good')\n     ) AND p.publisher_name = 'Marvel Comics') AS marvel_count\nFROM superhero;\t----- bird -----\tsuperhero",
    "744": "SELECT \n    (SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC') AS dc_count,\n    (SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel') AS marvel_count,\n    ABS(\n        (SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC') \n        - \n        (SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel')\n    ) AS difference;\t----- bird -----\tsuperhero",
    "745": "SELECT id\nFROM publisher\nWHERE publisher_name = 'Star Trek';\t----- bird -----\tsuperhero",
    "746": "SELECT AVG(attribute_value) AS average_attribute_value\nFROM hero_attribute;\t----- bird -----\tsuperhero",
    "747": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM superhero\nWHERE full_name IS NULL;\t----- bird -----\tsuperhero",
    "748": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.id = 75;\t----- bird -----\tsuperhero",
    "749": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = 'Deathlok';\t----- bird -----\tsuperhero",
    "750": "SELECT AVG(s.weight_kg) AS average_weight\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Female';\t----- bird -----\tsuperhero",
    "751": "SELECT DISTINCT sp.power_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE g.gender = 'Male'\nLIMIT 5;\t----- bird -----\tsuperhero",
    "752": "SELECT s.superhero_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race != 'Human';\t----- bird -----\tsuperhero",
    "753": "SELECT superhero_name\nFROM superhero\nWHERE height_cm BETWEEN 170 AND 190\n  AND eye_colour_id IS NULL;\t----- bird -----\tsuperhero",
    "754": "SELECT sp.power_name\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 56;\t----- bird -----\tsuperhero",
    "755": "SELECT s.full_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Demi-God'\nLIMIT 5;\t----- bird -----\tsuperhero",
    "756": "SELECT COUNT(*) AS bad_superhero_count\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE alignment.alignment = 'bad';\t----- bird -----\tsuperhero",
    "757": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.weight_kg = 169;\t----- bird -----\tsuperhero",
    "758": "SELECT c.colour AS hair_colour\nFROM superhero s\nJOIN colour c ON s.hair_colour_id = c.id\nJOIN race r ON s.race_id = r.id\nWHERE s.height_cm = 185\n  AND r.race = 'Human';\t----- bird -----\tsuperhero",
    "759": "SELECT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);\t----- bird -----\tsuperhero",
    "760": "SELECT \n    ROUND(\n        100.0 * \n        (SELECT COUNT(*) \n         FROM superhero \n         WHERE height_cm BETWEEN 150 AND 180 \n           AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) \n        / \n        (SELECT COUNT(*) \n         FROM superhero \n         WHERE height_cm BETWEEN 150 AND 180), \n        2\n    ) AS percentage_marvel_heroes;\t----- bird -----\tsuperhero",
    "761": "WITH all_weights AS (\n    SELECT weight_kg\n    FROM superhero\n    WHERE weight_kg IS NOT NULL\n),\nsorted_weights AS (\n    SELECT weight_kg,\n           ROW_NUMBER() OVER (ORDER BY weight_kg) AS r,\n           COUNT(*) OVER () AS total\n    FROM all_weights\n),\npercentile_79 AS (\n    SELECT weight_kg AS weight_79\n    FROM sorted_weights\n    WHERE r = (SELECT CEIL(0.79 * total) FROM sorted_weights LIMIT 1)\n    LIMIT 1\n)\nSELECT s.superhero_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN percentile_79 p ON s.weight_kg > p.weight_79\nWHERE g.gender = 'Male';\t----- bird -----\tsuperhero",
    "762": "SELECT sp.power_name, COUNT(hp.hero_id) AS power_count\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "763": "SELECT ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE s.superhero_name = 'Abomination';\t----- bird -----\tsuperhero",
    "764": "SELECT sp.power_name\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 1;\t----- bird -----\tsuperhero",
    "765": "SELECT COUNT(*) AS stealth_hero_count\nFROM hero_power\nWHERE power_id = (\n    SELECT id\n    FROM superpower\n    WHERE power_name = 'stealth'\n);\t----- bird -----\tsuperhero",
    "766": "SELECT s.full_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'strength'\n  AND ha.attribute_value = (\n    SELECT MAX(ha2.attribute_value)\n    FROM hero_attribute ha2\n    JOIN attribute a2 ON ha2.attribute_id = a2.id\n    WHERE a2.attribute_name = 'strength'\n  );\t----- bird -----\tsuperhero",
    "767": "SELECT \n    1.0 * COUNT(CASE WHEN skin_colour_id IS NULL THEN 1 END) / COUNT(*) AS avg_no_skin_colour\nFROM superhero;\t----- bird -----\tsuperhero",
    "768": "SELECT COUNT(*) AS num_superheroes\nFROM superhero\nWHERE publisher_id = (\n    SELECT id\n    FROM publisher\n    WHERE publisher_name = 'Dark Horse Comics'\n);\t----- bird -----\tsuperhero",
    "769": "SELECT \n    s.superhero_name,\n    a.attribute_name,\n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nJOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    a.attribute_name = 'Durability'\n    AND p.publisher_name = 'Dark Horse Comics'\nORDER BY \n    ha.attribute_value DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "770": "SELECT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.superhero_name = 'Abraham Sapien';\t----- bird -----\tsuperhero",
    "771": "SELECT DISTINCT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE p.power_name = 'flight';\t----- bird -----\tsuperhero",
    "772": "SELECT \n    c_eye.colour AS eye_colour,\n    c_hair.colour AS hair_colour,\n    c_skin.colour AS skin_colour\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nJOIN colour AS c_eye ON superhero.eye_colour_id = c_eye.id\nJOIN colour AS c_hair ON superhero.hair_colour_id = c_hair.id\nJOIN colour AS c_skin ON superhero.skin_colour_id = c_skin.id\nWHERE gender.gender = 'Female'\n  AND publisher.publisher_name = 'Dark Horse Comics';\t----- bird -----\tsuperhero",
    "773": "SELECT \n    s.superhero_name,\n    p.publisher_name\nFROM superhero s\nJOIN colour e ON s.eye_colour_id = e.id\nJOIN colour h ON s.hair_colour_id = h.id\nJOIN colour sk ON s.skin_colour_id = sk.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE e.colour = h.colour AND h.colour = sk.colour;\t----- bird -----\tsuperhero",
    "774": "SELECT p.publisher_name AS group_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'A-Bomb';\t----- bird -----\tsuperhero",
    "775": "SELECT \n    (COUNT(CASE WHEN c.colour = 'blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_females\nFROM \n    superhero s\nJOIN \n    gender g ON s.gender_id = g.id\nJOIN \n    colour c ON s.eye_colour_id = c.id\nWHERE \n    g.gender = 'female';\t----- bird -----\tsuperhero",
    "776": "SELECT \n    s.superhero_name,\n    r.race\nFROM \n    superhero s\nJOIN \n    race r ON s.race_id = r.id\nWHERE \n    s.full_name = 'Charles Chandler';\t----- bird -----\tsuperhero",
    "777": "SELECT g.gender\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE s.superhero_name = 'Agent 13';\t----- bird -----\tsuperhero",
    "778": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE p.power_name = 'adaptation';\t----- bird -----\tsuperhero",
    "779": "SELECT COUNT(*) AS power_count\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nWHERE s.superhero_name = 'Amazo';\t----- bird -----\tsuperhero",
    "780": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = 'Hunter Zolomon';\t----- bird -----\tsuperhero",
    "781": "SELECT s.height_cm\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE c.colour = 'amber';\t----- bird -----\tsuperhero",
    "782": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour e ON s.eye_colour_id = e.id\nJOIN colour h ON s.hair_colour_id = h.id\nWHERE e.colour = 'black' AND h.colour = 'black';\t----- bird -----\tsuperhero",
    "783": "SELECT c.eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.skin_colour_id = (\n    SELECT id\n    FROM colour\n    WHERE colour = 'gold'\n);\t----- bird -----\tsuperhero",
    "784": "SELECT s.full_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'vampire';\t----- bird -----\tsuperhero",
    "785": "SELECT s.superhero_name\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nWHERE a.alignment = 'neutral';\t----- bird -----\tsuperhero",
    "786": "SELECT id FROM attribute WHERE attribute_name = 'strength';\t----- bird -----\tsuperhero",
    "787": "SELECT \n    r.race AS race,\n    a.alignment AS alignment\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE s.superhero_name = 'Cameron Hicks';\t----- bird -----\tsuperhero",
    "788": "SELECT \n    100.0 * COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) / COUNT(*) AS percentage_marvel_female\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nLEFT JOIN publisher p ON s.publisher_id = p.id\nWHERE g.gender = 'Female';\t----- bird -----\tsuperhero",
    "789": "SELECT AVG(s.weight_kg) AS average_weight\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Alien';\t----- bird -----\tsuperhero",
    "790": "SELECT \n    (SELECT weight_kg FROM superhero WHERE superhero_name = 'Emil Blonsky') \n    - \n    (SELECT weight_kg FROM superhero WHERE superhero_name = 'Charles Chandler') AS weight_difference;\t----- bird -----\tsuperhero",
    "791": "SELECT AVG(height_cm) AS average_height\nFROM superhero;\t----- bird -----\tsuperhero",
    "792": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = 'Abomination';\t----- bird -----\tsuperhero",
    "793": "SELECT COUNT(*) AS male_god_superheroes\nFROM superhero\nWHERE race_id = (\n    SELECT id\n    FROM race\n    WHERE race = 'god/eternal'\n)\nAND gender_id = (\n    SELECT id\n    FROM gender\n    WHERE gender = 'male'\n);\t----- bird -----\tsuperhero",
    "794": "SELECT \n    s.superhero_name,\n    ha.attribute_value AS speed\nFROM \n    hero_attribute ha\nJOIN \n    superhero s ON ha.hero_id = s.id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    a.attribute_name = 'speed'\nORDER BY \n    ha.attribute_value DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "795": "SELECT COUNT(*) AS neutral_superhero_count\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE alignment.alignment = 'neutral';\t----- bird -----\tsuperhero",
    "796": "SELECT \n    a.attribute_name,\n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    s.superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
    "797": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour eye ON s.eye_colour_id = eye.id\nJOIN colour hair ON s.hair_colour_id = hair.id\nWHERE eye.colour = 'blue'\n  AND hair.colour = 'brown';\t----- bird -----\tsuperhero",
    "798": "SELECT \n    s.superhero_name,\n    p.publisher_name\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');\t----- bird -----\tsuperhero",
    "799": "SELECT COUNT(*) AS superheroes_without_publisher\nFROM superhero\nWHERE publisher_id IS NULL;\t----- bird -----\tsuperhero",
    "800": "SELECT \n    (COUNT(CASE WHEN c.colour = 'blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_eyes\nFROM superhero s\nLEFT JOIN colour c ON s.eye_colour_id = c.id;\t----- bird -----\tsuperhero",
    "801": "SELECT\n    (SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male') * 1.0 /\n    (SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female') AS male_to_female_ratio;\t----- bird -----\tsuperhero",
    "802": "SELECT superhero_name, height_cm\nFROM superhero\nWHERE height_cm = (\n    SELECT MAX(height_cm)\n    FROM superhero\n);\t----- bird -----\tsuperhero",
    "803": "SELECT id\nFROM superpower\nWHERE power_name = 'cryokinesis';\t----- bird -----\tsuperhero",
    "804": "SELECT superhero_name\nFROM superhero\nWHERE id = 294;\t----- bird -----\tsuperhero",
    "805": "SELECT full_name\nFROM superhero\nWHERE weight_kg IS NULL;\t----- bird -----\tsuperhero",
    "806": "SELECT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.full_name = 'Karen Beecher-Duncan';\t----- bird -----\tsuperhero",
    "807": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.full_name = 'Helen Parr';\t----- bird -----\tsuperhero",
    "808": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.weight_kg = 108 AND s.height_cm = 188;\t----- bird -----\tsuperhero",
    "809": "SELECT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.id = 38;\t----- bird -----\tsuperhero",
    "810": "SELECT r.race\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nJOIN race r ON s.race_id = r.id\nWHERE ha.attribute_value = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute\n);\t----- bird -----\tsuperhero",
    "811": "SELECT \n    a.alignment,\n    p.power_name\nFROM \n    superhero s\nJOIN \n    alignment a ON s.alignment_id = a.id\nJOIN \n    hero_power hp ON s.id = hp.hero_id\nJOIN \n    superpower p ON hp.power_id = p.id\nWHERE \n    s.superhero_name = 'Atom IV';\t----- bird -----\tsuperhero",
    "812": "SELECT s.full_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE c.colour = 'blue'\nLIMIT 5;\t----- bird -----\tsuperhero",
    "813": "SELECT AVG(ha.attribute_value) AS average_attribute_value\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE a.alignment = 'neutral';\t----- bird -----\tsuperhero",
    "814": "SELECT c.colour AS skin_colour\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE ha.attribute_value = 100;\t----- bird -----\tsuperhero",
    "815": "SELECT COUNT(*) AS good_female_superheroes_count\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE g.gender = 'Female' AND a.alignment = 'good';\t----- bird -----\tsuperhero",
    "816": "SELECT DISTINCT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_value BETWEEN 75 AND 80;\t----- bird -----\tsuperhero",
    "817": "SELECT r.race\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN colour c ON s.hair_colour_id = c.id\nJOIN race r ON s.race_id = r.id\nWHERE g.gender = 'male' AND c.colour = 'blue';\t----- bird -----\tsuperhero",
    "818": "SELECT \n    100.0 * COUNT(CASE WHEN g.gender = 'female' THEN 1 END) / COUNT(*) AS percentage_female_bad\nFROM \n    superhero s\nJOIN \n    alignment a ON s.alignment_id = a.id\nLEFT JOIN \n    gender g ON s.gender_id = g.id\nWHERE \n    a.alignment = 'bad';\t----- bird -----\tsuperhero",
    "819": "SELECT\n    (SELECT COUNT(*) FROM superhero\n     WHERE weight_kg IS NULL\n       AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')) AS blue_eyes_count,\n    (SELECT COUNT(*) FROM superhero\n     WHERE weight_kg IS NULL\n       AND eye_colour_id IS NULL) AS no_eye_color_count,\n    (SELECT COUNT(*) FROM superhero\n     WHERE weight_kg IS NULL\n       AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')) -\n    (SELECT COUNT(*) FROM superhero\n     WHERE weight_kg IS NULL\n       AND eye_colour_id IS NULL) AS difference;\t----- bird -----\tsuperhero",
    "820": "SELECT id FROM superhero WHERE superhero_name = 'Hulk';\t----- bird -----\tsuperhero",
    "821": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = 'Ajax';\t----- bird -----\tsuperhero",
    "822": "SELECT COUNT(*) AS green_skinned_villains_count\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nJOIN colour ON superhero.skin_colour_id = colour.id\nWHERE alignment.alignment = 'villain'\n  AND colour.colour = 'green';\t----- bird -----\tsuperhero",
    "823": "SELECT COUNT(*) AS female_marvel_superheroes\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE gender.gender = 'female'\n  AND publisher.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "824": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE p.power_name LIKE '%wind%'\nORDER BY s.superhero_name ASC;\t----- bird -----\tsuperhero",
    "825": "SELECT g.gender\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON s.gender_id = g.id\nWHERE sp.power_name = 'Phoenix Force';\t----- bird -----\tsuperhero",
    "826": "SELECT \n    superhero_name,\n    full_name,\n    weight_kg\nFROM \n    superhero\nWHERE \n    publisher_id = (\n        SELECT id \n        FROM publisher \n        WHERE publisher_name = 'DC Comics'\n    )\nORDER BY \n    weight_kg DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "827": "SELECT AVG(s.height_cm) AS average_height\nFROM superhero s\nWHERE s.publisher_id = (\n    SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics'\n)\nAND s.race_id = (\n    SELECT id FROM race WHERE race != 'Human'\n);\t----- bird -----\tsuperhero",
    "828": "SELECT COUNT(*) AS fastest_superhero_count\nFROM hero_attribute ha\nWHERE ha.attribute_id = (\n    SELECT id\n    FROM attribute\n    WHERE attribute_name = 'Speed'\n)\nAND ha.attribute_value = (\n    SELECT MAX(ha2.attribute_value)\n    FROM hero_attribute ha2\n    WHERE ha2.attribute_id = (\n        SELECT id\n        FROM attribute\n        WHERE attribute_name = 'Speed'\n    )\n);\t----- bird -----\tsuperhero",
    "829": "SELECT \n    (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC')) AS dc_count,\n    (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS marvel_count,\n    ABS(\n        (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC')) \n        - \n        (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))\n    ) AS difference;\t----- bird -----\tsuperhero",
    "830": "SELECT \n    a.attribute_name,\n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    s.superhero_name = 'Black Panther'\nORDER BY \n    ha.attribute_value ASC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "831": "SELECT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.superhero_name = 'Abomination';\t----- bird -----\tsuperhero",
    "832": "SELECT superhero_name, height_cm\nFROM superhero\nORDER BY height_cm DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "833": "SELECT superhero_name\nFROM superhero\nWHERE full_name = 'Charles Chandler';\t----- bird -----\tsuperhero",
    "834": "SELECT \n    100.0 * COUNT(CASE WHEN g.gender = 'Female' THEN 1 END) / COUNT(*) AS percentage_female\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nLEFT JOIN \n    gender g ON s.gender_id = g.id\nWHERE \n    p.publisher_name = 'George Lucas';\t----- bird -----\tsuperhero",
    "835": "SELECT \n    ROUND(\n        100.0 * COUNT(CASE WHEN a.alignment = 'good' THEN 1 END) / COUNT(*), \n        2\n    ) AS percentage_good_superheroes\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE p.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "836": "SELECT COUNT(*) AS total_john_superheroes\nFROM superhero\nWHERE superhero_name LIKE 'John%';\t----- bird -----\tsuperhero",
    "837": "SELECT hero_id\nFROM hero_attribute\nWHERE attribute_value = (\n    SELECT MIN(attribute_value)\n    FROM hero_attribute\n);\t----- bird -----\tsuperhero",
    "838": "SELECT full_name\nFROM superhero\nWHERE superhero_name = 'Alien';\t----- bird -----\tsuperhero",
    "839": "SELECT s.full_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE c.colour = 'brown'\n  AND s.weight_kg < 100;\t----- bird -----\tsuperhero",
    "840": "SELECT \n    a.attribute_name,\n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    s.superhero_name = 'Aquababy';\t----- bird -----\tsuperhero",
    "841": "SELECT \n    s.weight_kg,\n    r.race\nFROM \n    superhero s\nJOIN \n    race r ON s.race_id = r.id\nWHERE \n    s.id = 40;\t----- bird -----\tsuperhero",
    "842": "SELECT AVG(s.height_cm) AS average_height\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nWHERE a.alignment = 'neutral';\t----- bird -----\tsuperhero",
    "843": "SELECT hp.hero_id\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'intelligence';\t----- bird -----\tsuperhero",
    "844": "SELECT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.superhero_name = 'Blackwulf';\t----- bird -----\tsuperhero",
    "845": "SELECT AVG(height_cm) FROM superhero;\t----- bird -----\tsuperhero",
    "846": "SELECT d.driverRef\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN status s ON r.statusId = s.statusId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.round = 20\n  AND s.status IN ('Retired', 'Eliminated');\t----- bird -----\tformula_1",
    "847": "SELECT d.surname\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 19\n  AND q.q2 IS NOT NULL\n  AND q.q2 = (\n    SELECT MIN(q2)\n    FROM qualifying\n    WHERE raceId = 19\n      AND q2 IS NOT NULL\n  );\t----- bird -----\tformula_1",
    "848": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Shanghai';\t----- bird -----\tformula_1",
    "849": "SELECT r.url\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Circuit de Barcelona-Catalunya';\t----- bird -----\tformula_1",
    "850": "SELECT r.name AS raceName\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Germany';\t----- bird -----\tformula_1",
    "851": "SELECT \n    r.position,\n    r.positionText,\n    r.positionOrder,\n    c.name AS circuitName\nFROM \n    results r\nJOIN \n    races ra ON r.raceId = ra.raceId\nJOIN \n    constructors con ON r.constructorId = con.constructorId\nJOIN \n    circuits c ON ra.circuitId = c.circuitId\nWHERE \n    con.name = 'Renault';\t----- bird -----\tformula_1",
    "852": "SELECT COUNT(*) AS races_outside_asia_europe\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2010\n  AND c.country NOT IN ('China', 'Japan', 'Malaysia', 'Singapore', 'South Korea', 'United Arab Emirates', 'Australia', 'Thailand', 'India', 'Indonesia', 'Vietnam', 'Qatar', 'France', 'Germany', 'Italy', 'Spain', 'United Kingdom', 'Belgium', 'Netherlands', 'Portugal', 'Monaco', 'Switzerland', 'Austria', 'Hungary', 'Turkey', 'Russia', 'Sweden', 'Denmark', 'Norway', 'Finland', 'Ireland', 'Poland', 'Czech Republic', 'Greece', 'Ukraine', 'Romania', 'Bulgaria', 'Croatia', 'Slovakia', 'Slovenia', 'Iceland', 'Albania', 'Bosnia and Herzegovina', 'Serbia', 'Montenegro', 'North Macedonia', 'Croatia', 'Moldova', 'Georgia', 'Armenia', 'Azerbaijan', 'Uzbekistan', 'Kazakhstan', 'Kyrgyzstan', 'Tajikistan', 'Turkmenistan');\t----- bird -----\tformula_1",
    "853": "SELECT r.name AS raceName\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Spain';\t----- bird -----\tformula_1",
    "854": "SELECT c.lat, c.lng\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "855": "SELECT r.*\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Sepang International Circuit';\t----- bird -----\tformula_1",
    "856": "SELECT r.time\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Sepang International Circuit';\t----- bird -----\tformula_1",
    "857": "SELECT c.lat, c.lng\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'Abu Dhabi Grand Prix';\t----- bird -----\tformula_1",
    "858": "SELECT c.nationality AS country\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = (\n    SELECT raceId\n    FROM races\n    WHERE round = 24\n)\nAND cr.points = 1;\t----- bird -----\tformula_1",
    "859": "SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna';\t----- bird -----\tformula_1",
    "860": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 355 AND q.q2 = '0:01:40';\t----- bird -----\tformula_1",
    "861": "SELECT d.number\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 903 AND q.q3 = '0:01:54';\t----- bird -----\tformula_1",
    "862": "SELECT raceId\nFROM races\nWHERE year = 2007 AND name = 'Bahrain Grand Prix';\t----- bird -----\tformula_1",
    "863": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;\t----- bird -----\tformula_1",
    "864": "SELECT COUNT(*) AS driversFinished\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE date = '2015-11-29'\n)\n  AND position IS NOT NULL\n  AND position != 0;\t----- bird -----\tformula_1",
    "865": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 592\n  AND r.position IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "866": "SELECT d.driverId, d.forename, d.surname, d.url\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.raceId = 161 AND l.time = '0:01:27';\t----- bird -----\tformula_1",
    "867": "SELECT d.nationality\nFROM drivers d\nWHERE d.driverId = (\n    SELECT l.driverId\n    FROM lapTimes l\n    WHERE l.raceId = 933\n    ORDER BY l.fastestLapSpeed\n    LIMIT 1\n);\t----- bird -----\tformula_1",
    "868": "SELECT \n    c.name AS circuitName,\n    c.location,\n    c.lat,\n    c.lng\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.name = 'Malaysian Grand Prix';\t----- bird -----\tformula_1",
    "869": "SELECT c.url\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 9\nORDER BY cr.points DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "870": "SELECT q.q1\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 345\n  AND d.forename = 'Lucas'\n  AND d.surname = 'di Grassi';\t----- bird -----\tformula_1",
    "871": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 347 AND q.q2 = '0:01:15';\t----- bird -----\tformula_1",
    "872": "SELECT d.code\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 45 AND q.q3 = '0:01:33';\t----- bird -----\tformula_1",
    "873": "SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren';\t----- bird -----\tformula_1",
    "874": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2006\n  AND ra.name = 'San Marino Grand Prix'\n  AND r.positionOrder = 2;\t----- bird -----\tformula_1",
    "875": "SELECT s.year, s.url\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;\t----- bird -----\tformula_1",
    "876": "SELECT COUNT(*) AS driversNotFinished\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE date = '2015-11-29'\n)\nAND statusId IN (\n    SELECT statusId\n    FROM status\n    WHERE status IN ('Retired', 'Accident', 'Engine', 'Clutch', 'Transmission', 'Gearbox', 'Hydraulics', 'Electrical', 'Fire', 'Collision', 'Suspension', 'Brakes', 'Tyre')\n);\t----- bird -----\tformula_1",
    "877": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 872\n  AND r.position IS NOT NULL\nORDER BY d.dob DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "878": "SELECT d.forename || ' ' || d.surname AS fullName\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.raceId = 348\nORDER BY l.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "879": "SELECT raceId, driverId, MAX(milliseconds) AS fastestLapSpeed\nFROM lapTimes\nGROUP BY raceId, driverId\nORDER BY fastestLapSpeed DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "880": "WITH driver_info AS (\n    SELECT driverId\n    FROM drivers\n    WHERE forename = 'Paul' AND surname = 'di Resta'\n),\n\n-- Step 2: Get fastest lap speed in race 853\nrace_853_speed AS (\n    SELECT r.fastestLapSpeed\n    FROM results r\n    JOIN driver_info d ON r.driverId = d.driverId\n    WHERE r.raceId = 853\n),\n\n-- Step 3: Get the next race after 853\nnext_race_id AS (\n    SELECT MIN(raceId) AS raceId\n    FROM races\n    WHERE raceId > 853\n),\n\n-- Step 4: Get fastest lap speed in the next race\nnext_race_speed AS (\n    SELECT r.fastestLapSpeed\n    FROM results r\n    JOIN driver_info d ON r.driverId = d.driverId\n    JOIN next_race_id n ON r.raceId = n.raceId\n)\n\n-- Step 5: Calculate percentage difference\nSELECT \n    (1.0 - (CAST(nr.fastestLapSpeed AS REAL) / CAST(r853.fastestLapSpeed AS REAL))) * 100 AS percent_faster\nFROM \n    race_853_speed r853,\n    next_race_speed nr;\t----- bird -----\tformula_1",
    "881": "SELECT\n    COUNT(CASE WHEN r.position IS NOT NULL AND r.time IS NOT NULL THEN 1 END) * 1.0 / COUNT(*) AS completion_rate\nFROM\n    results r\nWHERE\n    r.raceId = (\n        SELECT raceId\n        FROM races\n        WHERE date = '1983-07-16'\n    );\t----- bird -----\tformula_1",
    "882": "SELECT MIN(year) AS first_singapore_gp\nFROM races\nWHERE name = 'Singapore';\t----- bird -----\tformula_1",
    "883": "SELECT \n    COUNT(*) AS total_races_2005,\n    name\nFROM \n    races\nWHERE \n    year = 2005\nORDER BY \n    name DESC;\t----- bird -----\tformula_1",
    "884": "SELECT name\nFROM races\nWHERE strftime('%Y-%m', date) = (\n    SELECT strftime('%Y-%m', MIN(date))\n    FROM races\n);\t----- bird -----\tformula_1",
    "885": "SELECT name, date\nFROM races\nWHERE year = 1999\nORDER BY round DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "886": "SELECT year, COUNT(*) AS num_races\nFROM races\nGROUP BY year\nORDER BY num_races DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "887": "SELECT r2017.name\nFROM races r2017\nWHERE r2017.year = 2017\n  AND r2017.name NOT IN (\n    SELECT r2000.name\n    FROM races r2000\n    WHERE r2000.year = 2000\n  );\t----- bird -----\tformula_1",
    "888": "SELECT \n    c.name AS circuitName,\n    c.location AS circuitLocation,\n    c.country AS circuitCountry\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.name = 'European Grand Prix'\nORDER BY \n    r.year ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "889": "SELECT circuitId FROM circuits WHERE name = 'Brands Hatch';\t----- bird -----\tformula_1",
    "890": "SELECT COUNT(DISTINCT r.year) AS seasons_hosted\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone';\t----- bird -----\tformula_1",
    "891": "SELECT \n    d.forename,\n    d.surname,\n    r.position,\n    r.positionText,\n    r.points\nFROM \n    results r\nJOIN \n    drivers d ON r.driverId = d.driverId\nWHERE \n    r.raceId = (\n        SELECT raceId\n        FROM races\n        WHERE year = 2010 AND name = 'Singapore Grand Prix'\n    )\nORDER BY \n    r.position;\t----- bird -----\tformula_1",
    "892": "SELECT \n    d.driverId,\n    d.forename || ' ' || d.surname AS fullName,\n    SUM(ds.points) AS totalPoints\nFROM \n    driverStandings ds\nJOIN \n    drivers d ON ds.driverId = d.driverId\nGROUP BY \n    d.driverId, d.forename, d.surname\nORDER BY \n    totalPoints DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "893": "SELECT \n    d.driverId,\n    d.forename || ' ' || d.surname AS driverName,\n    r.points\nFROM \n    results r\nJOIN \n    drivers d ON r.driverId = d.driverId\nWHERE \n    r.raceId = (\n        SELECT raceId \n        FROM races \n        WHERE year = 2017 AND name = 'Chinese Grand Prix'\n    )\nORDER BY \n    r.points DESC\nLIMIT 3;\t----- bird -----\tformula_1",
    "894": "SELECT \n    l.milliseconds,\n    d.forename || ' ' || d.surname AS driverName,\n    r.name AS raceName\nFROM \n    lapTimes l\nJOIN \n    drivers d ON l.driverId = d.driverId\nJOIN \n    races r ON l.raceId = r.raceId\nWHERE \n    l.milliseconds = (\n        SELECT MIN(milliseconds)\n        FROM lapTimes\n        WHERE milliseconds IS NOT NULL\n    );\t----- bird -----\tformula_1",
    "895": "SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';\t----- bird -----\tformula_1",
    "896": "SELECT \n    100.0 * COUNT(CASE WHEN r.position != 1 THEN 1 END) / COUNT(*) AS percentage_not_first\nFROM (\n    SELECT \n        r.year,\n        r.raceId,\n        d.driverId\n    FROM races r\n    JOIN drivers d ON d.driverRef = 'hamilton'\n    WHERE r.year >= 2010\n      AND r.round = 1\n) first_races\nJOIN results r ON r.raceId = first_races.raceId AND r.driverId = first_races.driverId;\t----- bird -----\tformula_1",
    "897": "SELECT \n    d.driverId,\n    d.forename || ' ' || d.surname AS driverName,\n    d.nationality,\n    MAX(ds.points) AS maxPoints,\n    COUNT(CASE WHEN ds.position = 1 THEN 1 END) AS totalWins\nFROM \n    drivers d\nJOIN \n    driverStandings ds ON d.driverId = ds.driverId\nGROUP BY \n    d.driverId\nORDER BY \n    totalWins DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "898": "SELECT \n    forename || ' ' || surname AS name,\n    dob,\n    strftime('%Y', 'now') - strftime('%Y', dob) AS age\nFROM \n    drivers\nWHERE \n    nationality = 'Japanese'\nORDER BY \n    dob ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "899": "SELECT \n    c.circuitId,\n    c.name AS circuitName,\n    c.location,\n    c.country,\n    COUNT(r.raceId) AS raceCount\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.year BETWEEN 1990 AND 2000\nGROUP BY \n    c.circuitId\nHAVING \n    COUNT(r.raceId) >= 4;\t----- bird -----\tformula_1",
    "900": "SELECT \n    c.name AS circuitName,\n    c.location AS circuitLocation,\n    r.name AS raceName\nFROM \n    circuits c\nJOIN \n    races r ON c.circuitId = r.circuitId\nWHERE \n    c.country = 'USA'\n    AND r.year = 2006;\t----- bird -----\tformula_1",
    "901": "SELECT \n    r.name AS raceName,\n    c.name AS circuitName,\n    c.location AS circuitLocation\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.year = 2005\n    AND r.date BETWEEN '2005-09-01' AND '2005-09-30';\t----- bird -----\tformula_1",
    "902": "SELECT r.raceId, r.year, r.round, r.name AS raceName, r.date\nFROM results res\nJOIN drivers d ON res.driverId = d.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.number < 20;\t----- bird -----\tformula_1",
    "903": "SELECT COUNT(*) AS wins\nFROM results\nWHERE driverId = (\n    SELECT driverId\n    FROM drivers\n    WHERE forename = 'Michael' AND surname = 'Schumacher'\n)\nAND raceId IN (\n    SELECT raceId\n    FROM races\n    WHERE circuitId = (\n        SELECT circuitId\n        FROM circuits\n        WHERE name = 'Sepang International Circuit'\n    )\n)\nAND position = 1;\t----- bird -----\tformula_1",
    "904": "SELECT r.name AS raceName, r.year\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nJOIN races r ON l.raceId = r.raceId\nWHERE d.forename = 'Michael' AND d.surname = 'Schumacher'\n  AND l.milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM lapTimes\n    WHERE driverId = d.driverId\n  )\nLIMIT 1;\t----- bird -----\tformula_1",
    "905": "SELECT \n    AVG(r.points) AS average_points\nFROM \n    results r\nJOIN \n    races ra ON r.raceId = ra.raceId\nJOIN \n    drivers d ON r.driverId = d.driverId\nWHERE \n    d.forename = 'Eddie' \n    AND d.surname = 'Irvine'\n    AND ra.year = 2000;\t----- bird -----\tformula_1",
    "906": "SELECT \n    r.raceId,\n    r.date AS raceDate,\n    r.name AS raceName,\n    res.points\nFROM \n    drivers d\nJOIN \n    results res ON d.driverId = res.driverId\nJOIN \n    races r ON res.raceId = r.raceId\nWHERE \n    d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY \n    r.date ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "907": "SELECT \n    races.name AS raceName,\n    races.date AS raceDate,\n    circuits.country AS hostingCountry\nFROM \n    races\nJOIN \n    circuits ON races.circuitId = circuits.circuitId\nWHERE \n    races.year = 2017\nORDER BY \n    races.date;\t----- bird -----\tformula_1",
    "908": "SELECT \n    r.name AS raceName,\n    r.year,\n    c.location AS circuitLocation,\n    MAX(res.laps) AS maxLaps\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nGROUP BY r.raceId\nORDER BY maxLaps DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "909": "SELECT\n    COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*) AS percentage_in_germany\nFROM\n    races r\nJOIN\n    circuits c ON r.circuitId = c.circuitId\nWHERE\n    r.name = 'European Grand Prix';\t----- bird -----\tformula_1",
    "910": "SELECT lat, lng\nFROM circuits\nWHERE name = 'Silverstone';\t----- bird -----\tformula_1",
    "911": "SELECT name, lat\nFROM circuits\nWHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')\nORDER BY lat DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "912": "SELECT circuitRef\nFROM circuits\nWHERE name = 'Marina Bay Street Circuit';\t----- bird -----\tformula_1",
    "913": "SELECT country\nFROM circuits\nORDER BY alt DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "914": "SELECT COUNT(*) AS driversWithoutCode\nFROM drivers\nWHERE code IS NULL OR code = '';\t----- bird -----\tformula_1",
    "915": "SELECT nationality\nFROM drivers\nWHERE dob = (\n    SELECT MIN(dob)\n    FROM drivers\n);\t----- bird -----\tformula_1",
    "916": "SELECT surname\nFROM drivers\nWHERE nationality = 'Italian';\t----- bird -----\tformula_1",
    "917": "SELECT url\nFROM drivers\nWHERE forename = 'Anthony' AND surname = 'Davidson';\t----- bird -----\tformula_1",
    "918": "SELECT driverRef\nFROM drivers\nWHERE forename = 'Lewis' AND surname = 'Hamilton';\t----- bird -----\tformula_1",
    "919": "SELECT c.name AS circuit_name\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';\t----- bird -----\tformula_1",
    "920": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone';\t----- bird -----\tformula_1",
    "921": "SELECT \n    r.raceId,\n    r.name AS raceName,\n    r.date AS raceDate,\n    r.year AS raceYear,\n    d.forename || ' ' || d.surname AS driverName,\n    c.name AS constructorName,\n    res.position,\n    res.points,\n    s.status\nFROM races r\nJOIN circuits cts ON r.circuitId = cts.circuitId\nJOIN results res ON r.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nJOIN constructors c ON res.constructorId = c.constructorId\nJOIN status s ON res.statusId = s.statusId\nWHERE cts.name = 'Silverstone'\nORDER BY r.year DESC, r.date DESC;\t----- bird -----\tformula_1",
    "922": "SELECT r.time\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Abu Dhabi' AND r.year = 2010;\t----- bird -----\tformula_1",
    "923": "SELECT COUNT(*) AS races_in_italy\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Italy';\t----- bird -----\tformula_1",
    "924": "SELECT r.date\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Barcelona-Catalunya';\t----- bird -----\tformula_1",
    "925": "SELECT c.url\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';\t----- bird -----\tformula_1",
    "926": "SELECT MIN(milliseconds) AS fastestLapTime\nFROM lapTimes\nWHERE driverId = (\n    SELECT driverId\n    FROM drivers\n    WHERE surname = 'Hamilton'\n);\t----- bird -----\tformula_1",
    "927": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.fastestLapSpeed = (\n    SELECT MAX(fastestLapSpeed)\n    FROM results\n    WHERE fastestLapSpeed IS NOT NULL\n);\t----- bird -----\tformula_1",
    "928": "SELECT d.driverRef\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2007\n  AND ra.name = 'Canadian Grand Prix'\n  AND r.positionOrder = 1;\t----- bird -----\tformula_1",
    "929": "SELECT DISTINCT r.raceId, r.year, r.round, r.name AS raceName, r.date\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "930": "SELECT \n    r.raceId,\n    r.year,\n    r.name AS raceName,\n    r.date,\n    res.position,\n    res.positionText\nFROM \n    results res\nJOIN \n    drivers d ON res.driverId = d.driverId\nJOIN \n    races r ON res.raceId = r.raceId\nWHERE \n    d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY \n    res.position ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "931": "SELECT raceId\nFROM races\nWHERE year = 2009 AND name = 'Spanish Grand Prix';\t----- bird -----\tformula_1",
    "932": "SELECT DISTINCT r.year\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "933": "SELECT raceId\nFROM races\nWHERE year = 2008 AND name = 'Chinese Grand Prix';\t----- bird -----\tformula_1",
    "934": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 1989\n  AND ra.name = 'Australian Grand Prix'\n  AND r.grid = 4;\t----- bird -----\tformula_1",
    "935": "SELECT COUNT(DISTINCT r.driverId) AS finished_drivers\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN status s ON r.statusId = s.statusId\nWHERE ra.year = 2008\n  AND ra.name = 'Australian Grand Prix'\n  AND s.status = 'Finished';\t----- bird -----\tformula_1",
    "936": "SELECT driverId\nFROM drivers\nWHERE forename = 'Lewis' AND surname = 'Hamilton';\t----- bird -----\tformula_1",
    "937": "SELECT r.time\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2008\n  AND ra.name = 'Australian Grand Prix'\n  AND r.position = 2;\t----- bird -----\tformula_1",
    "938": "SELECT raceId\nFROM races\nWHERE year = 2008 AND name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "939": "SELECT COUNT(DISTINCT d.driverId) AS un_drivers_count\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2008\n  AND ra.name = 'Australian Grand Prix'\n  AND d.nationality = 'UN';\t----- bird -----\tformula_1",
    "940": "SELECT COUNT(DISTINCT r.driverId) AS participatedDrivers\nFROM results r\nWHERE r.raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND name = 'Chinese Grand Prix'\n)\n  AND r.position IS NOT NULL\n  AND EXISTS (\n    SELECT 1\n    FROM results r2\n    WHERE r2.driverId = r.driverId\n);\t----- bird -----\tformula_1",
    "941": "SELECT SUM(r.points) AS total_points\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "942": "SELECT AVG(julianday('now') - julianday('start of time', time)) * 86400 AS average_fastest_lap_seconds\nFROM (\n    SELECT l.raceId, MIN(l.milliseconds) AS fastest_lap_milliseconds\n    FROM lapTimes l\n    JOIN drivers d ON l.driverId = d.driverId\n    WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\n    GROUP BY l.raceId\n) sub;\t----- bird -----\tformula_1",
    "943": "SELECT\n    (COUNT(CASE WHEN r.laps = max_laps.max_laps THEN 1 END) * 1.0 / COUNT(*)) AS completion_rate\nFROM\n    results r\nJOIN\n    races ra ON r.raceId = ra.raceId\nCROSS JOIN\n    (SELECT MAX(laps) AS max_laps\n     FROM results\n     WHERE raceId = (\n         SELECT raceId\n         FROM races\n         WHERE year = 2008 AND name = 'Australian Grand Prix'\n     )) max_laps\nWHERE\n    ra.year = 2008\n    AND ra.name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "944": "SELECT raceId\nFROM races\nWHERE year = 2008 AND name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "945": "SELECT COUNT(*) AS num_circuits\nFROM circuits\nWHERE location = 'Adelaide' AND country = 'Australia';\t----- bird -----\tformula_1",
    "946": "SELECT name, lat, lng\nFROM circuits\nWHERE country IN ('USA', 'United States');\t----- bird -----\tformula_1",
    "947": "SELECT COUNT(*) AS BritishDriversAfter1980\nFROM drivers\nWHERE nationality = 'British'\n  AND dob > '1980-12-31';\t----- bird -----\tformula_1",
    "948": "SELECT MAX(total_points) AS max_points\nFROM (\n    SELECT c.constructorId, SUM(cr.points) AS total_points\n    FROM constructors c\n    JOIN constructorResults cr ON c.constructorId = cr.constructorId\n    WHERE c.nationality = 'British'\n    GROUP BY c.constructorId\n);\t----- bird -----\tformula_1",
    "949": "SELECT \n    c.constructorId,\n    c.name AS constructorName,\n    SUM(cs.points) AS totalPoints\nFROM \n    constructorStandings cs\nJOIN \n    constructors c ON cs.constructorId = c.constructorId\nGROUP BY \n    c.constructorId, c.name\nORDER BY \n    totalPoints DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "950": "SELECT c.name\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 291 AND cr.points = 0;\t----- bird -----\tformula_1",
    "951": "SELECT COUNT(*) AS num_japanese_constructors_with_0_points_in_2_races\nFROM (\n    SELECT c.constructorId\n    FROM constructors c\n    JOIN constructorResults cr ON c.constructorId = cr.constructorId\n    WHERE c.nationality = 'Japanese'\n      AND cr.points = 0\n    GROUP BY c.constructorId\n    HAVING COUNT(*) = 2\n) AS sub;\t----- bird -----\tformula_1",
    "952": "SELECT DISTINCT c.constructorId, c.name\nFROM constructorStandings cs\nJOIN constructors c ON cs.constructorId = c.constructorId\nWHERE cs.position = 1;\t----- bird -----\tformula_1",
    "953": "SELECT COUNT(DISTINCT c.constructorId) AS french_constructors_over_50_laps\nFROM constructors c\nJOIN results r ON c.constructorId = r.constructorId\nWHERE c.nationality = 'French'\n  AND r.laps > 50;\t----- bird -----\tformula_1",
    "954": "with `nationality = 'Japanese'`.\n\n---\n\n### **Step 2: Count total races they started**\nWe'll count how many races these drivers started (i.e., how many times they were entered in a race) from 2007 to 2009.\n\nThis can be done by joining `drivers` with `results` and filtering by `year` in the `races` table.\n\n---\n\n### **Step 3: Count how many of those races they completed**\nWe'll count how many of those races they **completed**. A race is considered completed if the `statusId` in the `results` table corresponds to a completed race.\n\nFrom the `status` table, we can assume that a race is completed if the `status` is something like `'Finished'` or similar. We'll filter for `status.status = 'Finished'`.\n\n---\n\n### **Step 4: Calculate the percentage**\nWe'll calculate the percentage as:\n\n```\n(Completed Races / Total Started Races) * 100\n```\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT \n    100.0 * COUNT(CASE WHEN s.status = 'Finished' THEN 1 END) / COUNT(*) AS completion_percentage\nFROM \n    drivers d\nJOIN \n    results r ON d.driverId = r.driverId\nJOIN \n    races ra ON r.raceId = ra.raceId\nLEFT JOIN \n    status s ON r.statusId = s.statusId\nWHERE \n    d.nationality = 'Japanese'\n    AND ra.year BETWEEN 2007 AND 2009;\t----- bird -----\tformula_1",
    "955": "SELECT \n    r.year,\n    AVG(\n        CASE \n            WHEN res.milliseconds IS NOT NULL THEN res.milliseconds / 1000.0\n            WHEN res.time IS NOT NULL THEN \n                CAST(SUBSTR(res.time, 1, INSTR(res.time, ':') - 1) AS INTEGER) * 60 +\n                CAST(SUBSTR(res.time, INSTR(res.time, ':') + 1) AS REAL)\n            ELSE NULL\n        END\n    ) AS average_time_seconds\nFROM \n    races r\nJOIN \n    results res ON r.raceId = res.raceId\nJOIN \n    driverStandings ds ON r.raceId = ds.raceId\nWHERE \n    r.year < 1975\n    AND ds.position = 1  -- Champion\nGROUP BY \n    r.year\nORDER BY \n    r.year;\t----- bird -----\tformula_1",
    "956": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE strftime('%Y', d.dob) > '1975'\n  AND r.position = 2;\t----- bird -----\tformula_1",
    "957": "SELECT COUNT(DISTINCT d.driverId) AS nonFinishingItalianDrivers\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN status s ON r.statusId = s.statusId\nWHERE d.nationality = 'Italian'\n  AND s.status NOT IN ('Finished', '');\t----- bird -----\tformula_1",
    "958": "SELECT d.forename, d.surname, l.milliseconds\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM lapTimes\n    WHERE milliseconds IS NOT NULL\n);\t----- bird -----\tformula_1",
    "959": "SELECT l.lap\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nJOIN (\n    SELECT ds.driverId\n    FROM driverStandings ds\n    JOIN races r ON ds.raceId = r.raceId\n    WHERE r.year = 2009\n      AND ds.position = 1\n      AND ds.raceId = (\n          SELECT MAX(raceId)\n          FROM races\n          WHERE year = 2009\n      )\n) AS champion ON d.driverId = champion.driverId\nJOIN races r2 ON l.raceId = r2.raceId\nWHERE r2.year = 2009\nORDER BY l.milliseconds\nLIMIT 1;\t----- bird -----\tformula_1",
    "960": "SELECT AVG(fastestLapSpeed) AS averageFastestLapSpeed\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2009 AND name = 'Spanish Grand Prix'\n);\t----- bird -----\tformula_1",
    "961": "SELECT r.name AS raceName, r.year\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.position = 1  -- Only consider the winner's time\nORDER BY res.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "962": "SELECT \n    100.0 * COUNT(DISTINCT d.driverId) / (SELECT COUNT(*) FROM drivers WHERE dob < '1985-01-01') AS percentage\nFROM \n    drivers d\nJOIN \n    results r ON d.driverId = r.driverId\nJOIN \n    races ra ON r.raceId = ra.raceId\nJOIN \n    lapTimes l ON d.driverId = l.driverId AND ra.raceId = l.raceId\nWHERE \n    d.dob < '1985-01-01'\n    AND ra.year BETWEEN 2000 AND 2005\n    AND l.lap > 50;\t----- bird -----\tformula_1",
    "963": "SELECT COUNT(DISTINCT d.driverId) AS french_drivers_with_fast_lap\nFROM drivers d\nJOIN lapTimes l ON d.driverId = l.driverId\nWHERE d.nationality = 'French'\n  AND l.time < '02:00.00';\t----- bird -----\tformula_1",
    "964": "SELECT code\nFROM drivers\nWHERE nationality = 'American';\t----- bird -----\tformula_1",
    "965": "SELECT raceId\nFROM races\nWHERE year = 2009;\t----- bird -----\tformula_1",
    "966": "SELECT COUNT(DISTINCT driverId) AS num_participants\nFROM results\nWHERE raceId = 18;\t----- bird -----\tformula_1",
    "967": "WITH YoungestDrivers AS (\n    SELECT \n        driverId,\n        forename,\n        surname,\n        dob,\n        nationality,\n        strftime('%Y', 'now') - strftime('%Y', dob) AS age\n    FROM drivers\n    ORDER BY age ASC\n    LIMIT 3\n)\n-- Count how many of them are from the Netherlands\nSELECT \n    COUNT(*) AS netherlands_count\nFROM YoungestDrivers\nWHERE nationality = 'Dutch';\t----- bird -----\tformula_1",
    "968": "SELECT driverRef\nFROM drivers\nWHERE forename = 'Robert' AND surname = 'Kubica';\t----- bird -----\tformula_1",
    "969": "SELECT COUNT(*) AS british_drivers_1980\nFROM drivers\nWHERE nationality = 'British'\n  AND strftime('%Y', dob) = '1980';\t----- bird -----\tformula_1",
    "970": "SELECT \n    d.driverId,\n    d.forename,\n    d.surname,\n    d.dob,\n    MIN(l.milliseconds) AS fastestLapTime\nFROM \n    drivers d\nJOIN \n    lapTimes l ON d.driverId = l.driverId\nWHERE \n    d.nationality = 'German'\n    AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990'\nGROUP BY \n    d.driverId\nORDER BY \n    fastestLapTime ASC\nLIMIT 3;\t----- bird -----\tformula_1",
    "971": "SELECT driverRef\nFROM drivers\nWHERE nationality = 'German'\nORDER BY dob ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "972": "SELECT \n    l.driverId,\n    d.code\nFROM \n    lapTimes l\nJOIN \n    drivers d ON l.driverId = d.driverId\nWHERE \n    strftime('%Y', d.dob) = '1971'\n    AND l.milliseconds = (\n        SELECT MIN(milliseconds)\n        FROM lapTimes\n        WHERE raceId = l.raceId\n    )\nGROUP BY \n    l.driverId, d.code;\t----- bird -----\tformula_1",
    "973": "SELECT *\nFROM drivers\nWHERE nationality = 'Spanish' AND dob < '1982-01-01';\t----- bird -----\tformula_1",
    "974": "SELECT r.year\nFROM lapTimes l\nJOIN races r ON l.raceId = r.raceId\nWHERE l.milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM lapTimes\n    WHERE milliseconds IS NOT NULL\n);\t----- bird -----\tformula_1",
    "975": "SELECT r.year\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.fastestLapSpeed IS NOT NULL\nORDER BY res.fastestLapSpeed ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "976": "SELECT driverId\nFROM lapTimes\nWHERE lap = 1\nORDER BY milliseconds ASC\nLIMIT 5;\t----- bird -----\tformula_1",
    "977": "SELECT COUNT(*) AS disqualified_count\nFROM results\nJOIN status ON results.statusId = status.statusId\nWHERE raceId BETWEEN 50 AND 100\n  AND status.status = 'Disqualified';\t----- bird -----\tformula_1",
    "978": "SELECT \n    COUNT(*) AS circuitCount,\n    GROUP_CONCAT(location || ', ' || lat || ', ' || lng) AS locations_and_coordinates\nFROM circuits\nWHERE country = 'Austria';\t----- bird -----\tformula_1",
    "979": "SELECT r.round AS raceNumber, COUNT(*) AS finishers\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.position IS NOT NULL\n  AND res.position != ''\n  AND res.statusId NOT IN (\n    SELECT statusId FROM status\n    WHERE status IN ('Retired', 'Not Classified', 'Did Not Qualify')\n  )\nGROUP BY r.round\nORDER BY finishers DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "980": "SELECT \n    d.driverRef,\n    d.nationality,\n    d.dob\nFROM \n    qualifying q\nJOIN \n    drivers d ON q.driverId = d.driverId\nWHERE \n    q.raceId = 23\n    AND q.q2 IS NOT NULL;\t----- bird -----\tformula_1",
    "981": "SELECT \n    r.year AS raceYear,\n    r.name AS raceName,\n    r.date AS raceDate,\n    r.time AS raceTime\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nJOIN races r ON q.raceId = r.raceId\nWHERE d.dob = (\n    SELECT MAX(dob)\n    FROM drivers\n)\nORDER BY r.date ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "982": "SELECT COUNT(DISTINCT d.driverId) AS american_puncture_drivers\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN status s ON r.statusId = s.statusId\nWHERE d.nationality = 'American'\n  AND s.status = 'Puncture';\t----- bird -----\tformula_1",
    "983": "SELECT \n    c.name AS constructorName,\n    c.url AS constructorWebsite,\n    SUM(cs.points) AS totalPoints\nFROM \n    constructorStandings cs\nJOIN \n    constructors c ON cs.constructorId = c.constructorId\nWHERE \n    c.nationality = 'Italian'\nGROUP BY \n    c.constructorId\nORDER BY \n    totalPoints DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "984": "SELECT c.url\nFROM constructors c\nJOIN (\n    SELECT constructorId, SUM(wins) AS totalWins\n    FROM constructorStandings\n    GROUP BY constructorId\n    ORDER BY totalWins DESC\n    LIMIT 1\n) cs ON c.constructorId = cs.constructorId;\t----- bird -----\tformula_1",
    "985": "SELECT d.driverId, d.forename, d.surname, lt.time, lt.milliseconds\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = (\n    SELECT raceId\n    FROM races\n    WHERE name = 'French Grand Prix'\n)\n  AND lt.lap = 3\nORDER BY lt.milliseconds DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "986": "SELECT \n    r.name AS raceName,\n    r.raceId,\n    l.milliseconds\nFROM \n    lapTimes l\nJOIN \n    races r ON l.raceId = r.raceId\nWHERE \n    l.lap = 1\nORDER BY \n    l.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "987": "SELECT AVG(fastestLapTimeInSeconds) AS averageFastestLapTime\nFROM (\n    SELECT \n        l.driverId,\n        MIN(\n            CAST(SUBSTR(l.time, 1, INSTR(l.time, ':') - 1) * 60 + \n                 SUBSTR(l.time, INSTR(l.time, ':') + 1) AS REAL)\n        ) AS fastestLapTimeInSeconds\n    FROM lapTimes l\n    JOIN results r ON l.driverId = r.driverId AND l.raceId = r.raceId\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE ra.year = 2006\n      AND ra.name = 'United States Grand Prix'\n      AND r.driverId IN (\n          SELECT driverId\n          FROM results\n          WHERE raceId = (\n              SELECT raceId\n              FROM races\n              WHERE year = 2006 AND name = 'United States Grand Prix'\n          )\n          ORDER BY positionOrder\n          LIMIT 10\n      )\n    GROUP BY l.driverId\n) AS top10FastestLaps;\t----- bird -----\tformula_1",
    "988": "SELECT \n    d.driverId,\n    d.forename,\n    d.surname,\n    d.dob,\n    AVG(p.milliseconds) AS avg_pit_stop_duration\nFROM \n    drivers d\nJOIN \n    pitStops p ON d.driverId = p.driverId\nWHERE \n    d.nationality = 'German'\n    AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985'\nGROUP BY \n    d.driverId, d.forename, d.surname, d.dob\nORDER BY \n    avg_pit_stop_duration ASC\nLIMIT 3;\t----- bird -----\tformula_1",
    "989": "SELECT \n    d.forename || ' ' || d.surname AS driverName,\n    r.time AS finishTime\nFROM \n    races AS ra\nJOIN \n    results AS r ON ra.raceId = r.raceId\nJOIN \n    drivers AS d ON r.driverId = d.driverId\nWHERE \n    ra.year = 2008\n    AND ra.name = 'Canadian Grand Prix'\n    AND r.positionOrder = 1;\t----- bird -----\tformula_1",
    "990": "SELECT \n    c.constructorRef,\n    c.url\nFROM \n    races r\nJOIN \n    results res ON r.raceId = res.raceId\nJOIN \n    constructors c ON res.constructorId = c.constructorId\nWHERE \n    r.year = 2009\n    AND r.name = 'Singapore Grand Prix'\n    AND res.position = 1;\t----- bird -----\tformula_1",
    "991": "SELECT \n    forename, \n    surname, \n    dob\nFROM \n    drivers\nWHERE \n    nationality = 'Austrian'\n    AND dob BETWEEN '1981-01-01' AND '1991-12-31';\t----- bird -----\tformula_1",
    "992": "SELECT \n    forename || ' ' || surname AS fullName,\n    url,\n    dob\nFROM \n    drivers\nWHERE \n    nationality = 'German'\n    AND dob >= '1971-01-01'\n    AND dob <= '1985-12-31'\nORDER BY \n    dob DESC;\t----- bird -----\tformula_1",
    "993": "SELECT location, country, lat, lng\nFROM circuits\nWHERE name = 'Hungaroring';\t----- bird -----\tformula_1",
    "994": "SELECT \n    c.constructorId,\n    c.name AS constructorName,\n    c.nationality,\n    SUM(r.points) AS totalPoints\nFROM \n    races r\nJOIN \n    results res ON r.raceId = res.raceId\nJOIN \n    constructors c ON res.constructorId = c.constructorId\nWHERE \n    r.name LIKE '%Monaco%' \n    AND r.year BETWEEN 1980 AND 2010\nGROUP BY \n    c.constructorId, c.name, c.nationality\nORDER BY \n    totalPoints DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "995": "SELECT AVG(r.points) AS average_points\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\n  AND ra.name = 'Turkish Grand Prix';\t----- bird -----\tformula_1",
    "996": "SELECT \n    AVG(race_count) AS average_races_per_year\nFROM (\n    SELECT \n        year,\n        COUNT(*) AS race_count\n    FROM \n        races\n    WHERE \n        year BETWEEN 2001 AND 2010\n    GROUP BY \n        year\n);\t----- bird -----\tformula_1",
    "997": "SELECT nationality, COUNT(*) AS driver_count\nFROM drivers\nGROUP BY nationality\nORDER BY driver_count DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "998": "SELECT \n    driverId, \n    SUM(points) AS totalPoints\nFROM \n    results\nGROUP BY \n    driverId\nORDER BY \n    totalPoints DESC;\t----- bird -----\tformula_1",
    "999": "SELECT r.name AS raceName\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.fastestLapSpeed = (\n    SELECT MAX(fastestLapSpeed)\n    FROM results\n    WHERE fastestLapSpeed IS NOT NULL\n);\t----- bird -----\tformula_1",
    "1000": "SELECT \n    c.name AS circuitName,\n    c.location AS location,\n    c.country AS country\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.date = (SELECT MAX(date) FROM races);\t----- bird -----\tformula_1",
    "1001": "SELECT d.forename, d.surname\nFROM qualifying q\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nJOIN drivers d ON q.driverId = d.driverId\nWHERE c.name = 'Marina Bay Street Circuit'\n  AND r.year = 2008\n  AND r.round = 3\n  AND q.position = 1;\t----- bird -----\tformula_1",
    "1002": "SELECT \n    d.forename || ' ' || d.surname AS fullName,\n    d.nationality,\n    r.name AS firstRace\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.dob = (\n    SELECT MIN(dob)\n    FROM drivers\n)\nAND res.raceId = (\n    SELECT MIN(r2.raceId)\n    FROM results res2\n    WHERE res2.driverId = d.driverId\n);\t----- bird -----\tformula_1",
    "1003": "with the **highest number of accidents in the Canadian Grand Prix** had, we need to:\n\n---\n\n### **Step 1: Identify the `raceId` for the Canadian Grand Prix**\n\nWe can find this by querying the `races` table where the `name` is `'Canadian Grand Prix'`.\n\n---\n\n### **Step 2: Identify the driver(s) who had the most accidents in that race**\n\nAssuming that **accidents** are represented by the `status` table, and that a specific status (e.g., \"Accident\", \"Retired\", \"Crash\", etc.) indicates an accident, we can:\n\n- Join the `results` table with the `status` table to find which drivers had accidents in that race.\n- Count how many times each driver had an accident in that race.\n- Find the driver with the **maximum** number of accidents.\n\n---\n\n### **Step 3: Count the total number of accidents for that driver in the entire dataset**\n\nOnce we have the `driverId` of the driver with the most accidents in the Canadian Grand Prix, we can count how many times they had an accident in **all races**.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\n-- Step 1: Find the raceId for the Canadian Grand Prix\nWITH CanadianGP AS (\n    SELECT raceId\n    FROM races\n    WHERE name = 'Canadian Grand Prix'\n),\n\n-- Step 2: Find the driver with the most accidents in the Canadian Grand Prix\nDriverWithMostAccidentsInCanada AS (\n    SELECT r.driverId\n    FROM results r\n    JOIN status s ON r.statusId = s.statusId\n    JOIN CanadianGP c ON r.raceId = c.raceId\n    WHERE s.status IN ('Accident', 'Retired', 'Crash')  -- Adjust based on actual status values\n    GROUP BY r.driverId\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n),\n\n-- Step 3: Count total accidents for that driver in all races\nTotalAccidents AS (\n    SELECT COUNT(*) AS total_accidents\n    FROM results r\n    JOIN status s ON r.statusId = s.statusId\n    JOIN DriverWithMostAccidentsInCanada d ON r.driverId = d.driverId\n    WHERE s.status IN ('Accident', 'Retired', 'Crash')\n)\n\n-- Final result\nSELECT total_accidents\nFROM TotalAccidents;\t----- bird -----\tformula_1",
    "1004": "SELECT \n    d.forename || ' ' || d.surname AS fullName,\n    SUM(ds.wins) AS totalWins\nFROM \n    drivers d\nJOIN \n    driverStandings ds ON d.driverId = ds.driverId\nWHERE \n    d.dob = (SELECT MIN(dob) FROM drivers)\nGROUP BY \n    d.driverId;\t----- bird -----\tformula_1",
    "1005": "SELECT \n    p.raceId,\n    p.driverId,\n    d.forename || ' ' || d.surname AS driverName,\n    p.stop,\n    p.duration,\n    p.milliseconds\nFROM \n    pitStops p\nJOIN \n    drivers d ON p.driverId = d.driverId\nWHERE \n    p.milliseconds = (\n        SELECT MAX(milliseconds) \n        FROM pitStops\n    );\t----- bird -----\tformula_1",
    "1006": "SELECT time\nFROM lapTimes\nWHERE milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM lapTimes\n    WHERE milliseconds IS NOT NULL\n);\t----- bird -----\tformula_1",
    "1007": "SELECT MAX(milliseconds) AS longestPitStop\nFROM pitStops\nWHERE driverId = (\n    SELECT driverId\n    FROM drivers\n    WHERE forename = 'Lewis' AND surname = 'Hamilton'\n);\t----- bird -----\tformula_1",
    "1008": "SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';\t----- bird -----\tformula_1",
    "1009": "SELECT \n    d.driverId,\n    d.forename || ' ' || d.surname AS driverName,\n    p.duration\nFROM \n    pitStops p\nJOIN \n    drivers d ON p.driverId = d.driverId\nWHERE \n    p.raceId = (\n        SELECT raceId \n        FROM races \n        WHERE year = 2011 AND name = 'Australian Grand Prix'\n    );\t----- bird -----\tformula_1",
    "1010": "SELECT \n    l.raceId,\n    l.driverId,\n    d.forename || ' ' || d.surname AS driverName,\n    l.lap,\n    l.time AS fastestLapTime,\n    l.milliseconds\nFROM \n    lapTimes l\nJOIN \n    drivers d ON l.driverId = d.driverId\nWHERE \n    d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY \n    l.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "1011": "SELECT d.forename || ' ' || d.surname AS fullName\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM lapTimes\n)\nORDER BY d.driverId\nLIMIT 20;\t----- bird -----\tformula_1",
    "1012": "SELECT c.name AS circuitName, c.position AS circuitPosition\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nJOIN races r ON l.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY l.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "1013": "SELECT \n    l.raceId,\n    l.driverId,\n    l.lap,\n    l.time AS fastestLapTime,\n    l.milliseconds\nFROM \n    lapTimes l\nJOIN \n    races r ON l.raceId = r.raceId\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    c.name = 'Austrian Grand Prix'\nORDER BY \n    l.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "1014": "SELECT \n    c.name AS circuitName,\n    r.name AS raceName,\n    r.date AS raceDate,\n    d.forename || ' ' || d.surname AS driverName,\n    co.name AS constructorName,\n    lt.lap,\n    lt.time AS fastestLapTime,\n    lt.milliseconds AS fastestLapMilliseconds\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN results res ON r.raceId = res.raceId\nJOIN lapTimes lt ON r.raceId = lt.raceId AND res.fastestLap = lt.lap AND res.driverId = lt.driverId\nJOIN drivers d ON res.driverId = d.driverId\nJOIN constructors co ON res.constructorId = co.constructorId\nWHERE c.country = 'Italy'\nORDER BY r.date DESC, r.name;\t----- bird -----\tformula_1",
    "1015": "SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit';\t----- bird -----\tformula_1",
    "1016": "SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit';\t----- bird -----\tformula_1",
    "1017": "SELECT c.lat, c.lng\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN results res ON r.raceId = res.raceId\nWHERE res.fastestLapTime = '1:29.488';\t----- bird -----\tformula_1",
    "1018": "SELECT AVG(p.milliseconds) AS averagePitStopTime\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "1019": "SELECT AVG(l.milliseconds) AS average_lap_time_ms\nFROM lapTimes l\nJOIN races r ON l.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Italy';\t----- bird -----\tformula_1",
    "1020": "SELECT \n    pa.player_api_id,\n    p.player_name,\n    pa.overall_rating\nFROM \n    Player_Attributes pa\nJOIN \n    Player p ON pa.player_api_id = p.player_api_id\nORDER BY \n    pa.overall_rating DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1021": "SELECT player_name, height\nFROM Player\nORDER BY height DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1022": "SELECT preferred_foot\nFROM Player_Attributes\nWHERE potential = (\n    SELECT MIN(potential)\n    FROM Player_Attributes\n);\t----- bird -----\teuropean_football_2",
    "1023": "SELECT COUNT(*) AS num_attack_focused_players\nFROM Player_Attributes\nWHERE overall_rating BETWEEN 60 AND 65\n  AND attacking_work_rate = 'High'\n  AND defensive_work_rate = 'Low';\t----- bird -----\teuropean_football_2",
    "1024": "SELECT \n    player_api_id,\n    MAX(crossing) AS max_crossing\nFROM \n    Player_Attributes\nGROUP BY \n    player_api_id\nORDER BY \n    max_crossing DESC\nLIMIT 5;\t----- bird -----\teuropean_football_2",
    "1025": "SELECT \n    L.name AS league_name,\n    SUM(M.home_team_goal + M.away_team_goal) AS total_goals\nFROM \n    Match M\nJOIN \n    League L ON M.league_id = L.id\nWHERE \n    M.season = '2016'\nGROUP BY \n    L.name\nORDER BY \n    total_goals DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1026": "SELECT \n    home_team_api_id,\n    COUNT(*) AS home_losses\nFROM \n    Match\nWHERE \n    season = '2016/2017'  -- Assuming the season is stored in format '2016/2017'\n    AND home_team_goal < away_team_goal\nGROUP BY \n    home_team_api_id\nORDER BY \n    home_losses ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1027": "SELECT \n    p.player_name,\n    SUM(pa.penalties) AS total_penalties\nFROM \n    Player_Attributes pa\nJOIN \n    Player p ON pa.player_api_id = p.player_api_id\nGROUP BY \n    p.player_api_id, p.player_name\nORDER BY \n    total_penalties DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "1028": "SELECT \n    away_team_api_id,\n    COUNT(*) AS away_wins\nFROM \n    Match\nWHERE \n    league_id = (\n        SELECT id \n        FROM League \n        WHERE name = 'Scotland Premier League'\n    )\n    AND season = '2010/2011'\n    AND away_team_goal > home_team_goal\nGROUP BY \n    away_team_api_id\nORDER BY \n    away_wins DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1029": "SELECT \n    team_api_id,\n    buildUpPlaySpeed,\n    buildUpPlaySpeedClass\nFROM \n    Team_Attributes\nORDER BY \n    buildUpPlaySpeed DESC\nLIMIT 4;\t----- bird -----\teuropean_football_2",
    "1030": "SELECT \n    l.name AS league_name,\n    COUNT(*) AS draw_count\nFROM \n    Match m\nJOIN \n    League l ON m.league_id = l.id\nWHERE \n    m.season = '2016/2017'  -- Assuming the season is stored as '2016/2017'\n    AND m.home_team_goal = m.away_team_goal\nGROUP BY \n    l.name\nORDER BY \n    draw_count DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1031": "SELECT \n    p.player_name,\n    (strftime('%Y', 'now') - strftime('%Y', p.birthday)) AS age\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    pa.sprint_speed >= 97\n    AND pa.date BETWEEN '2013-01-01' AND '2015-12-31';\t----- bird -----\teuropean_football_2",
    "1032": "SELECT \n    L.name AS league_name,\n    COUNT(M.id) AS total_matches\nFROM \n    Match M\nJOIN \n    League L ON M.league_id = L.id\nGROUP BY \n    L.name\nORDER BY \n    total_matches DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1033": "SELECT AVG(height) AS average_height\nFROM Player\nWHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';\t----- bird -----\teuropean_football_2",
    "1034": "SELECT player_api_id\nFROM Player_Attributes\nWHERE date BETWEEN '2010-01-01' AND '2010-12-31'\n  AND overall_rating > (\n      SELECT AVG(overall_rating)\n      FROM Player_Attributes\n      WHERE date BETWEEN '2010-01-01' AND '2010-12-31'\n  )\n  AND overall_rating = (\n      SELECT MAX(overall_rating)\n      FROM Player_Attributes\n      WHERE date BETWEEN '2010-01-01' AND '2010-12-31'\n  );\t----- bird -----\teuropean_football_2",
    "1035": "SELECT team_fifa_api_id\nFROM Team_Attributes\nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;\t----- bird -----\teuropean_football_2",
    "1036": "SELECT t.team_long_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE strftime('%Y', ta.date) = '2012'\n  AND ta.buildUpPlayPassing > (\n      SELECT AVG(buildUpPlayPassing)\n      FROM Team_Attributes\n      WHERE buildUpPlayPassing IS NOT NULL\n  );\t----- bird -----\teuropean_football_2",
    "1037": "with `Player_Attributes` to get `preferred_foot = 'left'`\n\n2. **Count** the number of such players.\n\n3. **Count** the total number of players born between 1987 and 1992.\n\n4. **Calculate the percentage** using:\n   ```\n   (number of left-footed players / total players in the age range) * 100\n   ```\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT \n    100.0 * COUNT(CASE WHEN pa.preferred_foot = 'left' THEN 1 END) / COUNT(*) AS percentage_left_footed\nFROM \n    Player p\nLEFT JOIN \n    Player_Attributes pa \n    ON p.player_api_id = pa.player_api_id\nWHERE \n    p.birthday BETWEEN '1987-01-01' AND '1992-12-31';\t----- bird -----\teuropean_football_2",
    "1038": "with the `League` table to get the league name.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT \n    l.name AS league_name,\n    SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM \n    Match m\nJOIN \n    League l ON m.league_id = l.id\nGROUP BY \n    l.name\nORDER BY \n    total_goals ASC\nLIMIT 5;\t----- bird -----\teuropean_football_2",
    "1039": "SELECT player_api_id\nFROM Player\nWHERE player_name = 'Ahmed Samir Farag';\t----- bird -----\teuropean_football_2",
    "1040": "SELECT \n    p.player_name,\n    AVG(pa.heading_accuracy) AS avg_heading_accuracy\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    p.height > 180\nGROUP BY \n    p.player_api_id, p.player_name\nORDER BY \n    avg_heading_accuracy DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "1041": "SELECT \n    t.team_long_name,\n    ta.chanceCreationPassing\nFROM \n    Team_Attributes ta\nJOIN \n    Team t ON ta.team_api_id = t.team_api_id\nWHERE \n    ta.buildUpPlayDribblingClass = 'normal'\n    AND strftime('%Y', ta.date) = '2014'\n    AND ta.chanceCreationPassing < (\n        SELECT AVG(chanceCreationPassing)\n        FROM Team_Attributes\n        WHERE buildUpPlayDribblingClass = 'normal'\n          AND strftime('%Y', date) = '2014'\n    )\nORDER BY \n    ta.chanceCreationPassing DESC;\t----- bird -----\teuropean_football_2",
    "1042": "SELECT l.name AS league_name\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2009/2010'\nGROUP BY l.id\nHAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);\t----- bird -----\teuropean_football_2",
    "1043": "SELECT team_short_name\nFROM Team\nWHERE team_long_name = 'Queens Park Rangers';\t----- bird -----\teuropean_football_2",
    "1044": "SELECT player_name, birthday\nFROM Player\nWHERE strftime('%Y', birthday) = '1970'\n  AND strftime('%m', birthday) = '10';\t----- bird -----\teuropean_football_2",
    "1045": "SELECT player_api_id\nFROM Player\nWHERE player_name = 'Franco Zennaro';\t----- bird -----\teuropean_football_2",
    "1046": "SELECT \n    t.team_long_name,\n    ta.buildUpPlayPositioningClass AS freedom_of_movement\nFROM \n    Team t\nJOIN \n    Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE \n    t.team_long_name = 'ADO Den Haag'\nORDER BY \n    ta.date DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1047": "SELECT pa.finishing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francois Affolter'\n  AND pa.date = '18/09/2014';\t----- bird -----\teuropean_football_2",
    "1048": "SELECT pa.overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Gabriel Tamas'\n  AND strftime('%Y', pa.date) = '2011';\t----- bird -----\teuropean_football_2",
    "1049": "SELECT COUNT(*) AS match_count\nFROM Match\nJOIN League ON Match.league_id = League.id\nJOIN Country ON Match.country_id = Country.id\nWHERE Match.season = '2015/2016'\n  AND Country.name = 'Scotland'\n  AND League.name = 'Scottish Premier League';\t----- bird -----\teuropean_football_2",
    "1050": "SELECT pa.preferred_foot\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.birthday = (\n    SELECT MAX(birthday)\n    FROM Player\n);\t----- bird -----\teuropean_football_2",
    "1051": "SELECT pa.player_api_id, p.player_name, pa.potential\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.potential = (\n    SELECT MAX(potential)\n    FROM Player_Attributes\n);\t----- bird -----\teuropean_football_2",
    "1052": "SELECT COUNT(*) AS player_count\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.weight < 130\n  AND pa.attacking_work_rate = 'Left';\t----- bird -----\teuropean_football_2",
    "1053": "SELECT DISTINCT t.team_short_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE ta.chanceCreationPassingClass = 'Risky';\t----- bird -----\teuropean_football_2",
    "1054": "SELECT player_api_id\nFROM Player\nWHERE player_name = 'David Wilson';\t----- bird -----\teuropean_football_2",
    "1055": "SELECT p.birthday\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nORDER BY pa.overall_rating DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1056": "SELECT l.name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE c.name = 'Netherlands';\t----- bird -----\teuropean_football_2",
    "1057": "SELECT AVG(home_team_goal) AS average_home_team_goal\nFROM Match\nWHERE season = '2010/2011'\n  AND country_id = (\n    SELECT id\n    FROM Country\n    WHERE name = 'Poland'\n  );\t----- bird -----\teuropean_football_2",
    "1058": "SELECT \n    p.player_name,\n    AVG(pa.finishing) AS avg_finishing\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    p.height BETWEEN (\n        SELECT MIN(height) FROM Player\n    ) AND (\n        SELECT MAX(height) FROM Player\n    )\nGROUP BY \n    p.player_api_id, p.player_name\nORDER BY \n    avg_finishing DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1059": "SELECT player_name\nFROM Player\nWHERE height > 180;\t----- bird -----\teuropean_football_2",
    "1060": "SELECT COUNT(*) AS players_born_after_1990\nFROM Player\nWHERE strftime('%Y', birthday) > '1990';\t----- bird -----\teuropean_football_2",
    "1061": "SELECT COUNT(*) AS adam_players_over_170\nFROM Player\nWHERE player_name LIKE 'Adam%'\n  AND weight > 170;\t----- bird -----\teuropean_football_2",
    "1062": "SELECT DISTINCT p.player_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating > 80\n  AND pa.date BETWEEN '2008-01-01' AND '2010-12-31';\t----- bird -----\teuropean_football_2",
    "1063": "SELECT pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Aaron Doran';\t----- bird -----\teuropean_football_2",
    "1064": "SELECT DISTINCT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'left';\t----- bird -----\teuropean_football_2",
    "1065": "SELECT DISTINCT t.team_long_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE ta.buildUpPlaySpeedClass = 'fast';\t----- bird -----\teuropean_football_2",
    "1066": "SELECT t.team_long_name, ta.buildUpPlayPassingClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'CLB';\t----- bird -----\teuropean_football_2",
    "1067": "SELECT DISTINCT T.team_short_name\nFROM Team_Attributes TA\nJOIN Team T ON TA.team_api_id = T.team_api_id\nWHERE TA.buildUpPlayPassing > 70;\t----- bird -----\teuropean_football_2",
    "1068": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.height > 170\n  AND pa.date BETWEEN '2010-01-01' AND '2015-12-31';\t----- bird -----\teuropean_football_2",
    "1069": "SELECT player_name, height\nFROM Player\nWHERE height IS NOT NULL\nORDER BY height ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1070": "SELECT c.name AS country_name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE l.name = 'Italy Serie A';\t----- bird -----\teuropean_football_2",
    "1071": "SELECT t.team_short_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE ta.buildUpPlaySpeed = 31\n  AND ta.buildUpPlayDribbling = 53\n  AND ta.buildUpPlayPassing = 32;\t----- bird -----\teuropean_football_2",
    "1072": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Aaron Doran'\n);\t----- bird -----\teuropean_football_2",
    "1073": "SELECT COUNT(*) AS match_count\nFROM Match\nJOIN League ON Match.league_id = League.id\nWHERE League.name = 'Germany 1. Bundesliga'\n  AND Match.date BETWEEN '2008-08-01' AND '2008-10-31';\t----- bird -----\teuropean_football_2",
    "1074": "SELECT DISTINCT t.team_short_name\nFROM Match m\nJOIN Team t ON m.home_team_api_id = t.team_api_id\nWHERE m.home_team_goal = 10;\t----- bird -----\teuropean_football_2",
    "1075": "SELECT pa.*, p.player_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.balance = (\n    SELECT MAX(balance)\n    FROM Player_Attributes\n)\nAND pa.potential = 61;\t----- bird -----\teuropean_football_2",
    "1076": "SELECT \n    (SELECT AVG(ball_control) \n     FROM Player_Attributes \n     WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')) \n    - \n    (SELECT AVG(ball_control) \n     FROM Player_Attributes \n     WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye')) \n    AS ball_control_difference;\t----- bird -----\teuropean_football_2",
    "1077": "SELECT team_long_name\nFROM Team\nWHERE team_short_name = 'GEN';\t----- bird -----\teuropean_football_2",
    "1078": "SELECT \n    player_name,\n    birthday\nFROM \n    Player\nWHERE \n    player_name IN ('Aaron Lennon', 'Abdelaziz Barrada');\t----- bird -----\teuropean_football_2",
    "1079": "SELECT player_name, height\nFROM Player\nORDER BY height DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1080": "SELECT COUNT(*) AS players_remaining_in_position\nFROM Player_Attributes\nWHERE preferred_foot = 'left'\n  AND attacking_work_rate = 'Low';\t----- bird -----\teuropean_football_2",
    "1081": "SELECT c.name AS country_name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE l.name = 'Belgium Jupiler League';\t----- bird -----\teuropean_football_2",
    "1082": "SELECT l.name AS league_name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE c.name = 'Germany';\t----- bird -----\teuropean_football_2",
    "1083": "SELECT p.player_name, pa.strength\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nORDER BY pa.strength DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1084": "SELECT COUNT(*) AS num_players\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986'\n  AND pa.defensive_work_rate = 'High';\t----- bird -----\teuropean_football_2",
    "1085": "SELECT \n    p.player_name,\n    pa.crossing\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')\nORDER BY \n    pa.crossing DESC;\t----- bird -----\teuropean_football_2",
    "1086": "SELECT pa.heading_accuracy\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Ariel Borysiuk';\t----- bird -----\teuropean_football_2",
    "1087": "SELECT COUNT(*) AS num_players\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180 AND pa.volleys > 70;\t----- bird -----\teuropean_football_2",
    "1088": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.volleys > 70 AND pa.dribbling > 70;\t----- bird -----\teuropean_football_2",
    "1089": "SELECT COUNT(*) AS match_count\nFROM Match\nWHERE season = '2008/2009'\n  AND country_id = (\n      SELECT id\n      FROM Country\n      WHERE name = 'Belgium'\n  );\t----- bird -----\teuropean_football_2",
    "1090": "SELECT pa.long_passing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nORDER BY p.birthday ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1091": "SELECT id FROM League WHERE name = 'Belgium Jupiler League';\t----- bird -----\teuropean_football_2",
    "1092": "SELECT \n    l.name AS league_name,\n    COUNT(*) AS total_matches\nFROM \n    Match m\nJOIN \n    League l ON m.league_id = l.id\nWHERE \n    m.season = '2008/2009'\nGROUP BY \n    l.id\nORDER BY \n    total_matches DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1093": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986';\t----- bird -----\teuropean_football_2",
    "1094": "SELECT \n    ( ( a.overall_rating - p.overall_rating ) / p.overall_rating ) * 100 AS percentage_difference\nFROM \n    Player_Attributes a\nJOIN \n    Player_Attributes p\nON \n    a.date = (\n        SELECT MAX(date) \n        FROM Player_Attributes \n        WHERE player_api_id = a.player_api_id\n    )\n    AND p.date = (\n        SELECT MAX(date) \n        FROM Player_Attributes \n        WHERE player_api_id = p.player_api_id\n    )\nWHERE \n    a.player_name = 'Ariel Borysiuk'\n    AND p.player_name = 'Paulin Puel';\t----- bird -----\teuropean_football_2",
    "1095": "SELECT team_api_id FROM Team WHERE team_long_name = 'Heart of Midlothian';\t----- bird -----\teuropean_football_2",
    "1096": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Pietro Marino'\n);\t----- bird -----\teuropean_football_2",
    "1097": "SELECT pa.crossing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Aaron Lennox'\nORDER BY pa.date DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1098": "SELECT team_api_id FROM Team WHERE team_long_name = 'Ajax';\t----- bird -----\teuropean_football_2",
    "1099": "SELECT pa.preferred_foot\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Abdou Diallo';\t----- bird -----\teuropean_football_2",
    "1100": "SELECT MAX(overall_rating) AS highest_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Dorlan Pabon'\n);\t----- bird -----\teuropean_football_2",
    "1101": "SELECT AVG(away_team_goal) AS average_away_goals\nFROM Match\nWHERE away_team_api_id = (\n    SELECT team_api_id\n    FROM Team\n    WHERE team_long_name = 'Parma'\n)\nAND country_id = (\n    SELECT id\n    FROM Country\n    WHERE name = 'Italy'\n);\t----- bird -----\teuropean_football_2",
    "1102": "SELECT \n    p.player_name,\n    p.birthday,\n    (strftime('%Y', '2016-06-23') - strftime('%Y', p.birthday)) \n    - (strftime('%m-%d', '2016-06-23') < strftime('%m-%d', p.birthday)) AS age\nFROM \n    Player_Attributes pa\nJOIN \n    Player p ON pa.player_api_id = p.player_api_id\nWHERE \n    pa.overall_rating = 77\n    AND pa.date = '2016-06-23'\nORDER BY \n    age DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1103": "SELECT pa.overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Aaron Mooy'\n  AND pa.date = '2016-02-04';\t----- bird -----\teuropean_football_2",
    "1104": "SELECT pa.potential\nFROM Player p\nJOIN Player_Attributes pa\n  ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francesco Parravicini'\n  AND pa.date = '2010/8/30';\t----- bird -----\teuropean_football_2",
    "1105": "SELECT pa.attacking_work_rate\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francesco Migliore'\n  AND pa.date = '2015/5/1';\t----- bird -----\teuropean_football_2",
    "1106": "SELECT pa.defensive_work_rate\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Kevin Berigaud'\n  AND pa.date = '2013-02-22';\t----- bird -----\teuropean_football_2",
    "1107": "SELECT pa.date\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Kevin Constant'\n  AND pa.crossing = (\n    SELECT MAX(pa2.crossing)\n    FROM Player_Attributes pa2\n    WHERE pa2.player_api_id = p.player_api_id\n  )\nORDER BY pa.date\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1108": "SELECT ta.buildUpPlaySpeedClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'Willem II'\n  AND ta.date = '2011-02-22';\t----- bird -----\teuropean_football_2",
    "1109": "SELECT t.team_short_name, ta.buildUpPlayDribblingClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_short_name = 'LEI'\n  AND ta.date = '2015/9/10';\t----- bird -----\teuropean_football_2",
    "1110": "SELECT team_api_id\nFROM Team\nWHERE team_long_name = 'FC Lorient';\t----- bird -----\teuropean_football_2",
    "1111": "SELECT chanceCreationPassingClass\nFROM Team_Attributes\nWHERE team_api_id = (\n    SELECT team_api_id\n    FROM Team\n    WHERE team_long_name = 'PEC Zwolle'\n)\nAND date = '2013/9/20';\t----- bird -----\teuropean_football_2",
    "1112": "SELECT ta.chanceCreationCrossingClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'Hull City'\n  AND ta.date = '2010-02-22';\t----- bird -----\teuropean_football_2",
    "1113": "SELECT ta.defenceAggressionClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'Hannover 96'\n  AND ta.date = '2015-09-10';\t----- bird -----\teuropean_football_2",
    "1114": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Marko Arnautovic'\n)\nAND date BETWEEN '2007-02-22' AND '2016-04-21';\t----- bird -----\teuropean_football_2",
    "1115": "SELECT\n    ( ( d.overall_rating - b.overall_rating ) / b.overall_rating ) * 100 AS percentage_increase\nFROM\n    Player p_d\nJOIN\n    Player_Attributes d ON p_d.player_api_id = d.player_api_id\nJOIN\n    Player p_b ON p_b.player_name = 'Jordan Bowery'\nJOIN\n    Player_Attributes b ON p_b.player_api_id = b.player_api_id\nWHERE\n    p_d.player_name = 'Landon Donovan'\n    AND d.date = '2013-07-12'\n    AND b.date = '2013-07-12';\t----- bird -----\teuropean_football_2",
    "1116": "SELECT player_name, height\nFROM Player\nWHERE height = (\n    SELECT MAX(height)\n    FROM Player\n);\t----- bird -----\teuropean_football_2",
    "1117": "SELECT player_api_id, weight\nFROM Player\nORDER BY weight DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "1118": "with age >= 35**:\n   - We will use a `WHERE` clause to filter players whose age is 35 or older.\n\n4. **Select only the player names**.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT player_name\nFROM Player\nWHERE strftime('%Y', 'now') - strftime('%Y', birthday) >= 35;\t----- bird -----\teuropean_football_2",
    "1119": "SELECT COUNT(*) AS home_goals_by_aaron_lennon\nFROM Match\nJOIN Player ON Player.player_api_id = Match.home_player_1\nOR Player.player_api_id = Match.home_player_2\nOR Player.player_api_id = Match.home_player_3\nOR Player.player_api_id = Match.home_player_4\nOR Player.player_api_id = Match.home_player_5\nOR Player.player_api_id = Match.home_player_6\nOR Player.player_api_id = Match.home_player_7\nOR Player.player_api_id = Match.home_player_8\nOR Player.player_api_id = Match.home_player_9\nOR Player.player_api_id = Match.home_player_10\nOR Player.player_api_id = Match.home_player_11\nWHERE Player.player_name = 'Aaron Lennon'\nAND JSON_EACH.value LIKE '%\"team\": \"home\"%' \nAND JSON_EACH.value LIKE '%\"player\": \"' || Player.player_api_id || '\"%'\nAND JSON_EACH.value LIKE '%\"minute\": \"%'\nAND JSON_EACH.value NOT LIKE '%\"owngoal\": \"%'\nAND goal IS NOT NULL\nAND goal != ''\nCROSS JOIN JSON_EACH(goal);\t----- bird -----\teuropean_football_2",
    "1120": "SELECT \n    SUM(\n        CASE \n            WHEN away_player_1 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_1') > 0 THEN JSON_VALUE(goal, '$.away_player_1')\n            WHEN away_player_2 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_2') > 0 THEN JSON_VALUE(goal, '$.away_player_2')\n            WHEN away_player_3 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_3') > 0 THEN JSON_VALUE(goal, '$.away_player_3')\n            WHEN away_player_4 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_4') > 0 THEN JSON_VALUE(goal, '$.away_player_4')\n            WHEN away_player_5 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_5') > 0 THEN JSON_VALUE(goal, '$.away_player_5')\n            WHEN away_player_6 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_6') > 0 THEN JSON_VALUE(goal, '$.away_player_6')\n            WHEN away_player_7 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_7') > 0 THEN JSON_VALUE(goal, '$.away_player_7')\n            WHEN away_player_8 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_8') > 0 THEN JSON_VALUE(goal, '$.away_player_8')\n            WHEN away_player_9 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_9') > 0 THEN JSON_VALUE(goal, '$.away_player_9')\n            WHEN away_player_10 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_10') > 0 THEN JSON_VALUE(goal, '$.away_player_10')\n            WHEN away_player_11 = p1.player_api_id AND JSON_VALUE(goal, '$.away_player_11') > 0 THEN JSON_VALUE(goal, '$.away_player_11')\n            ELSE 0\n        END\n    ) AS total_away_goals_daan_smith,\n    \n    SUM(\n        CASE \n            WHEN away_player_1 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_1') > 0 THEN JSON_VALUE(goal, '$.away_player_1')\n            WHEN away_player_2 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_2') > 0 THEN JSON_VALUE(goal, '$.away_player_2')\n            WHEN away_player_3 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_3') > 0 THEN JSON_VALUE(goal, '$.away_player_3')\n            WHEN away_player_4 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_4') > 0 THEN JSON_VALUE(goal, '$.away_player_4')\n            WHEN away_player_5 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_5') > 0 THEN JSON_VALUE(goal, '$.away_player_5')\n            WHEN away_player_6 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_6') > 0 THEN JSON_VALUE(goal, '$.away_player_6')\n            WHEN away_player_7 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_7') > 0 THEN JSON_VALUE(goal, '$.away_player_7')\n            WHEN away_player_8 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_8') > 0 THEN JSON_VALUE(goal, '$.away_player_8')\n            WHEN away_player_9 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_9') > 0 THEN JSON_VALUE(goal, '$.away_player_9')\n            WHEN away_player_10 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_10') > 0 THEN JSON_VALUE(goal, '$.away_player_10')\n            WHEN away_player_11 = p2.player_api_id AND JSON_VALUE(goal, '$.away_player_11') > 0 THEN JSON_VALUE(goal, '$.away_player_11')\n            ELSE 0\n        END\n    ) AS total_away_goals_filipe_ferreira\nFROM \n    Match\nJOIN \n    Player p1 ON p1.player_name = 'Daan Smith'\nJOIN \n    Player p2 ON p2.player_name = 'Filipe Ferreira';\t----- bird -----\teuropean_football_2",
    "1121": "with the `Player` table to get the birth year of each player.\n2. Filter only those players who are 30 or younger.\n3. Count the number of goals scored by those players in the `goal` field.\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT COUNT(*) AS total_home_goals_by_young_players\nFROM Match\nWHERE goal IS NOT NULL\n  AND JSONEXTRACT(goal, '$.team') = 'home'\n  AND (\n    JSONEXTRACT(goal, '$.scorer') = home_player_1\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_2\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_3\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_4\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_5\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_6\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_7\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_8\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_9\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_10\n    OR JSONEXTRACT(goal, '$.scorer') = home_player_11\n  )\n  AND EXISTS (\n    SELECT 1\n    FROM Player\n    WHERE Player.player_api_id = JSONEXTRACT(goal, '$.scorer')\n      AND strftime('%Y', date) - strftime('%Y', Player.birthday) <= 30\n  );\t----- bird -----\teuropean_football_2",
    "1122": "SELECT p.player_name, pa.strength\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nORDER BY pa.strength DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1123": "SELECT p.player_name, pa.potential\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.potential = (\n    SELECT MAX(potential)\n    FROM Player_Attributes\n);\t----- bird -----\teuropean_football_2",
    "1124": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.attacking_work_rate = 'High';\t----- bird -----\teuropean_football_2",
    "1125": "SELECT p.player_name, p.birthday\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.finishing = 1\nORDER BY p.birthday ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1126": "SELECT player_name\nFROM Player\nJOIN Country ON Player.country_id = Country.id\nWHERE Country.name = 'Belgium';\t----- bird -----\teuropean_football_2",
    "1127": "SELECT DISTINCT\n    p.player_name,\n    p.player_api_id,\n    pa.vision,\n    c.name AS country_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nJOIN Match m ON m.home_player_1 = p.player_api_id\n             OR m.home_player_2 = p.player_api_id\n             OR m.home_player_3 = p.player_api_id\n             OR m.home_player_4 = p.player_api_id\n             OR m.home_player_5 = p.player_api_id\n             OR m.home_player_6 = p.player_api_id\n             OR m.home_player_7 = p.player_api_id\n             OR m.home_player_8 = p.player_api_id\n             OR m.home_player_9 = p.player_api_id\n             OR m.home_player_10 = p.player_api_id\n             OR m.home_player_11 = p.player_api_id\n             OR m.away_player_1 = p.player_api_id\n             OR m.away_player_2 = p.player_api_id\n             OR m.away_player_3 = p.player_api_id\n             OR m.away_player_4 = p.player_api_id\n             OR m.away_player_5 = p.player_api_id\n             OR m.away_player_6 = p.player_api_id\n             OR m.away_player_7 = p.player_api_id\n             OR m.away_player_8 = p.player_api_id\n             OR m.away_player_9 = p.player_api_id\n             OR m.away_player_10 = p.player_api_id\n             OR m.away_player_11 = p.player_api_id\nJOIN League l ON m.league_id = l.id\nJOIN Country c ON l.country_id = c.id\nWHERE pa.vision >= 90;\t----- bird -----\teuropean_football_2",
    "1128": "SELECT \n    c.name AS country_name,\n    AVG(p.weight) AS average_weight\nFROM \n    Player p\nJOIN \n    Match m\n    ON p.player_api_id IN (\n        m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5,\n        m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11,\n        m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5,\n        m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11\n    )\nJOIN \n    Team t\n    ON t.team_api_id = m.home_team_api_id OR t.team_api_id = m.away_team_api_id\nJOIN \n    League l\n    ON l.id = m.league_id\nJOIN \n    Country c\n    ON c.id = l.country_id\nGROUP BY \n    c.name\nORDER BY \n    average_weight DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1129": "SELECT t.team_long_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE ta.buildUpPlaySpeedClass = 'Slow';\t----- bird -----\teuropean_football_2",
    "1130": "SELECT DISTINCT t.team_short_name\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE ta.chanceCreationPassingClass IN ('Normal', 'Low');\t----- bird -----\teuropean_football_2",
    "1131": "SELECT AVG(p.height) AS average_height\nFROM Player p\nWHERE p.player_api_id IN (\n    SELECT home_player_1 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_2 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_3 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_4 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_5 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_6 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_7 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_8 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_9 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_10 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT home_player_11 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_1 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_2 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_3 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_4 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_5 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_6 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_7 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_8 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_9 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_10 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n    UNION\n    SELECT away_player_11 FROM Match WHERE country_id = (\n        SELECT id FROM Country WHERE name = 'Italy'\n    )\n);\t----- bird -----\teuropean_football_2",
    "1132": "SELECT player_name\nFROM Player\nWHERE height > 180\nORDER BY player_name ASC\nLIMIT 3;\t----- bird -----\teuropean_football_2",
    "1133": "SELECT COUNT(*) AS aaron_players_count\nFROM Player\nWHERE player_name LIKE 'Aaron%'\n  AND birthday > '1990-12-31';\t----- bird -----\teuropean_football_2",
    "1134": "SELECT \n    (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) -\n    (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS jumping_difference;\t----- bird -----\teuropean_football_2",
    "1135": "SELECT id, player_api_id, potential, preferred_foot\nFROM Player_Attributes\nWHERE preferred_foot = 'right'\n  AND attacking_work_rate IS NOT NULL\nORDER BY potential ASC\nLIMIT 5;\t----- bird -----\teuropean_football_2",
    "1136": "SELECT COUNT(*) AS player_count\nFROM Player_Attributes\nWHERE crossing = (\n    SELECT MAX(crossing)\n    FROM Player_Attributes\n)\nAND preferred_foot = 'left'\nAND attacking_work_rate != 'low';\t----- bird -----\teuropean_football_2",
    "1137": "SELECT \n    100.0 * COUNT(CASE WHEN pa.strength > 80 AND pa.stamina > 80 THEN 1 END) / COUNT(*) AS percentage\nFROM \n    Player p\nLEFT JOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id;\t----- bird -----\teuropean_football_2",
    "1138": "SELECT c.name AS country_name\nFROM League l\nJOIN Country c ON l.country_id = c.id\nWHERE l.name = 'Poland Ekstraklasa';\t----- bird -----\teuropean_football_2",
    "1139": "SELECT \n    home_team_goal, \n    away_team_goal\nFROM \n    Match\nWHERE \n    date = '2008-09-24'\n    AND league_id = (\n        SELECT id \n        FROM League \n        WHERE name = 'Belgian Jupiler League'\n    );\t----- bird -----\teuropean_football_2",
    "1140": "SELECT \n    pa.sprint_speed,\n    pa.agility,\n    pa.acceleration\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    p.player_name = 'Alexis Blin'\nORDER BY \n    pa.date DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1141": "SELECT buildUpPlaySpeedClass\nFROM Team_Attributes\nWHERE team_api_id = (\n    SELECT team_api_id\n    FROM Team\n    WHERE team_long_name = 'KSV Cercle Brugge'\n);\t----- bird -----\teuropean_football_2",
    "1142": "SELECT id FROM League WHERE name = 'Serie A';\t----- bird -----\teuropean_football_2",
    "1143": "SELECT MAX(home_team_goal) AS max_home_score\nFROM Match\nWHERE league_id = (\n    SELECT id\n    FROM League\n    WHERE name = 'Netherlands Eredivisie'\n);\t----- bird -----\teuropean_football_2",
    "1144": "SELECT pa.finishing, pa.curve\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.weight = (\n    SELECT MAX(weight)\n    FROM Player\n);\t----- bird -----\teuropean_football_2",
    "1145": "SELECT \n    L.name AS league_name,\n    COUNT(M.id) AS total_matches\nFROM \n    Match M\nJOIN \n    League L ON M.league_id = L.id\nWHERE \n    M.season = '2015/2016'\nGROUP BY \n    L.name\nORDER BY \n    total_matches DESC\nLIMIT 4;\t----- bird -----\teuropean_football_2",
    "1146": "SELECT \n    t.team_long_name AS away_team_name,\n    SUM(m.away_team_goal) AS total_away_goals\nFROM \n    Match m\nJOIN \n    Team t ON m.away_team_api_id = t.team_api_id\nGROUP BY \n    m.away_team_api_id, t.team_long_name\nORDER BY \n    total_away_goals DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "1147": "SELECT p.player_name, pa.strength\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.strength = (\n    SELECT MAX(strength)\n    FROM Player_Attributes\n);\t----- bird -----\teuropean_football_2",
    "1148": "SELECT \n    100.0 * \n    SUM(CASE WHEN pa.strength > 70 THEN 1 ELSE 0 END) / \n    COUNT(*) AS percentage_under_180_with_strength_over_70\nFROM \n    Player p\nJOIN \n    Player_Attributes pa\nON \n    p.player_api_id = pa.player_api_id\nWHERE \n    p.height < 180;\t----- bird -----\teuropean_football_2",
    "1149": "SELECT\n    'Inpatient' AS Type,\n    COUNT(*) AS MaleCount\nFROM Patient\nWHERE SEX = 'Male' AND Admission = 'Inpatient'\n\nUNION ALL\n\nSELECT\n    'Outpatient' AS Type,\n    COUNT(*) AS MaleCount\nFROM Patient\nWHERE SEX = 'Male' AND Admission = 'Outpatient';\t----- bird -----\tthrombosis_prediction",
    "1150": "SELECT \n    100.0 * \n    (\n        SELECT COUNT(*) \n        FROM Patient \n        WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930'\n    ) / \n    (\n        SELECT COUNT(*) \n        FROM Patient \n        WHERE SEX = 'F'\n    ) AS percentage_female_born_after_1930;\t----- bird -----\tthrombosis_prediction",
    "1151": "SELECT \n    100.0 * SUM(CASE WHEN Admission = 'Inpatient' THEN 1 ELSE 0 END) / COUNT(*) AS InpatientPercentage\nFROM Patient\nWHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';\t----- bird -----\tthrombosis_prediction",
    "1152": "SELECT\n    COUNT(CASE WHEN Admission = 'Outpatient' THEN 1 END) AS OutpatientCount,\n    COUNT(CASE WHEN Admission = 'Inpatient' THEN 1 END) AS InpatientCount,\n    ROUND(\n        (COUNT(CASE WHEN Admission = 'Outpatient' THEN 1 END) * 1.0) / \n        NULLIF(COUNT(CASE WHEN Admission = 'Inpatient' THEN 1 END), 0), \n        2\n    ) AS OutpatientToInpatientRatio\nFROM Patient\nWHERE Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "1153": "with. List all the date of laboratory tests done for this patient.**\n\nWe need to:\n\n1. **Get the diagnosis** of the patient with ID `30609` from the `Patient` table.\n2. **List all the dates** of laboratory tests for the same patient from the `Laboratory` table.\n\n---\n\n### \u2705 Step-by-step SQL Query:\n\n```sql\n-- Get the diagnosis of patient 30609\nSELECT Diagnosis\nFROM Patient\nWHERE ID = 30609;\t----- bird -----\tthrombosis_prediction",
    "1154": "SELECT \n    P.SEX,\n    P.Birthday,\n    E.`Examination Date`,\n    E.Symptoms\nFROM \n    Patient P\nLEFT JOIN \n    Examination E ON P.ID = E.ID\nWHERE \n    P.ID = 163109;\t----- bird -----\tthrombosis_prediction",
    "1155": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.LDH < 100 OR l.LDH > 250;\t----- bird -----\tthrombosis_prediction",
    "1156": "SELECT \n    p.ID,\n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS Age\nFROM \n    Patient p\nJOIN \n    Examination e ON p.ID = e.ID\nWHERE \n    e.LAC = 'Positive' OR \n    e.KCT = 'Positive' OR \n    e.RVVT = 'Positive';\t----- bird -----\tthrombosis_prediction",
    "1157": "SELECT \n    p.ID,\n    p.SEX,\n    p.Diagnosis\nFROM \n    Patient p\nJOIN \n    Examination e ON p.ID = e.ID\nWHERE \n    e.Thrombosis = 3;\t----- bird -----\tthrombosis_prediction",
    "1158": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE strftime('%Y', p.Birthday) = '1937'\n  AND l.`T-CHO` >= 200;\t----- bird -----\tthrombosis_prediction",
    "1159": "SELECT \n    p.ID,\n    p.SEX,\n    p.Diagnosis\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.ALB < 3.5;\t----- bird -----\tthrombosis_prediction",
    "1160": "SELECT \n    100.0 * COUNT(CASE WHEN TP < 6.0 OR TP > 8.0 THEN 1 END) / COUNT(*) AS percentage_abnormal_TP\nFROM (\n    SELECT DISTINCT p.ID\n    FROM Patient p\n    JOIN Laboratory l ON p.ID = l.ID\n    WHERE p.SEX = 'F'\n) AS female_patients_with_lab;\t----- bird -----\tthrombosis_prediction",
    "1161": "SELECT AVG(`aCL IgG`) AS Average_aCL_IgG\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE \n    Admission = 'In-patient' AND\n    strftime('%Y', 'now') - strftime('%Y', Birthday) >= 50;\t----- bird -----\tthrombosis_prediction",
    "1162": "SELECT COUNT(*) AS FemaleOutpatientCount\nFROM Patient\nWHERE SEX = 'F'\n  AND strftime('%Y', `First Date`) = '1997'\n  AND Admission = 'Outpatient';\t----- bird -----\tthrombosis_prediction",
    "1163": "SELECT \n    MIN(strftime('%Y', `First Date`) - strftime('%Y', Birthday)) AS YoungestAge\nFROM \n    Patient\nWHERE \n    `First Date` IS NOT NULL \n    AND Birthday IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1164": "SELECT COUNT(*) AS FemaleCount\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Examination\n    WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'\n      AND Thrombosis = (\n          SELECT MAX(Thrombosis)\n          FROM Examination\n          WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'\n      )\n)\nAND SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "1165": "SELECT \n    MAX(julianday('now') - julianday(P.Birthday) / 365.25) - \n    MIN(julianday('now') - julianday(P.Birthday) / 365.25) AS AgeGap\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    L.TG < 150;\t----- bird -----\tthrombosis_prediction",
    "1166": "SELECT \n    e.Symptoms,\n    e.Diagnosis\nFROM \n    Patient p\nJOIN \n    Examination e ON p.ID = e.ID\nWHERE \n    p.Birthday = (\n        SELECT MAX(Birthday)\n        FROM Patient\n    );\t----- bird -----\tthrombosis_prediction",
    "1167": "SELECT AVG(monthly_patient_count) AS average_male_patients_per_month\nFROM (\n    SELECT strftime('%m', Date) AS month,\n           COUNT(DISTINCT Patient.ID) AS monthly_patient_count\n    FROM Laboratory\n    JOIN Patient ON Laboratory.ID = Patient.ID\n    WHERE Patient.SEX = 'M'\n      AND Date BETWEEN '1998-01-01' AND '1998-12-31'\n    GROUP BY month\n) AS monthly_counts;\t----- bird -----\tthrombosis_prediction",
    "1168": "SELECT \n    L.Date AS LabDate,\n    P.`First Date` AS AdmissionDate,\n    (strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday) \n     - CASE \n         WHEN strftime('%m-%d', P.`First Date`) < strftime('%m-%d', P.Birthday) THEN 1 \n         ELSE 0 \n       END) AS AgeAtAdmission\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.Diagnosis = 'SJS'\n    AND P.ID = (\n        SELECT P2.ID\n        FROM Patient P2\n        WHERE P2.Diagnosis = 'SJS'\n        ORDER BY \n            (strftime('%Y', P2.`First Date`) - strftime('%Y', P2.Birthday) \n             - CASE \n                 WHEN strftime('%m-%d', P2.`First Date`) < strftime('%m-%d', P2.Birthday) THEN 1 \n                 ELSE 0 \n               END) ASC\n        LIMIT 1\n    )\nORDER BY \n    L.Date ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1169": "SELECT\n    COUNT(CASE WHEN p.SEX = 'M' AND l.UA > 7.0 THEN 1 END) * 1.0 / \n    COUNT(CASE WHEN p.SEX = 'F' AND l.UA > 6.0 THEN 1 END) AS MaleToFemaleRatio\nFROM\n    Patient p\nJOIN\n    Laboratory l ON p.ID = l.ID\nWHERE\n    (p.SEX = 'M' AND l.UA > 7.0) OR\n    (p.SEX = 'F' AND l.UA > 6.0);\t----- bird -----\tthrombosis_prediction",
    "1170": "SELECT COUNT(*) AS PatientsWithoutExamWithinYear\nFROM Patient p\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Examination e\n    WHERE e.ID = p.ID\n      AND e.`Examination Date` <= DATE(p.`First Date`, '+1 year')\n);\t----- bird -----\tthrombosis_prediction",
    "1171": "SELECT COUNT(DISTINCT p.ID) AS Underage_Patients_Count\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE \n    strftime('%Y', e.`Examination Date`) BETWEEN 1990 AND 1993\n    AND (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.Birthday)) < 18;\t----- bird -----\tthrombosis_prediction",
    "1172": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithElevatedTBIL\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'Male' AND l.`T-BIL` > 1.2;\t----- bird -----\tthrombosis_prediction",
    "1173": "SELECT p.Diagnosis, COUNT(*) AS PatientCount\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.Date BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY p.Diagnosis\nORDER BY PatientCount DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1174": "SELECT \n    AVG(\n        CAST(\n            strftime('%Y', '1999-12-31') - strftime('%Y', p.Birthday) \n            + \n            CASE \n                WHEN strftime('%m-%d', p.Birthday) <= '12-31' THEN 0 \n                ELSE 1 \n            END\n        AS INTEGER)\n    ) AS average_age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.Date BETWEEN '1991-10-01' AND '1991-10-31';\t----- bird -----\tthrombosis_prediction",
    "1175": "SELECT \n    P.ID,\n    (strftime('%Y', L.Date) - strftime('%Y', P.Birthday)) - \n    (strftime('%m-%d', L.Date) < strftime('%m-%d', P.Birthday)) AS Age,\n    P.Diagnosis\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    L.HGB = (\n        SELECT MAX(HGB)\n        FROM Laboratory\n        WHERE HGB IS NOT NULL\n    )\n    AND P.Birthday IS NOT NULL\n    AND L.Date IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1176": "SELECT ANA\nFROM Examination\nWHERE ID = 3605340\n  AND `Examination Date` = '1996-12-02';\t----- bird -----\tthrombosis_prediction",
    "1177": "SELECT \n    ID, \n    Date, \n    `T-CHO`, \n    CASE \n        WHEN `T-CHO` < 200 THEN 'Normal'\n        WHEN `T-CHO` BETWEEN 200 AND 239 THEN 'Borderline High'\n        WHEN `T-CHO` >= 240 THEN 'High'\n        ELSE 'Unknown'\n    END AS Cholesterol_Status\nFROM \n    Laboratory\nWHERE \n    ID = 2927464 \n    AND Date = '1995-09-04';\t----- bird -----\tthrombosis_prediction",
    "1178": "SELECT MIN(`First Date`) AS First_Aortitis_Date\n   FROM Patient\n   WHERE Diagnosis = 'AORTITIS';\t----- bird -----\tthrombosis_prediction",
    "1179": "SELECT ID\n   FROM Examination\n   WHERE Diagnosis = 'SLE' AND `Examination Date` = '1994-02-19';\t----- bird -----\tthrombosis_prediction",
    "1180": "SELECT P.SEX\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.Date = '1992-06-12'\n  AND L.GPT = 9;\t----- bird -----\tthrombosis_prediction",
    "1181": "SELECT \n    (julianday('1991-10-21') - julianday(P.Birthday)) / 365.25 AS Age\nFROM \n    Laboratory L\nJOIN \n    Patient P ON L.ID = P.ID\nWHERE \n    L.Date = '1991-10-21' AND L.UA = 8.4;\t----- bird -----\tthrombosis_prediction",
    "1182": "SELECT COUNT(*) AS Total_Lab_Tests_1995\nFROM Laboratory\nWHERE ID = (\n    SELECT ID\n    FROM Patient\n    WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS'\n)\n  AND strftime('%Y', Date) = '1995';\t----- bird -----\tthrombosis_prediction",
    "1183": "SELECT p.Diagnosis AS Original_Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Diagnosis = 'SLE'\n  AND e.`Examination Date` = '1997-01-27';\t----- bird -----\tthrombosis_prediction",
    "1184": "SELECT e.Symptoms\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Birthday = '1959-03-01'\n  AND e.`Examination Date` = '1993-09-27';\t----- bird -----\tthrombosis_prediction",
    "1185": "SELECT\n    (nov.T_CHO - dec.T_CHO) * 100.0 / nov.T_CHO AS decrease_rate\nFROM\n    (SELECT T_CHO\n     FROM Laboratory\n     JOIN Patient ON Laboratory.ID = Patient.ID\n     WHERE Patient.Birthday = '1959-02-18'\n       AND Laboratory.Date BETWEEN '1981-11-01' AND '1981-11-30'\n     LIMIT 1) AS nov,\n    (SELECT T_CHO\n     FROM Laboratory\n     JOIN Patient ON Laboratory.ID = Patient.ID\n     WHERE Patient.Birthday = '1959-02-18'\n       AND Laboratory.Date BETWEEN '1981-12-01' AND '1981-12-31'\n     LIMIT 1) AS dec;\t----- bird -----\tthrombosis_prediction",
    "1186": "SELECT DISTINCT ID\nFROM Examination\nWHERE Diagnosis = 'Behcet'\n  AND `Examination Date` BETWEEN '1970-01-01' AND '1997-12-31';\t----- bird -----\tthrombosis_prediction",
    "1187": "SELECT DISTINCT ID\nFROM Laboratory\nWHERE Date BETWEEN '1987-07-06' AND '1996-01-31'\n  AND GPT > 30\n  AND ALB < 4;\t----- bird -----\tthrombosis_prediction",
    "1188": "SELECT ID\nFROM Patient\nWHERE SEX = 'F'\n  AND strftime('%Y', Birthday) = '1964'\n  AND Admission IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1189": "SELECT COUNT(*) AS PatientCount\nFROM Examination\nWHERE Thrombosis = 2\n  AND `ANA Pattern` = 'S'\n  AND `aCL IgM` > (\n    SELECT 1.2 * AVG(`aCL IgM`)\n    FROM Examination\n    WHERE Thrombosis = 2\n      AND `ANA Pattern` = 'S'\n  );\t----- bird -----\tthrombosis_prediction",
    "1190": "SELECT \n    100.0 * COUNT(CASE WHEN UA < 2.4 THEN 1 END) / COUNT(*) AS percentage\nFROM (\n    SELECT DISTINCT ID\n    FROM Laboratory\n    WHERE U-PRO IN ('negative', '1+')\n) AS NormalProteinuria;\t----- bird -----\tthrombosis_prediction",
    "1191": "SELECT\n    100.0 * COUNT(CASE WHEN Patient.Diagnosis = 'BEHCET' THEN 1 END) / COUNT(*) AS percentage\nFROM\n    Patient\nWHERE\n    Patient.SEX = 'Male'\n    AND strftime('%Y', Patient.`First Date`) = '1981';\t----- bird -----\tthrombosis_prediction",
    "1192": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = 'Outpatient'\n  AND l.Date BETWEEN '1991-10-01' AND '1991-10-31'\n  AND l.`T-BIL` BETWEEN 0.1 AND 1.2;\t----- bird -----\tthrombosis_prediction",
    "1193": "SELECT COUNT(DISTINCT P.ID) AS FemaleCount\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.\"ANA Pattern\" != 'P only'\n  AND P.SEX = 'F'\n  AND strftime('%Y', P.Birthday) BETWEEN '1980' AND '1989';\t----- bird -----\tthrombosis_prediction",
    "1194": "SELECT p.SEX\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Diagnosis = 'PSS'\n  AND l.CRP = '2+'\n  AND l.CRE = 1\n  AND l.LDH = 123;\t----- bird -----\tthrombosis_prediction",
    "1195": "SELECT AVG(L.ALB) AS Average_Albumin\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'F'\n  AND P.Diagnosis = 'SLE'\n  AND L.PLT > 400;\t----- bird -----\tthrombosis_prediction",
    "1196": "WITH SLE_Patients AS (\n    SELECT p.ID\n    FROM Patient p\n    WHERE p.Diagnosis = 'SLE'\n),\nSLE_Symptoms AS (\n    SELECT e.Symptoms\n    FROM Examination e\n    JOIN SLE_Patients sp ON e.ID = sp.ID\n    WHERE e.Symptoms IS NOT NULL\n),\nSplit_Symptoms AS (\n    SELECT \n        TRIM(value) AS Symptom\n    FROM SLE_Symptoms\n    JOIN json_each('[\"' || replace(Symptoms, ',', '\",\"') || '\"]') -- Split comma-separated string\n),\nSymptom_Counts AS (\n    SELECT Symptom, COUNT(*) AS Count\n    FROM Split_Symptoms\n    GROUP BY Symptom\n)\nSELECT Symptom, Count\nFROM Symptom_Counts\nORDER BY Count DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1197": "SELECT \n    `First Date`, \n    Diagnosis\nFROM \n    Patient\nWHERE \n    ID = 48473;\t----- bird -----\tthrombosis_prediction",
    "1198": "SELECT COUNT(DISTINCT p.ID) AS Female_APS_Patients\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.SEX = 'F' AND e.Diagnosis LIKE '%APS%';\t----- bird -----\tthrombosis_prediction",
    "1199": "SELECT COUNT(DISTINCT ID) AS PatientsWithAbnormalProtein\nFROM Laboratory\nWHERE Date BETWEEN '1997-01-01' AND '1997-12-31'\n  AND (TP < 6.0 OR TP > 8.3);\t----- bird -----\tthrombosis_prediction",
    "1200": "SELECT\n    COUNT(CASE WHEN Patient.Diagnosis LIKE '%SLE%' THEN 1 END) * 1.0 / COUNT(*) AS proportion_with_sle\nFROM\n    Laboratory\nJOIN\n    Patient ON Laboratory.ID = Patient.ID\nWHERE\n    Laboratory.PLT < 150000;\t----- bird -----\tthrombosis_prediction",
    "1201": "with RA are women?\"**, we need to:\n\n1. **Filter patients** who were born in 1980.\n2. **Filter those** who have a diagnosis of **RA** (Rheumatoid Arthritis).\n3. **Count how many of them are women**.\n4. **Calculate the percentage** of women among these patients.\n\nWe will use the `Patient` table for this.\n\n---\n\n### Step-by-step SQL:\n\n1. **Get all patients born in 1980 and diagnosed with RA**:\n   - Use `strftime('%Y', Birthday) = '1980'` to filter by year of birth.\n   - Use `Diagnosis = 'RA'` to filter by diagnosis.\n\n2. **Count total patients** in this group.\n\n3. **Count how many of them are women** (`SEX = 'F'`).\n\n4. **Calculate the percentage** using:\n   ```sql\n   (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0) / COUNT(*)\n   ```\n\n---\n\n### Final SQL Query:\n\n```sql\nSELECT \n    (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women\nFROM \n    Patient\nWHERE \n    strftime('%Y', Birthday) = '1980'\n    AND Diagnosis = 'RA';\t----- bird -----\tthrombosis_prediction",
    "1202": "SELECT COUNT(DISTINCT p.ID) AS Male_Behcet_NonInpatient\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE p.SEX = 'Male'\n  AND l.Date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND e.Diagnosis = 'Behcet'\n  AND (p.Admission IS NULL OR p.Admission != 'Inpatient');\t----- bird -----\tthrombosis_prediction",
    "1203": "SELECT COUNT(DISTINCT p.ID) AS Female_Patients_With_Low_WBC\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'F' AND l.WBC < 3.5;\t----- bird -----\tthrombosis_prediction",
    "1204": "SELECT \n    JULIANDAY(e.`Examination Date`) - JULIANDAY(p.`First Date`) AS Days_Between\nFROM \n    Patient p\nJOIN \n    Examination e ON p.ID = e.ID\nWHERE \n    p.ID = 821298;\t----- bird -----\tthrombosis_prediction",
    "1205": "SELECT \n    L.UA,\n    P.SEX,\n    CASE\n        WHEN P.SEX = 'Male' AND L.UA BETWEEN 3.4 AND 7.0 THEN 'Within Normal Range'\n        WHEN P.SEX = 'Female' AND L.UA BETWEEN 2.4 AND 6.0 THEN 'Within Normal Range'\n        ELSE 'Outside Normal Range'\n    END AS UricAcidStatus\nFROM \n    Laboratory L\nJOIN \n    Patient P ON L.ID = P.ID\nWHERE \n    L.ID = 57266;\t----- bird -----\tthrombosis_prediction",
    "1206": "SELECT Date\nFROM Laboratory\nWHERE ID = 48473\n  AND GOT > 34;\t----- bird -----\tthrombosis_prediction",
    "1207": "SELECT \n    P.SEX,\n    P.Birthday\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    strftime('%Y', L.Date) = '1994'\n    AND L.GOT BETWEEN 0 AND 35;\t----- bird -----\tthrombosis_prediction",
    "1208": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'Male'\n  AND l.GPT > 40;\t----- bird -----\tthrombosis_prediction",
    "1209": "SELECT \n    P.ID,\n    P.Diagnosis,\n    P.Birthday,\n    L.Date AS LabDate,\n    L.GPT\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    L.GPT > 40\nORDER BY \n    P.Birthday ASC;\t----- bird -----\tthrombosis_prediction",
    "1210": "SELECT AVG(LDH) AS Average_LDH\nFROM Laboratory\nWHERE LDH BETWEEN 100 AND 250;\t----- bird -----\tthrombosis_prediction",
    "1211": "SELECT \n    Lab.ID,\n    (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age\nFROM \n    Laboratory Lab\nJOIN \n    Patient P ON Lab.ID = P.ID\nWHERE \n    Lab.LDH BETWEEN 200 AND 400;\t----- bird -----\tthrombosis_prediction",
    "1212": "SELECT \n    p.ID,\n    p.Admission\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.ALP < 120; -- Assuming normal range for ALP is < 120 U/L;\t----- bird -----\tthrombosis_prediction",
    "1213": "SELECT \n    p.ID,\n    l.ALP,\n    CASE \n        WHEN l.ALP BETWEEN 44 AND 147 THEN 'Within normal range'\n        ELSE 'Outside normal range'\n    END AS ALP_Status\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.Birthday = '1982-04-01';\t----- bird -----\tthrombosis_prediction",
    "1214": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.TP < 6.0;\t----- bird -----\tthrombosis_prediction",
    "1215": "SELECT \n    P.ID,\n    P.SEX,\n    L.Date,\n    L.TP,\n    (L.TP - 8.3) AS TP_Deviation\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.SEX = 'F' \n    AND L.TP > 8.3;\t----- bird -----\tthrombosis_prediction",
    "1216": "SELECT \n    Patient.ID,\n    Patient.SEX,\n    Patient.Birthday,\n    Laboratory.ALB\nFROM \n    Patient\nJOIN \n    Laboratory ON Patient.ID = Laboratory.ID\nWHERE \n    Patient.SEX = 'Male'\n    AND (Laboratory.ALB < 3.5 OR Laboratory.ALB > 5.0)\nORDER BY \n    Patient.Birthday DESC;\t----- bird -----\tthrombosis_prediction",
    "1217": "SELECT \n    p.ID,\n    p.Birthday,\n    l.ALB,\n    CASE \n        WHEN l.ALB BETWEEN 3.5 AND 5.0 THEN 'Within Normal Range'\n        ELSE 'Outside Normal Range'\n    END AS Albumin_Status\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    strftime('%Y', p.Birthday) = '1982';\t----- bird -----\tthrombosis_prediction",
    "1218": "SELECT\n    100.0 * COUNT(CASE WHEN L.UA > 7.0 THEN 1 END) / COUNT(*) AS percentage_females_with_high_UA\nFROM\n    Patient P\nJOIN\n    Laboratory L ON P.ID = L.ID\nWHERE\n    P.SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "1219": "SELECT AVG(L.UA) AS Average_UA\nFROM Laboratory L\nINNER JOIN (\n    SELECT ID, MAX(Date) AS LatestDate\n    FROM Laboratory\n    GROUP BY ID\n) Latest ON L.ID = Latest.ID AND L.Date = Latest.LatestDate\nWHERE L.UA < 8.0;\t----- bird -----\tthrombosis_prediction",
    "1220": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.UN = 20;\t----- bird -----\tthrombosis_prediction",
    "1221": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.Diagnosis = 'RA'\n    AND l.UN BETWEEN 7 AND 20;\t----- bird -----\tthrombosis_prediction",
    "1222": "SELECT COUNT(*) AS MalePatientsWithAbnormalCRE\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'Male'\n  AND (l.CRE < 0.7 OR l.CRE > 1.3);\t----- bird -----\tthrombosis_prediction",
    "1223": "SELECT \n    p.SEX,\n    COUNT(*) AS abnormal_creatinine_count\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    (p.SEX = 'Male' AND (l.CRE < 0.6 OR l.CRE > 1.2))\n    OR \n    (p.SEX = 'Female' AND (l.CRE < 0.5 OR l.CRE > 1.1))\nGROUP BY \n    p.SEX;\t----- bird -----\tthrombosis_prediction",
    "1224": "SELECT \n    Lab.ID,\n    Pat.SEX,\n    Pat.Birthday,\n    Lab.`T-BIL`\nFROM \n    Laboratory Lab\nJOIN \n    Patient Pat ON Lab.ID = Pat.ID\nWHERE \n    Lab.`T-BIL` = (\n        SELECT MAX(`T-BIL`) FROM Laboratory\n    );\t----- bird -----\tthrombosis_prediction",
    "1225": "SELECT \n    P.SEX,\n    P.ID AS PatientID,\n    L.Date,\n    L.`T-BIL`\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    L.`T-BIL` < 0.1 OR L.`T-BIL` > 1.2\nORDER BY \n    P.SEX, P.ID, L.Date;\t----- bird -----\tthrombosis_prediction",
    "1226": "SELECT \n    p.ID,\n    p.Birthday,\n    l.T_CHO\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.T_CHO = (\n        SELECT MAX(T_CHO) \n        FROM Laboratory\n        WHERE T_CHO IS NOT NULL\n    )\nORDER BY \n    p.Birthday ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1227": "SELECT AVG(julianday(COALESCE(P.`First Date`, 'now')) - julianday(P.Birthday)) / 365.25 AS AverageAge\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'Male'\n  AND L.`T-CHO` > 200;\t----- bird -----\tthrombosis_prediction",
    "1228": "SELECT \n    P.ID AS PatientID,\n    P.Diagnosis AS PatientDiagnosis,\n    L.Date AS LabDate,\n    L.TG AS Triglyceride\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    L.TG > 150;\t----- bird -----\tthrombosis_prediction",
    "1229": "with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?\"**\n\nWe need to:\n\n1. **Identify the normal range for triglycerides (TG):**  \n   - A normal TG level is generally considered to be **< 150 mg/dL**.\n   - So, **TG > 150** is considered **beyond the normal range**.\n\n2. **Calculate the age of the patient:**  \n   - We can calculate the age using the `Birthday` field in the `Patient` table.\n   - In SQLite, we can use the `strftime` function to get the age:  \n     ```sql\n     strftime('%Y', 'now') - strftime('%Y', Birthday)\n     ```\n\n3. **Join the `Patient` and `Laboratory` tables** on the `ID` field to get the `TG` value for each patient.\n\n4. **Filter patients with `TG > 150` and age > 50.**\n\n5. **Count the number of such patients.**\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT COUNT(*) AS Count\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG > 150\n  AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 50;\t----- bird -----\tthrombosis_prediction",
    "1230": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = 'outpatient'\n  AND l.CPK BETWEEN 26 AND 174;\t----- bird -----\tthrombosis_prediction",
    "1231": "SELECT COUNT(DISTINCT p.ID) AS Male_Patients_With_High_CPK\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'Male'\n  AND p.Birthday BETWEEN '1936-01-01' AND '1956-12-31'\n  AND l.CPK > 170;\t----- bird -----\tthrombosis_prediction",
    "1232": "SELECT \n    P.ID,\n    P.SEX,\n    (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    (L.GLU < 70 OR L.GLU > 100)  -- GLU not in normal range\n    AND L.`T-CHO` < 200;         -- T-CHO in normal range;\t----- bird -----\tthrombosis_prediction",
    "1233": "SELECT \n    p.ID,\n    l.GLU\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    YEAR(p.`First Date`) = 1991\n    AND l.GLU BETWEEN 70 AND 100;\t----- bird -----\tthrombosis_prediction",
    "1234": "SELECT \n    p.ID,\n    p.SEX,\n    p.Birthday,\n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) - \n     (strftime('%m-%d', 'now') < strftime('%m-%d', p.Birthday)) AS Age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.WBC < 4.0 OR l.WBC > 11.0\nGROUP BY \n    p.SEX\nORDER BY \n    p.SEX, Age ASC;\t----- bird -----\tthrombosis_prediction",
    "1235": "SELECT \n    p.ID,\n    p.Diagnosis,\n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS Age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.RBC < 4.0;\t----- bird -----\tthrombosis_prediction",
    "1236": "SELECT \n    P.ID,\n    P.SEX,\n    P.Birthday,\n    (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age,\n    L.RBC,\n    P.Admission\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.SEX = 'F'\n    AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50\n    AND L.RBC < 3.8;\t----- bird -----\tthrombosis_prediction",
    "1237": "SELECT DISTINCT p.ID, p.SEX\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = 'outpatient'\n  AND l.HGB < 12.0;\t----- bird -----\tthrombosis_prediction",
    "1238": "SELECT \n    p.ID,\n    p.SEX\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.Diagnosis = 'SLE'\n    AND l.HGB BETWEEN \n        CASE \n            WHEN p.SEX = 'Male' THEN 13.8 \n            WHEN p.SEX = 'Female' THEN 12.1 \n        END \n        AND \n        CASE \n            WHEN p.SEX = 'Male' THEN 17.2 \n            WHEN p.SEX = 'Female' THEN 15.1 \n        END\nORDER BY \n    p.Birthday ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1239": "SELECT \n    p.ID,\n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS Age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    (l.HCT < 35 OR l.HCT > 50)\nGROUP BY \n    p.ID\nHAVING \n    COUNT(*) >= 2;\t----- bird -----\tthrombosis_prediction",
    "1240": "SELECT AVG(HCT) AS Average_Low_HCT\nFROM Laboratory\nWHERE Date BETWEEN '1991-01-01' AND '1991-12-31'\n  AND HCT < 34.9;\t----- bird -----\tthrombosis_prediction",
    "1241": "SELECT\n    COUNT(DISTINCT CASE WHEN PLT < 150 THEN ID END) AS Low_Platelet_Count,\n    COUNT(DISTINCT CASE WHEN PLT > 450 THEN ID END) AS High_Platelet_Count\nFROM Laboratory;\t----- bird -----\tthrombosis_prediction",
    "1242": "SELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.Date BETWEEN '1984-01-01' AND '1984-12-31'\n  AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) < 50\n  AND Laboratory.PLT BETWEEN 150000 AND 450000;\t----- bird -----\tthrombosis_prediction",
    "1243": "SELECT \n    100.0 * COUNT(CASE WHEN l.PT < 10 OR l.PT > 13 THEN 1 END) / COUNT(*) AS percentage_abnormal_PT\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.SEX = 'F'\n    AND julianday('now') - julianday(p.Birthday) > 55 * 365.25;\t----- bird -----\tthrombosis_prediction",
    "1244": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.`First Date` > '1992-12-31'\n  AND l.PT BETWEEN 11.0 AND 13.5;\t----- bird -----\tthrombosis_prediction",
    "1245": "SELECT COUNT(*) AS Inactivated_Partial_Prothrombin_Time_Count\nFROM Laboratory\nWHERE Date > '1997-01-01'\n  AND APTT IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1246": "SELECT COUNT(DISTINCT e.ID) AS No_Thrombosis_Abnormal_APTT\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.APTT > 35  -- Assuming APTT > 35 is abnormal\n  AND e.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "1247": "SELECT COUNT(*) AS AbnormalFibrinogenCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'Male'\n  AND l.WBC BETWEEN 4.0 AND 10.0  -- Normal WBC range\n  AND (l.FG < 200 OR l.FG > 400); -- Abnormal fibrinogen;\t----- bird -----\tthrombosis_prediction",
    "1248": "SELECT COUNT(DISTINCT p.ID) AS AbnormalFibrinogenCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday > '1980-01-01'\n  AND (l.FG < 2.0 OR l.FG > 4.0);\t----- bird -----\tthrombosis_prediction",
    "1249": "SELECT DISTINCT p.Diagnosis\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.`U-PRO` IN ('1+', '2+', '3+', '4+');\t----- bird -----\tthrombosis_prediction",
    "1250": "SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE'\n  AND l.`U-PRO` IN ('-', 'Normal');\t----- bird -----\tthrombosis_prediction",
    "1251": "SELECT COUNT(DISTINCT ID) AS HighIgGCount\nFROM Laboratory\nWHERE IGG > 1500;\t----- bird -----\tthrombosis_prediction",
    "1252": "SELECT COUNT(DISTINCT e.ID) AS PatientsWithSymptoms\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.IGG BETWEEN 700 AND 1600  -- Assuming normal IgG range\n  AND e.Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1253": "SELECT P.Diagnosis\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.IGA BETWEEN 70 AND 400\nORDER BY L.IGA DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1254": "SELECT COUNT(DISTINCT p.ID) AS NormalIgAPatientsAfter1990\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.`First Date` > '1990-01-01'\n  AND l.IGA BETWEEN 70 AND 400;\t----- bird -----\tthrombosis_prediction",
    "1255": "SELECT P.Diagnosis, COUNT(*) AS PatientCount\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.IGM IS NOT NULL\nGROUP BY P.Diagnosis\nORDER BY PatientCount DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1256": "SELECT COUNT(*) AS PatientsWithoutLabData\nFROM Patient\nWHERE ID NOT IN (\n    SELECT DISTINCT ID\n    FROM Laboratory\n);\t----- bird -----\tthrombosis_prediction",
    "1257": "SELECT COUNT(DISTINCT Patient.ID) AS Count\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE (Laboratory.CRE < 0.6 OR Laboratory.CRE > 1.2)\n  AND (julianday('now') - julianday(Patient.Birthday)) / 365.25 < 70;\t----- bird -----\tthrombosis_prediction",
    "1258": "SELECT COUNT(DISTINCT ID) AS PatientCount\nFROM Laboratory\nWHERE RF IN ('negative', 'normal')\n  AND (PT IS NOT NULL OR APTT IS NOT NULL);\t----- bird -----\tthrombosis_prediction",
    "1259": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday > '1985-01-01'\n  AND l.RF IN ('negative', 'normal');\t----- bird -----\tthrombosis_prediction",
    "1260": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RF = 'Normal'\n  AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 60;\t----- bird -----\tthrombosis_prediction",
    "1261": "SELECT COUNT(DISTINCT p.ID) AS Normal_RF_No_Thrombosis_Count\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.RF IN ('negative', 'normal')  -- assuming these are the \"normal\" values\n  AND e.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "1262": "SELECT COUNT(DISTINCT e.ID) AS PatientCount\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.C3 BETWEEN 80 AND 160  -- Assuming normal C3 range\n  AND e.`ANA Pattern` = 'P';\t----- bird -----\tthrombosis_prediction",
    "1263": "SELECT E.ID\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nJOIN Laboratory L ON E.ID = L.ID\nWHERE L.HCT < 35 OR L.HCT > 50\nORDER BY \n    GREATEST(\n        COALESCE(E.`aCL IgG`, 0),\n        COALESCE(E.`aCL IgM`, 0),\n        COALESCE(E.`aCL IgA`, 0)\n    ) DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1264": "SELECT COUNT(DISTINCT p.ID) AS Normal_C4_Patients_With_Thrombosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Thrombosis = 1\n  AND l.C4 BETWEEN 10 AND 30;\t----- bird -----\tthrombosis_prediction",
    "1265": "SELECT COUNT(DISTINCT p.ID) AS NormalRNPAdmittedPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RNP = 'Normal'\n  AND p.Admission IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1266": "SELECT p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RNP IS NOT NULL\nORDER BY p.Birthday ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1267": "SELECT COUNT(*) AS PatientsWithoutThrombosis\nFROM Examination\nWHERE `SM` NOT IN ('positive', 'Positive')  -- assuming 'positive' means abnormal\n  AND Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "1268": "SELECT p.ID\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.SM = 'Positive'  -- assuming 'Positive' indicates abnormal\nORDER BY (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) ASC\nLIMIT 3;\t----- bird -----\tthrombosis_prediction",
    "1269": "SELECT DISTINCT ID\nFROM Examination\nWHERE `Examination Date` > '1997-01-01'\n  AND SC170 = 'normal';\t----- bird -----\tthrombosis_prediction",
    "1270": "SELECT COUNT(DISTINCT p.ID) AS Female_Patients_With_Normal_Scl70_No_Symptoms\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nLEFT JOIN Examination e ON p.ID = e.ID\nWHERE l.SC170 IN ('Negative', 'Normal')  -- assuming these are considered \"normal\"\n  AND p.SEX = 'F'\n  AND (e.Symptoms IS NULL OR e.Symptoms = '');\t----- bird -----\tthrombosis_prediction",
    "1271": "SELECT COUNT(DISTINCT ID) AS Normal_SSA_Patients_Before_2000\nFROM Laboratory\nWHERE SSA = 'negative' AND Date < '2000-01-01';\t----- bird -----\tthrombosis_prediction",
    "1272": "SELECT L.ID\nFROM Laboratory L\nWHERE L.SSA = 'positive'\nORDER BY L.Date ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1273": "SELECT COUNT(DISTINCT e.ID) AS Normal_SSB_SLE_Patients\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE e.Diagnosis = 'SLE'\n  AND (e.SSB IS NULL OR e.SSB = 'negative' OR e.SSB = 'normal');\t----- bird -----\tthrombosis_prediction",
    "1274": "SELECT COUNT(*) AS PatientsWithSymptoms\nFROM Examination\nWHERE `SSB` = 'normal'\n  AND Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1275": "SELECT COUNT(*) AS MaleCount\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.CENTROMEA = 'negative'\n  AND e.SSB = 'negative'\n  AND p.SEX = 'male';\t----- bird -----\tthrombosis_prediction",
    "1276": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.DNA = 'positive';\t----- bird -----\tthrombosis_prediction",
    "1277": "SELECT COUNT(DISTINCT L.ID) AS PatientsWithUnrecordedDNA\nFROM Laboratory L\nWHERE L.DNA IS NULL;\t----- bird -----\tthrombosis_prediction",
    "1278": "SELECT COUNT(DISTINCT p.ID) AS AdmittedPatientsWithNormalIGG\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGG BETWEEN 700 AND 1500  -- Assuming normal IGG range\n  AND p.Admission IS NOT NULL     -- Assuming non-null means admitted\n  AND p.Admission != '';          -- Exclude empty strings if any;\t----- bird -----\tthrombosis_prediction",
    "1279": "SELECT \n    (COUNT(DISTINCT CASE WHEN L.GOT > 40 THEN P.ID END) * 100.0 / COUNT(DISTINCT P.ID)) AS percentage_abnormal_got_with_sle\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "1280": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithNormalGOT\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'Male' AND l.GOT BETWEEN 0 AND 40;\t----- bird -----\tthrombosis_prediction",
    "1281": "SELECT P.Birthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.GOT > 40\nORDER BY P.Birthday DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1282": "SELECT p.Birthday, l.GPT\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.GPT <= 40\n  AND l.GPT IS NOT NULL\nORDER BY l.GPT DESC\nLIMIT 3;\t----- bird -----\tthrombosis_prediction",
    "1283": "SELECT COUNT(*) AS MaleCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GPT BETWEEN 0 AND 40\n  AND p.SEX = 'Male';\t----- bird -----\tthrombosis_prediction",
    "1284": "SELECT MIN(Date) AS First_Recorded_Date\nFROM Laboratory\nWHERE ID = (\n    SELECT ID\n    FROM Laboratory\n    WHERE LDH BETWEEN 100 AND 200\n    ORDER BY LDH DESC\n    LIMIT 1\n);\t----- bird -----\tthrombosis_prediction",
    "1285": "SELECT Date\nFROM Laboratory\nWHERE LDH > 245\nORDER BY Date DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1286": "SELECT COUNT(*) AS AdmittedPatientsWithHighALP\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.ALP > 150\n  AND p.Admission = 'Yes';\t----- bird -----\tthrombosis_prediction",
    "1287": "SELECT COUNT(DISTINCT ID) AS Normal_ALP_Patients\nFROM Laboratory\nWHERE ALP BETWEEN 44 AND 147;\t----- bird -----\tthrombosis_prediction",
    "1288": "SELECT DISTINCT P.Diagnosis\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.TP < 6.0;\t----- bird -----\tthrombosis_prediction",
    "1289": "SELECT COUNT(*) AS NormalTPCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SJS'\n  AND l.TP BETWEEN 6.0 AND 8.0;\t----- bird -----\tthrombosis_prediction",
    "1290": "SELECT E.`Examination Date`\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.ALB <= 5.0\n  AND L.ALB = (\n    SELECT MAX(ALB)\n    FROM Laboratory\n    WHERE ALB <= 5.0\n  );\t----- bird -----\tthrombosis_prediction",
    "1291": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithNormalALBandTP\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\n  AND l.ALB BETWEEN 3.5 AND 5.0\n  AND l.TP BETWEEN 6.0 AND 8.0;\t----- bird -----\tthrombosis_prediction",
    "1292": "SELECT \n    E.`aCL IgG`, \n    E.`aCL IgM`, \n    E.`aCL IgA`\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nLEFT JOIN \n    Examination E ON P.ID = E.ID\nWHERE \n    P.SEX = 'F'\n    AND L.UA < 7.0\n    AND L.UA = (\n        SELECT MAX(UA)\n        FROM Laboratory\n        WHERE ID IN (\n            SELECT ID\n            FROM Patient\n            WHERE SEX = 'F'\n        )\n        AND UA < 7.0\n    );\t----- bird -----\tthrombosis_prediction",
    "1293": "SELECT MAX(e.ANA) AS Max_ANA\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.CRE BETWEEN 0.6 AND 1.2;\t----- bird -----\tthrombosis_prediction",
    "1294": "SELECT E.ID\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nJOIN Laboratory L ON E.ID = L.ID\nWHERE L.CRE BETWEEN 0.5 AND 1.2\n  AND E.`aCL IgG` IS NOT NULL\nORDER BY E.`aCL IgG` DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1295": "SELECT COUNT(DISTINCT e.ID) AS Peripheral_ANA_Count\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.`T-BIL` >= 1.2\n  AND e.`ANA Pattern` = 'peripheral';\t----- bird -----\tthrombosis_prediction",
    "1296": "SELECT MAX(`T-BIL`) AS max_t_bil\nFROM Laboratory\nWHERE `T-BIL` < 1.2;\t----- bird -----\tthrombosis_prediction",
    "1297": "SELECT COUNT(DISTINCT p.ID) AS NegativeCoagulationCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.`T-CHO` >= 200\n  AND e.LAC IN ('Negative', 'negative');\t----- bird -----\tthrombosis_prediction",
    "1298": "SELECT COUNT(DISTINCT E.ID) AS PatientCount\nFROM Laboratory L\nJOIN Examination E ON L.ID = E.ID\nWHERE L.`T-CHO` < 200\n  AND E.`ANA Pattern` = 'P';\t----- bird -----\tthrombosis_prediction",
    "1299": "SELECT COUNT(DISTINCT e.ID) AS PatientsWithSymptoms\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.TG < 150\n  AND e.Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1300": "SELECT P.Diagnosis\nFROM Patient P\nJOIN (\n    SELECT L.ID\n    FROM Laboratory L\n    WHERE L.TG < 150\n    ORDER BY L.TG DESC\n    LIMIT 1\n) AS MaxTG ON P.ID = MaxTG.ID;\t----- bird -----\tthrombosis_prediction",
    "1301": "SELECT DISTINCT e.ID\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.Thrombosis = 0\n  AND l.CPK > 170;\t----- bird -----\tthrombosis_prediction",
    "1302": "SELECT COUNT(DISTINCT L.ID) AS PositiveCoagulationCount\nFROM Laboratory L\nWHERE L.CPK < 200\n  AND (\n    L.PT > 12.0\n    OR L.APTT > 35\n    OR (L.FG < 2.0 OR L.FG > 4.0)\n    OR L.PIC > 0\n    OR L.TAT > 0\n  );\t----- bird -----\tthrombosis_prediction",
    "1303": "SELECT MIN(P.Birthday) AS Oldest_Birthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.GLU > 140;\t----- bird -----\tthrombosis_prediction",
    "1304": "SELECT COUNT(DISTINCT p.ID) AS NormalGlucoseNoThrombosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE l.GLU BETWEEN 70 AND 100\n  AND e.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "1305": "SELECT COUNT(DISTINCT p.ID) AS NormalWBCPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission IS NOT NULL  -- Indicates the patient was admitted\n  AND l.WBC BETWEEN 4.0 AND 11.0;\t----- bird -----\tthrombosis_prediction",
    "1306": "SELECT COUNT(DISTINCT p.ID) AS NormalWBC_SLE_Patients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE'\n  AND l.WBC BETWEEN 4.0 AND 11.0;\t----- bird -----\tthrombosis_prediction",
    "1307": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RBC < 4.0 OR l.RBC > 5.5\n  AND p.Admission = 'outpatient';\t----- bird -----\tthrombosis_prediction",
    "1308": "with a normal platelet level** from the `Laboratory` table.\n2. **Check if those patients have symptoms** recorded in the `Examination` table.\n3. **Count how many of them have symptoms**.\n\n---\n\n### Step 1: Define \"Normal Platelet Level\"\n\nWe need to define what is considered a **normal platelet level**. In general, a normal platelet count is between **150,000 and 450,000 per microliter (150 to 450 in units of 10^3/\u03bcL)**. So we'll use:\n\n```sql\nPLT BETWEEN 150 AND 450\n```\n\n---\n\n### Step 2: Join `Laboratory` and `Examination` on `ID`\n\nWe will join the two tables on the `ID` field to get the patients who have both lab results and symptoms.\n\n---\n\n### Step 3: Count patients with symptoms\n\nWe will count how many of those patients have a non-null or non-empty `Symptoms` field in the `Examination` table.\n\n---\n\n### Final SQL Query:\n\n```sql\nSELECT COUNT(DISTINCT e.ID) AS PatientsWithSymptoms\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.PLT BETWEEN 150 AND 450\n  AND e.Symptoms IS NOT NULL\n  AND e.Symptoms <> '';\t----- bird -----\tthrombosis_prediction",
    "1309": "with MCTD** (Mixed Connective Tissue Disease).\n\n---\n\n### **Step 2: Identify the relevant tables**\n- **PLT (Platelet count)** is in the **Laboratory** table.\n- **Diagnosis** is in the **Examination** table.\n\n---\n\n### **Step 3: Determine the normal range for PLT**\nThe **normal range for platelet count (PLT)** is generally:\n- **150,000 to 450,000 / \u00b5L** (or 150 to 450 in units of 10\u00b3/\u00b5L).\n\nSo we will filter for:\n```sql\nPLT BETWEEN 150 AND 450\n```\n\n---\n\n### **Step 4: Identify patients diagnosed with MCTD**\n- The **Diagnosis** field in the **Examination** table contains the diagnosis.\n- We will filter for:\n```sql\nDiagnosis = 'MCTD'\n```\n\n---\n\n### **Step 5: Join the tables**\nWe need to **join the Laboratory and Examination tables** using the **ID** field (patient ID).\n\n---\n\n### **Step 6: Final SQL Query**\nNow, putting it all together:\n\n```sql\nSELECT L.ID, L.Date, L.PLT\nFROM Laboratory L\nJOIN Examination E ON L.ID = E.ID\nWHERE L.PLT BETWEEN 150 AND 450\n  AND E.Diagnosis = 'MCTD';\t----- bird -----\tthrombosis_prediction",
    "1310": "SELECT AVG(L.PT) AS Average_PT\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'Male'\n  AND L.PT BETWEEN 10 AND 13;\t----- bird -----\tthrombosis_prediction",
    "1311": "SELECT COUNT(DISTINCT e.ID) AS PatientCount\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.Thrombosis = 1\n  AND l.PT BETWEEN 10 AND 13;\t----- bird -----\tthrombosis_prediction",
    "1312": "SELECT m.first_name, m.last_name, maj.major_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE m.first_name = 'Angela' AND m.last_name = 'Sanders';\t----- bird -----\tstudent_club",
    "1313": "SELECT COUNT(*) AS engineering_students\nFROM member\nWHERE link_to_major IN (\n    SELECT major_id\n    FROM major\n    WHERE college = 'College of Engineering'\n);\t----- bird -----\tstudent_club",
    "1314": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.department = 'Art and Design';\t----- bird -----\tstudent_club",
    "1315": "SELECT COUNT(DISTINCT link_to_member) AS number_of_attendees\nFROM attendance\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer';\t----- bird -----\tstudent_club",
    "1316": "SELECT m.phone\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer'\n  AND m.position = 'Student_Club';\t----- bird -----\tstudent_club",
    "1317": "SELECT COUNT(*) AS medium_tshirt_count\nFROM attendance\nJOIN member ON attendance.link_to_member = member.member_id\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer'\n  AND member.position = 'Student_Club'\n  AND member.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "1318": "SELECT \n    e.event_id,\n    e.event_name,\n    COUNT(a.link_to_member) AS attendance_count\nFROM \n    event e\nJOIN \n    attendance a ON e.event_id = a.link_to_event\nGROUP BY \n    e.event_id, e.event_name\nORDER BY \n    attendance_count DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1319": "SELECT m.college\nFROM member\nJOIN major m ON member.link_to_major = m.major_id\nWHERE member.position = 'Vice President';\t----- bird -----\tstudent_club",
    "1320": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';\t----- bird -----\tstudent_club",
    "1321": "SELECT COUNT(*) AS num_events\nFROM attendance\nJOIN member ON attendance.link_to_member = member.member_id\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE member.first_name = 'Sacha'\n  AND member.last_name = 'Harrison'\n  AND event.event_name = 'Student_Club'\n  AND event.event_date LIKE '2019%';\t----- bird -----\tstudent_club",
    "1322": "SELECT COUNT(*) AS meeting_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id\nHAVING COUNT(a.link_to_member) > 10\nAND e.type = 'meeting';\t----- bird -----\tstudent_club",
    "1323": "SELECT link_to_event, COUNT(*) AS attendance_count\n   FROM attendance\n   GROUP BY link_to_event\n   HAVING COUNT(*) > 20;\t----- bird -----\tstudent_club",
    "1324": "SELECT AVG(attendee_count) AS average_attendance\nFROM (\n    SELECT e.event_id, COUNT(a.link_to_member) AS attendee_count\n    FROM event e\n    JOIN attendance a ON e.event_id = a.link_to_event\n    WHERE e.type = 'meeting' AND strftime('%Y', e.event_date) = '2020'\n    GROUP BY e.event_id\n);\t----- bird -----\tstudent_club",
    "1325": "SELECT expense_id, expense_description, cost\nFROM expense\nORDER BY cost DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1326": "SELECT COUNT(*) AS environmental_engineering_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Environmental Engineering';\t----- bird -----\tstudent_club",
    "1327": "SELECT m.first_name, m.last_name\nFROM attendance a\nJOIN member m ON a.link_to_member = m.member_id\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Laugh Out Loud';\t----- bird -----\tstudent_club",
    "1328": "SELECT m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Law and Constitutional Studies';\t----- bird -----\tstudent_club",
    "1329": "SELECT z.county\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';\t----- bird -----\tstudent_club",
    "1330": "SELECT member_id FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt';\t----- bird -----\tstudent_club",
    "1331": "SELECT member_id FROM member WHERE position = 'Vice President';\t----- bird -----\tstudent_club",
    "1332": "SELECT SUM(e.cost) AS total_spent_on_food\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'September Meeting'\n  AND b.category = 'food';\t----- bird -----\tstudent_club",
    "1333": "SELECT \n    z.city, \n    z.state\nFROM \n    member m\nJOIN \n    zip_code z ON m.zip = z.zip_code\nWHERE \n    m.position = 'President';\t----- bird -----\tstudent_club",
    "1334": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE z.state = 'Illinois';\t----- bird -----\tstudent_club",
    "1335": "SELECT SUM(e.cost) AS total_advertisement_cost\nFROM event evt\nJOIN budget b ON evt.event_id = b.link_to_event\nJOIN expense e ON b.budget_id = e.link_to_budget\nWHERE evt.event_name = 'September Meeting'\n  AND b.category = 'advertisement';\t----- bird -----\tstudent_club",
    "1336": "SELECT m.department\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.last_name IN ('Pierce', 'Guidi');\t----- bird -----\tstudent_club",
    "1337": "SELECT SUM(budget.amount) AS total_budgeted_amount\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nWHERE event.event_name = 'October Speaker';\t----- bird -----\tstudent_club",
    "1338": "SELECT \n    expense_id,\n    expense_description,\n    expense_date,\n    cost,\n    approved\nFROM expense\nWHERE link_to_budget IN (\n    SELECT budget_id\n    FROM budget\n    WHERE link_to_event = (\n        SELECT event_id\n        FROM event\n        WHERE event_name = 'October Meeting' AND event_date = '2019-10-08'\n    )\n);\t----- bird -----\tstudent_club",
    "1339": "SELECT \n    AVG(e.cost) AS average_cost\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nWHERE \n    m.first_name = 'Elijah' \n    AND m.last_name = 'Allen'\n    AND strftime('%m', e.expense_date) IN ('09', '10');\t----- bird -----\tstudent_club",
    "1340": "SELECT \n    (SELECT SUM(e.cost)\n     FROM expense e\n     JOIN budget b ON e.link_to_budget = b.budget_id\n     JOIN event ev ON b.link_to_event = ev.event_id\n     WHERE strftime('%Y', ev.event_date) = '2020') AS total_2020,\n\n    (SELECT SUM(e.cost)\n     FROM expense e\n     JOIN budget b ON e.link_to_budget = b.budget_id\n     JOIN event ev ON b.link_to_event = ev.event_id\n     WHERE strftime('%Y', ev.event_date) = '2019') AS total_2019,\n\n    (SELECT SUM(e.cost)\n     FROM expense e\n     JOIN budget b ON e.link_to_budget = b.budget_id\n     JOIN event ev ON b.link_to_event = ev.event_id\n     WHERE strftime('%Y', ev.event_date) = '2020') \n    - \n    (SELECT SUM(e.cost)\n     FROM expense e\n     JOIN budget b ON e.link_to_budget = b.budget_id\n     JOIN event ev ON b.link_to_event = ev.event_id\n     WHERE strftime('%Y', ev.event_date) = '2019') AS difference;\t----- bird -----\tstudent_club",
    "1341": "SELECT location\nFROM event\nWHERE event_name = 'Spring Budget Review';\t----- bird -----\tstudent_club",
    "1342": "SELECT cost\nFROM expense\nWHERE expense_description = 'Posters'\n  AND expense_date = '2019/9/4';\t----- bird -----\tstudent_club",
    "1343": "SELECT remaining\nFROM budget\nWHERE category = 'Food'\nORDER BY amount DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1344": "SELECT notes\nFROM income\nWHERE date_received = '2019/9/14';\t----- bird -----\tstudent_club",
    "1345": "SELECT COUNT(*) AS major_count\nFROM major\nWHERE college = 'College of Humanities and Social Sciences';\t----- bird -----\tstudent_club",
    "1346": "SELECT phone\nFROM member\nWHERE first_name = 'Carlo' AND last_name = 'Jacobs';\t----- bird -----\tstudent_club",
    "1347": "SELECT z.county\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher';\t----- bird -----\tstudent_club",
    "1348": "with the budget table**\n\nWe will join the `budget` table using the `link_to_event` field to get all budgets associated with that event.\n\n---\n\n### **Step 3: Determine if the budget was exceeded**\n\nA budget is considered **exceeded** if the **spent amount is greater than the amount allocated**.\n\nSo, we need to count the number of rows where:\n\n```sql\nspent > amount\n```\n\n---\n\n### \u2705 Final SQL Query:\n\n```sql\nSELECT COUNT(*) AS exceeded_budgets\nFROM budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM event\n    WHERE event_name = 'November Meeting'\n)\nAND spent > amount;\t----- bird -----\tstudent_club",
    "1349": "SELECT SUM(b.amount) AS total_budget_amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'September Speaker';\t----- bird -----\tstudent_club",
    "1350": "SELECT e.status\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description = 'Post Cards, Posters'\n  AND ex.expense_date = '2019/8/20';\t----- bird -----\tstudent_club",
    "1351": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';\t----- bird -----\tstudent_club",
    "1352": "SELECT COUNT(*) AS medium_business_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business'\n  AND member.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "1353": "SELECT z.type\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';\t----- bird -----\tstudent_club",
    "1354": "SELECT m.major_name\nFROM member\nJOIN major m ON member.link_to_major = m.major_id\nWHERE member.position = 'Vice President';\t----- bird -----\tstudent_club",
    "1355": "SELECT z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';\t----- bird -----\tstudent_club",
    "1356": "SELECT m.department\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.position = 'President';\t----- bird -----\tstudent_club",
    "1357": "SELECT i.date_received\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.first_name = 'Connor' AND m.last_name = 'Hilton';\t----- bird -----\tstudent_club",
    "1358": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    i.date_received\nFROM \n    income i\nJOIN \n    member m ON i.link_to_member = m.member_id\nWHERE \n    i.source = 'dues'\nORDER BY \n    i.date_received ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1359": "SELECT event_id, event_name FROM event WHERE event_name IN ('Yearly Kickoff', 'October Meeting');\t----- bird -----\tstudent_club",
    "1360": "SELECT \n    (100.0 * \n     (SELECT SUM(amount) \n      FROM budget \n      WHERE link_to_event = e.event_id AND category = 'Parking') \n     / \n     (SELECT SUM(amount) \n      FROM budget \n      WHERE link_to_event = e.event_id)) AS parking_percentage\nFROM \n    event e\nWHERE \n    e.event_name = 'November Speaker';\t----- bird -----\tstudent_club",
    "1361": "SELECT SUM(cost) AS total_pizza_cost\nFROM expense\nWHERE expense_description LIKE '%pizza%';\t----- bird -----\tstudent_club",
    "1362": "SELECT COUNT(DISTINCT city) AS city_count\nFROM zip_code\nWHERE county = 'Orange' AND state = 'Virginia';\t----- bird -----\tstudent_club",
    "1363": "SELECT DISTINCT department\nFROM major\nWHERE college = 'College of Humanities and Social Sciences';\t----- bird -----\tstudent_club",
    "1364": "SELECT z.city AS hometown\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Amy' AND m.last_name = 'Firth';\t----- bird -----\tstudent_club",
    "1365": "SELECT e.*\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE b.remaining = (\n    SELECT MIN(remaining)\n    FROM budget\n);\t----- bird -----\tstudent_club",
    "1366": "SELECT m.member_id, m.first_name, m.last_name, m.email\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'October Meeting';\t----- bird -----\tstudent_club",
    "1367": "SELECT m.college, COUNT(*) AS member_count\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nGROUP BY m.college\nORDER BY member_count DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1368": "SELECT m.major_name\nFROM member\nJOIN major m ON member.link_to_major = m.major_id\nWHERE member.phone = '809-555-3360';\t----- bird -----\tstudent_club",
    "1369": "SELECT \n    e.event_id,\n    e.event_name,\n    SUM(b.amount) AS total_budget\nFROM \n    budget b\nJOIN \n    event e ON b.link_to_event = e.event_id\nGROUP BY \n    e.event_id, e.event_name\nORDER BY \n    total_budget DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1370": "SELECT member_id\n   FROM member\n   WHERE position = 'Vice President';\t----- bird -----\tstudent_club",
    "1371": "SELECT COUNT(DISTINCT link_to_member) AS number_of_attendees\nFROM attendance\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer';\t----- bird -----\tstudent_club",
    "1372": "SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason';\t----- bird -----\tstudent_club",
    "1373": "SELECT COUNT(*) AS members_from_maryland\nFROM member\nJOIN zip_code ON member.zip = zip_code.zip_code\nWHERE zip_code.state = 'Maryland';\t----- bird -----\tstudent_club",
    "1374": "SELECT COUNT(DISTINCT a.link_to_event) AS event_count\nFROM attendance a\nJOIN member m ON a.link_to_member = m.member_id\nWHERE m.phone = '954-555-6240';\t----- bird -----\tstudent_club",
    "1375": "SELECT m.member_id, m.first_name, m.last_name, m.email, m.position\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.department = 'School of Applied Sciences, Technology and Education';\t----- bird -----\tstudent_club",
    "1376": "SELECT \n    e.event_id,\n    e.event_name,\n    b.amount AS total_budget,\n    SUM(e2.cost) AS total_spent,\n    (SUM(e2.cost) / b.amount) AS spend_to_budget_ratio\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event\nJOIN \n    expense e2 ON b.budget_id = e2.link_to_budget\nWHERE \n    e.status = 'closed'\nGROUP BY \n    e.event_id, e.event_name, b.amount\nORDER BY \n    spend_to_budget_ratio DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1377": "SELECT COUNT(*) AS num_presidents\nFROM member\nWHERE position = 'president';\t----- bird -----\tstudent_club",
    "1378": "SELECT MAX(spent) AS highest_budget_spent\nFROM budget;\t----- bird -----\tstudent_club",
    "1379": "SELECT COUNT(*) AS meeting_count\nFROM event\nWHERE type = 'meeting'\n  AND strftime('%Y', event_date) = '2020';\t----- bird -----\tstudent_club",
    "1380": "SELECT SUM(cost) AS total_food_spent\nFROM expense\nWHERE expense_description LIKE '%food%';\t----- bird -----\tstudent_club",
    "1381": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM attendance a\nJOIN member m ON a.link_to_member = m.member_id\nGROUP BY m.member_id\nHAVING COUNT(a.link_to_event) > 7;\t----- bird -----\tstudent_club",
    "1382": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE ma.major_name = 'interior design'\n  AND e.event_name = 'Community Theater';\t----- bird -----\tstudent_club",
    "1383": "SELECT zip_code\n   FROM zip_code\n   WHERE city = 'Georgetown' AND state = 'South Carolina';\t----- bird -----\tstudent_club",
    "1384": "SELECT SUM(i.amount) AS total_income\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour';\t----- bird -----\tstudent_club",
    "1385": "SELECT m.first_name, m.last_name\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE i.amount > 40;\t----- bird -----\tstudent_club",
    "1386": "SELECT SUM(e.cost) AS total_expense\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Yearly Kickoff';\t----- bird -----\tstudent_club",
    "1387": "SELECT m.first_name, m.last_name\nFROM member m\nWHERE m.member_id = (\n    SELECT e.link_to_member\n    FROM expense e\n    WHERE e.link_to_budget = (\n        SELECT b.budget_id\n        FROM budget b\n        WHERE b.link_to_event = (\n            SELECT e2.event_id\n            FROM event e2\n            WHERE e2.event_name = 'Yearly Kickoff'\n        )\n    )\n    LIMIT 1\n);\t----- bird -----\tstudent_club",
    "1388": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    i.source,\n    SUM(i.amount) AS total_income\nFROM \n    income i\nJOIN \n    member m ON i.link_to_member = m.member_id\nGROUP BY \n    m.member_id, i.source\nORDER BY \n    total_income DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1389": "SELECT \n    e.event_id,\n    e.event_name,\n    SUM(ex.cost) AS total_cost\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event\nJOIN \n    expense ex ON b.budget_id = ex.link_to_budget\nGROUP BY \n    e.event_id, e.event_name\nORDER BY \n    total_cost ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1390": "SELECT \n    (100.0 * \n     (SELECT SUM(e.cost) \n      FROM expense e\n      JOIN event ev ON e.link_to_budget IN (\n          SELECT budget_id \n          FROM budget \n          WHERE link_to_event = ev.event_id\n      )\n      WHERE ev.event_name = 'Yearly Kickoff')\n    /\n     (SELECT SUM(e.cost) \n      FROM expense e\n      JOIN event ev ON e.link_to_budget IN (\n          SELECT budget_id \n          FROM budget \n          WHERE link_to_event = ev.event_id\n      ))\n    ) AS percentage_of_total_cost;\t----- bird -----\tstudent_club",
    "1391": "SELECT\n    COUNT(CASE WHEN m.link_to_major = f.major_id THEN 1 END) AS finance_count,\n    COUNT(CASE WHEN m.link_to_major = p.major_id THEN 1 END) AS physics_count,\n    ROUND(\n        COUNT(CASE WHEN m.link_to_major = f.major_id THEN 1 END) * 1.0 /\n        NULLIF(COUNT(CASE WHEN m.link_to_major = p.major_id THEN 1 END), 0),\n        2\n    ) AS finance_to_physics_ratio\nFROM\n    member m\nCROSS JOIN\n    (SELECT major_id FROM major WHERE major_name = 'Finance') f\nCROSS JOIN\n    (SELECT major_id FROM major WHERE major_name = 'Physics') p;\t----- bird -----\tstudent_club",
    "1392": "SELECT \n    source, \n    SUM(amount) AS total_amount\nFROM \n    income\nWHERE \n    date_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY \n    source\nORDER BY \n    total_amount DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1393": "SELECT \n    first_name || ' ' || last_name AS full_name,\n    email\nFROM \n    member\nWHERE \n    position = 'Secretary';\t----- bird -----\tstudent_club",
    "1394": "SELECT COUNT(*) AS physics_teaching_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Physics Teaching';\t----- bird -----\tstudent_club",
    "1395": "SELECT COUNT(DISTINCT link_to_member) AS number_of_attendees\nFROM attendance\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Community Theater'\n  AND event.event_date LIKE '2019%';\t----- bird -----\tstudent_club",
    "1396": "SELECT \n    COUNT(a.link_to_event) AS events_attended,\n    m2.major_name AS major\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN major m2 ON m.link_to_major = m2.major_id\nWHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi';\t----- bird -----\tstudent_club",
    "1397": "SELECT AVG(food_cost_per_event) AS average_food_cost_per_event\nFROM (\n    SELECT e.link_to_event, SUM(e.cost) AS food_cost_per_event\n    FROM expense e\n    JOIN budget b ON e.link_to_budget = b.budget_id\n    WHERE e.expense_description LIKE '%food%' OR e.expense_description LIKE '%Food%'\n    GROUP BY e.link_to_event\n);\t----- bird -----\tstudent_club",
    "1398": "SELECT e.event_name, b.spent\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE b.category = 'advertisement'\nORDER BY b.spent DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1399": "SELECT \n    a.link_to_event,\n    a.link_to_member,\n    e.event_name,\n    m.first_name,\n    m.last_name\nFROM \n    attendance a\nJOIN \n    event e ON a.link_to_event = e.event_id\nJOIN \n    member m ON a.link_to_member = m.member_id\nWHERE \n    m.first_name = 'Maya' \n    AND m.last_name = 'Mclean'\n    AND e.event_name = 'Women''s Soccer';\t----- bird -----\tstudent_club",
    "1400": "SELECT\n    100.0 * COUNT(CASE WHEN type = 'Community Service' THEN 1 END) / COUNT(*) AS community_service_percentage\nFROM\n    event\nWHERE\n    strftime('%Y', event_date) = '2019';\t----- bird -----\tstudent_club",
    "1401": "SELECT e.cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'September Speaker'\n  AND e.expense_description = 'posters';\t----- bird -----\tstudent_club",
    "1402": "SELECT t_shirt_size, COUNT(*) AS count\nFROM member\nWHERE t_shirt_size IS NOT NULL\nGROUP BY t_shirt_size\nORDER BY count DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1403": "SELECT \n    e.event_name,\n    (SUM(ex.cost) - b.amount) AS excess\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event\nJOIN \n    expense ex ON ex.link_to_budget = b.budget_id\nWHERE \n    e.status = 'closed'\nGROUP BY \n    e.event_id, e.event_name, b.amount\nORDER BY \n    excess DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1404": "SELECT \n    e.expense_description AS expense_type,\n    SUM(e.cost) AS total_cost\nFROM \n    expense e\nJOIN \n    budget b ON e.link_to_budget = b.budget_id\nJOIN \n    event evt ON b.link_to_event = evt.event_id\nWHERE \n    evt.event_name = 'October Meeting'\n    AND e.approved = 'Yes'\nGROUP BY \n    e.expense_description;\t----- bird -----\tstudent_club",
    "1405": "SELECT \n    budget.category,\n    budget.amount\nFROM \n    budget\nJOIN \n    event ON budget.link_to_event = event.event_id\nWHERE \n    event.event_name = 'April Speaker'\nORDER BY \n    budget.amount ASC;\t----- bird -----\tstudent_club",
    "1406": "SELECT budget_id, amount\nFROM budget\nWHERE category = 'Food'\nORDER BY amount DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1407": "SELECT budget_id, category, amount\nFROM budget\nWHERE category = 'Advertising'\nORDER BY amount DESC\nLIMIT 3;\t----- bird -----\tstudent_club",
    "1408": "SELECT SUM(b.spent) AS total_parking_cost\nFROM budget b\nWHERE b.category = 'Parking';\t----- bird -----\tstudent_club",
    "1409": "SELECT SUM(cost) AS total_expense\nFROM expense\nWHERE expense_date = '8/20/2019';\t----- bird -----\tstudent_club",
    "1410": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    SUM(e.cost) AS total_cost\nFROM \n    member m\nJOIN \n    expense e ON m.member_id = e.link_to_member\nWHERE \n    m.member_id = 'rec4BLdZHS2Blfp4v';\t----- bird -----\tstudent_club",
    "1411": "SELECT expense_description\nFROM expense\nWHERE link_to_member = (\n    SELECT member_id\n    FROM member\n    WHERE first_name = 'Sacha' AND last_name = 'Harrison'\n);\t----- bird -----\tstudent_club",
    "1412": "SELECT DISTINCT expense.expense_description\nFROM member\nJOIN expense ON member.member_id = expense.link_to_member\nWHERE member.t_shirt_size = 'X-Large';\t----- bird -----\tstudent_club",
    "1413": "SELECT m.zip\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE e.cost < 50;\t----- bird -----\tstudent_club",
    "1414": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Phillip' AND mb.last_name = 'Cullen';\t----- bird -----\tstudent_club",
    "1415": "SELECT m.position\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Business';\t----- bird -----\tstudent_club",
    "1416": "SELECT COUNT(*) AS medium_business_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business'\n  AND member.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "1417": "SELECT DISTINCT e.type\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.remaining > 30;\t----- bird -----\tstudent_club",
    "1418": "SELECT DISTINCT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.location = 'MU 215';\t----- bird -----\tstudent_club",
    "1419": "SELECT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.event_date = '2020-03-24T12:00:00';\t----- bird -----\tstudent_club",
    "1420": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.position = 'Vice President';\t----- bird -----\tstudent_club",
    "1421": "SELECT \n    (COUNT(CASE WHEN m.major_name = 'Business' THEN 1 END) * 100.0 / COUNT(*)) AS business_percentage\nFROM \n    member mem\nJOIN \n    major m ON mem.link_to_major = m.major_id;\t----- bird -----\tstudent_club",
    "1422": "SELECT DISTINCT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.location = 'MU 215';\t----- bird -----\tstudent_club",
    "1423": "SELECT COUNT(*) \nFROM income\nWHERE amount = 50;\t----- bird -----\tstudent_club",
    "1424": "SELECT COUNT(*) AS num_extra_large\nFROM member\nWHERE t_shirt_size = 'XL';\t----- bird -----\tstudent_club",
    "1425": "SELECT COUNT(*) AS major_count\nFROM major\nWHERE college = 'College of Agriculture and Applied Sciences'\n  AND department = 'School of Applied Sciences, Technology and Education';\t----- bird -----\tstudent_club",
    "1426": "SELECT \n    m.last_name,\n    ma.department,\n    ma.college\nFROM \n    member m\nJOIN \n    major ma ON m.link_to_major = ma.major_id\nWHERE \n    ma.major_name = 'Environmental Engineering';\t----- bird -----\tstudent_club",
    "1427": "SELECT DISTINCT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.location = 'MU 215'\n  AND e.type = 'guest speaker'\n  AND b.spent = 0;\t----- bird -----\tstudent_club",
    "1428": "SELECT DISTINCT z.city, z.state\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE ma.department = 'Electrical and Computer Engineering';\t----- bird -----\tstudent_club",
    "1429": "SELECT e.event_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.position = 'Vice President'\n  AND z.city = 'Champaign'\n  AND z.state = 'IL';\t----- bird -----\tstudent_club",
    "1430": "SELECT m.last_name, m.position\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE e.expense_description = 'pizza'\n  AND e.expense_date = '09/10/2019';\t----- bird -----\tstudent_club",
    "1431": "SELECT DISTINCT m.last_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'women''s soccer';\t----- bird -----\tstudent_club",
    "1432": "SELECT \n    (COUNT(CASE WHEN i.amount = 50 AND i.source = 'Student_Club' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    member m\nJOIN \n    income i ON m.member_id = i.link_to_member\nWHERE \n    m.t_shirt_size = 'medium';\t----- bird -----\tstudent_club",
    "1433": "SELECT DISTINCT\n    CASE\n        WHEN short_state IN ('AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY') THEN 'United States'\n        WHEN short_state IN ('AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT') THEN 'Canada'\n        ELSE 'Unknown'\n    END AS country\nFROM zip_code\nWHERE type = 'Post Office Box';\t----- bird -----\tstudent_club",
    "1434": "SELECT zip_code\nFROM zip_code\nWHERE city = 'San Juan'\n  AND state = 'Puerto Rico'\n  AND type = 'PO Box';\t----- bird -----\tstudent_club",
    "1435": "SELECT event_name\nFROM event\nWHERE type = 'game'\n  AND status = 'closed'\n  AND event_date BETWEEN '3/15/2019' AND '3/20/2020';\t----- bird -----\tstudent_club",
    "1436": "SELECT DISTINCT a.link_to_event\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nJOIN attendance a ON m.member_id = a.link_to_member\nGROUP BY m.member_id\nHAVING SUM(i.amount) > 50;\t----- bird -----\tstudent_club",
    "1437": "SELECT \n    m.first_name || ' ' || m.last_name AS member_name,\n    a.link_to_event AS event_id\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nJOIN \n    attendance a ON m.member_id = a.link_to_member\nWHERE \n    e.approved BETWEEN '1/10/2019' AND '11/19/2019';\t----- bird -----\tstudent_club",
    "1438": "SELECT m.college\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Katy'\n  AND mb.link_to_major = 'rec1N0upiVLy5esTO';\t----- bird -----\tstudent_club",
    "1439": "SELECT m.phone\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Business'\n  AND ma.college = 'College of Agriculture and Applied Sciences';\t----- bird -----\tstudent_club",
    "1440": "SELECT m.email\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE i.date_received BETWEEN '9/10/2019' AND '11/19/2019'\n  AND i.amount > 20;\t----- bird -----\tstudent_club",
    "1441": "SELECT COUNT(*) AS education_members_count\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Education'\n  AND major.college = 'College of Education & Human Services';\t----- bird -----\tstudent_club",
    "1442": "SELECT \n    100.0 * COUNT(CASE WHEN total_expense > budget.amount THEN 1 END) / COUNT(*) AS over_budget_percentage\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nLEFT JOIN (\n    SELECT \n        link_to_budget, \n        SUM(cost) AS total_expense\n    FROM expense\n    GROUP BY link_to_budget\n) AS expense_summary ON budget.budget_id = expense_summary.link_to_budget;\t----- bird -----\tstudent_club",
    "1443": "SELECT \n    event_id, \n    location, \n    status\nFROM \n    event\nWHERE \n    event_date >= '2019-11-01' \n    AND event_date <= '2020-03-31';\t----- bird -----\tstudent_club",
    "1444": "SELECT \n    expense_id,\n    expense_description,\n    cost\nFROM \n    expense\nWHERE \n    cost > 50;\t----- bird -----\tstudent_club",
    "1445": "SELECT first_name, last_name\nFROM member\nWHERE t_shirt_size = 'extra large';\t----- bird -----\tstudent_club",
    "1446": "SELECT \n    100.0 * COUNT(CASE WHEN type = 'PO Box' THEN 1 END) / COUNT(*) AS po_box_percentage\nFROM zip_code;\t----- bird -----\tstudent_club",
    "1447": "SELECT \n    e.event_name,\n    e.location\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event\nLEFT JOIN \n    expense ex ON b.budget_id = ex.link_to_budget\nGROUP BY \n    e.event_id, e.event_name, e.location\nHAVING \n    SUM(ex.cost) < b.amount;\t----- bird -----\tstudent_club",
    "1448": "SELECT \n    e.event_name,\n    e.event_date\nFROM \n    event e\nJOIN \n    expense ex ON e.event_id = ex.link_to_event\nWHERE \n    ex.expense_description = 'pizza'\n    AND ex.cost > 50\n    AND ex.cost < 100;\t----- bird -----\tstudent_club",
    "1449": "SELECT \n    m.first_name || ' ' || m.last_name AS member_name,\n    mj.major_name AS major\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nJOIN \n    major mj ON m.link_to_major = mj.major_id\nWHERE \n    e.cost > 100;\t----- bird -----\tstudent_club",
    "1450": "SELECT \n    z.city,\n    z.state\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event\nJOIN \n    expense ex ON b.budget_id = ex.link_to_budget\nJOIN \n    member m ON ex.link_to_member = m.member_id\nJOIN \n    zip_code z ON m.zip = z.zip_code\nGROUP BY \n    e.event_id, z.city, z.state\nHAVING \n    COUNT(i.income_id) > 40;\t----- bird -----\tstudent_club",
    "1451": "SELECT \n    m.member_id,\n    m.first_name || ' ' || m.last_name AS full_name,\n    SUM(e.cost) AS total_expense\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nGROUP BY \n    m.member_id\nHAVING \n    COUNT(DISTINCT e.link_to_event) > 1\nORDER BY \n    total_expense DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1452": "SELECT AVG(i.amount) AS average_paid\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE m.position != 'member';\t----- bird -----\tstudent_club",
    "1453": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description = 'parking'\nGROUP BY e.event_id\nHAVING AVG(ex.cost) < (\n    SELECT AVG(ex2.cost)\n    FROM expense ex2\n    JOIN budget b2 ON ex2.link_to_budget = b2.budget_id\n    JOIN event e2 ON b2.link_to_event = e2.event_id\n    WHERE ex2.expense_description = 'parking'\n);\t----- bird -----\tstudent_club",
    "1454": "SELECT \n    100.0 * \n    (\n        SELECT SUM(e.cost)\n        FROM expense e\n        JOIN budget b ON e.link_to_budget = b.budget_id\n        JOIN event ev ON b.link_to_event = ev.event_id\n        WHERE ev.type = 'meeting'\n    ) / \n    (\n        SELECT SUM(cost)\n        FROM expense\n    ) AS meeting_event_cost_percentage;\t----- bird -----\tstudent_club",
    "1455": "SELECT \n    link_to_event,\n    SUM(amount) AS total_allowed\nFROM \n    budget\nWHERE \n    category IN ('water', 'chips', 'cookies')\nGROUP BY \n    link_to_event\nORDER BY \n    total_allowed DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "1456": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    SUM(e.cost) AS total_spent\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nGROUP BY \n    m.member_id, m.first_name, m.last_name\nORDER BY \n    total_spent DESC\nLIMIT 5;\t----- bird -----\tstudent_club",
    "1457": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    m.phone\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nWHERE \n    e.cost > (\n        SELECT AVG(cost)\n        FROM expense\n    );\t----- bird -----\tstudent_club",
    "1458": "SELECT \n    100.0 * nj_count / total_members AS nj_percentage,\n    100.0 * vt_count / total_members AS vt_percentage,\n    (100.0 * nj_count / total_members) - (100.0 * vt_count / total_members) AS percentage_difference\nFROM\n    (SELECT COUNT(*) AS total_members FROM member) AS total,\n    (SELECT COUNT(*) AS nj_count \n     FROM member m\n     JOIN zip_code z ON m.zip = z.zip_code\n     WHERE z.state = 'New Jersey') AS nj,\n    (SELECT COUNT(*) AS vt_count \n     FROM member m\n     JOIN zip_code z ON m.zip = z.zip_code\n     WHERE z.state = 'Vermont') AS vt;\t----- bird -----\tstudent_club",
    "1459": "SELECT \n    m.first_name,\n    m.last_name,\n    ma.major_name,\n    ma.department\nFROM \n    member m\nJOIN \n    major ma ON m.link_to_major = ma.major_id\nWHERE \n    m.first_name = 'Garrett' AND m.last_name = 'Gerke';\t----- bird -----\tstudent_club",
    "1460": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    SUM(e.cost) AS total_cost\nFROM \n    expense e\nJOIN \n    member m ON e.link_to_member = m.member_id\nWHERE \n    e.expense_description IN ('water', 'veggie tray', 'supplies')\nGROUP BY \n    m.member_id, m.first_name, m.last_name;\t----- bird -----\tstudent_club",
    "1461": "SELECT m.last_name, m.phone\nFROM member m\nJOIN major mj ON m.link_to_major = mj.major_id\nWHERE mj.major_name = 'Elementary Education';\t----- bird -----\tstudent_club",
    "1462": "SELECT b.category, b.amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'January Speaker';\t----- bird -----\tstudent_club",
    "1463": "SELECT DISTINCT e.event_name\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE b.category = 'food';\t----- bird -----\tstudent_club",
    "1464": "SELECT \n    m.first_name,\n    m.last_name,\n    i.amount\nFROM \n    income i\nJOIN \n    member m ON i.link_to_member = m.member_id\nWHERE \n    i.date_received = '9/9/2019';\t----- bird -----\tstudent_club",
    "1465": "SELECT b.category\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE e.expense_description = 'Posters';\t----- bird -----\tstudent_club",
    "1466": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    mj.college\nFROM \n    member m\nJOIN \n    major mj ON m.link_to_major = mj.major_id\nWHERE \n    m.position = 'Secretary';\t----- bird -----\tstudent_club",
    "1467": "SELECT \n    e.event_name,\n    SUM(exp.cost) AS total_spent_on_speaker_gifts\nFROM \n    expense exp\nJOIN \n    budget b ON exp.link_to_budget = b.budget_id\nJOIN \n    event e ON b.link_to_event = e.event_id\nWHERE \n    exp.expense_description = 'speaker gift'\nGROUP BY \n    e.event_name;\t----- bird -----\tstudent_club",
    "1468": "SELECT z.city AS hometown\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';\t----- bird -----\tstudent_club",
    "1469": "SELECT \n    member.first_name,\n    member.last_name,\n    member.position\nFROM \n    member\nJOIN \n    zip_code ON member.zip = zip_code.zip_code\nWHERE \n    zip_code.zip_code = 28092\n    AND zip_code.city = 'Lincolnton'\n    AND zip_code.state = 'North Carolina';\t----- bird -----\tstudent_club",
    "1470": "SELECT COUNT(*) AS PremiumGasStationsInCZE\nFROM gasstations\nWHERE Country = 'CZE' AND Segment = 'Premium';\t----- bird -----\tdebit_card_specializing",
    "1471": "SELECT\n    (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Price IS NOT NULL AND CustomerID IS NOT NULL AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) AS EUR_Customers,\n    (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Price IS NOT NULL AND CustomerID IS NOT NULL AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK')) AS CZK_Customers,\n    (\n        (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Price IS NOT NULL AND CustomerID IS NOT NULL AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')) *\n        1.0 /\n        (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Price IS NOT NULL AND CustomerID IS NOT NULL AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK'))\n    ) AS Ratio_EUR_to_CZK;\t----- bird -----\tdebit_card_specializing",
    "1472": "SELECT \n    ym.CustomerID,\n    SUM(ym.Consumption) AS TotalConsumption\nFROM \n    yearmonth ym\nJOIN \n    transactions_1k t ON ym.CustomerID = t.CustomerID\nJOIN \n    gasstations g ON t.GasStationID = g.GasStationID\nWHERE \n    g.Country IN ('Argentina', 'Brazil', 'Chile', 'Colombia', 'Mexico', 'Peru')  -- Example LAM countries\n    AND ym.Date BETWEEN '2012-01-01' AND '2012-12-31'\nGROUP BY \n    ym.CustomerID\nORDER BY \n    TotalConsumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1473": "SELECT AVG(ym.Consumption) AS AverageMonthlyConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME'\n  AND ym.Date BETWEEN '2013-01' AND '2013-12';\t----- bird -----\tdebit_card_specializing",
    "1474": "SELECT \n    c.CustomerID\nFROM \n    customers c\nJOIN \n    yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE \n    c.Currency = 'CZK'\n    AND substr(ym.Date, 1, 4) = '2011'\nGROUP BY \n    c.CustomerID\nORDER BY \n    SUM(ym.Consumption) DESC;\t----- bird -----\tdebit_card_specializing",
    "1475": "SELECT COUNT(DISTINCT c.CustomerID) AS CustomerCount\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Segment = 'KAM'\n  AND ym.Date LIKE '2012%'\n  AND ym.Consumption < 30000;\t----- bird -----\tdebit_card_specializing",
    "1476": "SELECT \n    SUM(CASE WHEN c.Currency = 'CZK' THEN ym.Consumption ELSE 0 END) AS CZK_Consumption,\n    SUM(CASE WHEN c.Currency = 'EUR' THEN ym.Consumption ELSE 0 END) AS EUR_Consumption,\n    SUM(CASE WHEN c.Currency = 'CZK' THEN ym.Consumption ELSE 0 END) - \n    SUM(CASE WHEN c.Currency = 'EUR' THEN ym.Consumption ELSE 0 END) AS Consumption_Difference\nFROM \n    customers c\nJOIN \n    yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE \n    strftime('%Y', ym.Date) = '2012';\t----- bird -----\tdebit_card_specializing",
    "1477": "SELECT strftime('%Y', Date) AS Year, SUM(Amount) AS TotalGasUse\nFROM transactions_1k\nJOIN customers ON transactions_1k.CustomerID = customers.CustomerID\nWHERE customers.Currency = 'EUR'\nGROUP BY Year\nORDER BY TotalGasUse DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1478": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1479": "SELECT \n    strftime('%Y', t.Date) AS Year,\n    SUM(t.Amount * t.Price) AS TotalConsumption\nFROM \n    transactions_1k t\nJOIN \n    customers c ON t.CustomerID = c.CustomerID\nWHERE \n    c.Currency = 'CZK'\nGROUP BY \n    Year\nORDER BY \n    TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1480": "SELECT Date AS PeakMonth\nFROM yearmonth\nWHERE CustomerID IN (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'SME'\n)\n  AND Date BETWEEN '2013-01' AND '2013-12'\nGROUP BY Date\nORDER BY SUM(Consumption) DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1481": "WITH CustomerConsumption AS (\n    SELECT \n        c.CustomerID,\n        c.Segment,\n        SUM(t.Amount * t.Price) AS TotalConsumption\n    FROM transactions_1k t\n    JOIN customers c ON t.CustomerID = c.CustomerID\n    WHERE t.Date BETWEEN '2013-01-01' AND '2013-12-31'\n      AND c.Currency = 'CZK'\n    GROUP BY c.CustomerID, c.Segment\n),\nSegmentAverages AS (\n    SELECT \n        Segment,\n        AVG(TotalConsumption) AS AvgConsumption\n    FROM CustomerConsumption\n    GROUP BY Segment\n)\nSELECT\n    (SELECT AvgConsumption FROM SegmentAverages WHERE Segment = 'SME') - \n    (SELECT AvgConsumption FROM SegmentAverages WHERE Segment = 'LAM') AS SME_LAM_Diff,\n    (SELECT AvgConsumption FROM SegmentAverages WHERE Segment = 'LAM') - \n    (SELECT AvgConsumption FROM SegmentAverages WHERE Segment = 'KAM') AS LAM_KAM_Diff,\n    (SELECT AvgConsumption FROM SegmentAverages WHERE Segment = 'KAM') - \n    (SELECT AvgConsumption FROM SegmentAverages WHERE Segment = 'SME') AS KAM_SME_Diff;\t----- bird -----\tdebit_card_specializing",
    "1482": "WITH SegmentConsumption AS (\n    SELECT \n        c.Segment,\n        SUBSTR(y.Date, 1, 4) AS Year,\n        SUM(y.Consumption) AS TotalConsumption\n    FROM customers c\n    JOIN yearmonth y ON c.CustomerID = y.CustomerID\n    WHERE c.Segment IN ('SME', 'LAM', 'KAM')\n      AND SUBSTR(y.Date, 1, 4) IN ('2012', '2013')\n    GROUP BY c.Segment, SUBSTR(y.Date, 1, 4)\n),\nSegmentGrowth AS (\n    SELECT \n        Segment,\n        SUM(CASE WHEN Year = '2012' THEN TotalConsumption ELSE 0 END) AS Consumption2012,\n        SUM(CASE WHEN Year = '2013' THEN TotalConsumption ELSE 0 END) AS Consumption2013\n    FROM SegmentConsumption\n    GROUP BY Segment\n),\nPercentageChange AS (\n    SELECT \n        Segment,\n        Consumption2012,\n        Consumption2013,\n        ROUND(\n            ((Consumption2013 - Consumption2012) / NULLIF(Consumption2012, 0)) * 100, \n            2\n        ) AS PercentageIncrease\n    FROM SegmentGrowth\n)\nSELECT \n    Segment,\n    PercentageIncrease\nFROM PercentageChange\nORDER BY PercentageIncrease DESC;\t----- bird -----\tdebit_card_specializing",
    "1483": "SELECT SUM(Consumption) AS TotalConsumption\nFROM yearmonth\nWHERE CustomerID = 6\n  AND Date BETWEEN '2013-08' AND '2013-11';\t----- bird -----\tdebit_card_specializing",
    "1484": "SELECT \n    (SELECT COUNT(*) \n     FROM gasstations \n     WHERE Segment = 'discount' AND Country = 'Czech Republic') \n    - \n    (SELECT COUNT(*) \n     FROM gasstations \n     WHERE Segment = 'discount' AND Country = 'Slovakia') AS Difference;\t----- bird -----\tdebit_card_specializing",
    "1485": "SELECT \n    (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '2013-04') \n    - \n    (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '2013-04') AS Difference;\t----- bird -----\tdebit_card_specializing",
    "1486": "SELECT \n    Currency,\n    COUNT(*) AS Count\nFROM customers\nWHERE Segment = 'SME'\nGROUP BY Currency\nHAVING Currency IN ('CZK', 'EUR');\t----- bird -----\tdebit_card_specializing",
    "1487": "SELECT c.CustomerID\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Segment = 'LAM'\n  AND c.Currency = 'Euro'\n  AND ym.Date = '2013-10'\nORDER BY ym.Consumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1488": "SELECT \n    CustomerID, \n    SUM(Consumption) AS TotalConsumption\nFROM \n    yearmonth\nGROUP BY \n    CustomerID\nORDER BY \n    TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1489": "SELECT SUM(Consumption) AS TotalConsumption\nFROM yearmonth\nWHERE CustomerID IN (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'KAM'\n)\nAND Date = '2013-05';\t----- bird -----\tdebit_card_specializing",
    "1490": "SELECT COUNT(*) FROM customers WHERE Segment = 'LAM';\t----- bird -----\tdebit_card_specializing",
    "1491": "SELECT \n    g.Country,\n    COUNT(DISTINCT g.GasStationID) AS ValueForMoneyGasStations\nFROM \n    gasstations g\nINNER JOIN \n    transactions_1k t ON g.GasStationID = t.GasStationID\nGROUP BY \n    g.Country\nORDER BY \n    ValueForMoneyGasStations DESC;\t----- bird -----\tdebit_card_specializing",
    "1492": "SELECT COUNT(*) FROM customers WHERE Segment = 'KAM';\t----- bird -----\tdebit_card_specializing",
    "1493": "SELECT \n    100.0 * COUNT(CASE WHEN Consumption > 528.3 THEN 1 END) / COUNT(*) AS percentage\nFROM \n    yearmonth\nWHERE \n    Date = '2012-02';\t----- bird -----\tdebit_card_specializing",
    "1494": "SELECT \n    100.0 * SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) / COUNT(*) AS PremiumPercentage\nFROM gasstations\nWHERE Country = 'Slovakia';\t----- bird -----\tdebit_card_specializing",
    "1495": "SELECT CustomerID, Consumption\nFROM yearmonth\nWHERE Date = '2013-09'\nORDER BY Consumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1496": "SELECT \n    c.Segment,\n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    customers c\nJOIN \n    yearmonth y ON c.CustomerID = y.CustomerID\nWHERE \n    y.Date = '2013-09'\nGROUP BY \n    c.Segment\nORDER BY \n    TotalConsumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1497": "SELECT \n    c.CustomerID\nFROM \n    yearmonth ym\nJOIN \n    customers c ON ym.CustomerID = c.CustomerID\nWHERE \n    c.Segment = 'SME'\n    AND ym.Date = '2012-06'\nORDER BY \n    ym.Consumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1498": "SELECT MAX(TotalConsumption) AS HighestMonthlyConsumption\nFROM (\n    SELECT CustomerID, Date, SUM(Consumption) AS TotalConsumption\n    FROM yearmonth\n    WHERE Date BETWEEN '2012-01' AND '2012-12'\n    GROUP BY CustomerID, Date\n);\t----- bird -----\tdebit_card_specializing",
    "1499": "SELECT MAX(total_consumption) AS biggest_monthly_consumption\nFROM (\n    SELECT \n        c.CustomerID,\n        y.Date,\n        SUM(y.Consumption) AS total_consumption\n    FROM \n        customers c\n    JOIN \n        yearmonth y ON c.CustomerID = y.CustomerID\n    WHERE \n        c.Currency = 'EUR'\n    GROUP BY \n        c.CustomerID, y.Date\n);\t----- bird -----\tdebit_card_specializing",
    "1500": "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN products p ON t.ProductID = p.ProductID\nWHERE t.Date BETWEEN '2013-09-01' AND '2013-09-30';\t----- bird -----\tdebit_card_specializing",
    "1501": "SELECT DISTINCT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date BETWEEN '2013-06-01' AND '2013-06-30';\t----- bird -----\tdebit_card_specializing",
    "1502": "SELECT DISTINCT g.ChainID\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE c.Currency = 'Euro';\t----- bird -----\tdebit_card_specializing",
    "1503": "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN products p ON t.ProductID = p.ProductID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR';\t----- bird -----\tdebit_card_specializing",
    "1504": "SELECT AVG(Amount * Price) AS AverageTotalPrice\nFROM transactions_1k\nWHERE strftime('%Y-%m', Date) = '2012-01';\t----- bird -----\tdebit_card_specializing",
    "1505": "SELECT COUNT(DISTINCT c.CustomerID) AS Euro_Customers_Over_1000\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE c.Currency = 'Euro' AND ym.Consumption > 1000;\t----- bird -----\tdebit_card_specializing",
    "1506": "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'Czech Republic';\t----- bird -----\tdebit_card_specializing",
    "1507": "SELECT DISTINCT t.Time\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.ChainID = 11;\t----- bird -----\tdebit_card_specializing",
    "1508": "SELECT COUNT(*) AS TransactionCount\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic'\n  AND t.Price > 1000;\t----- bird -----\tdebit_card_specializing",
    "1509": "SELECT COUNT(*) AS TransactionCount\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic'\n  AND t.Date > '2012-01-01';\t----- bird -----\tdebit_card_specializing",
    "1510": "SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic';\t----- bird -----\tdebit_card_specializing",
    "1511": "SELECT AVG(total_price) AS AverageTotalPrice\nFROM (\n    SELECT t.CustomerID, SUM(t.Amount * t.Price) AS total_price\n    FROM transactions_1k t\n    JOIN customers c ON t.CustomerID = c.CustomerID\n    WHERE c.Currency = 'Euro'\n    GROUP BY t.CustomerID\n);\t----- bird -----\tdebit_card_specializing",
    "1512": "SELECT \n    CustomerID,\n    SUM(Amount * Price) AS TotalAmount\nFROM \n    transactions_1k\nWHERE \n    Date = '2012-08-25'\nGROUP BY \n    CustomerID\nORDER BY \n    TotalAmount DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1513": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-25'\n  AND t.Amount > 0  -- Ensures it's a paid transaction\nORDER BY t.Time ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1514": "SELECT c.Currency\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24'\n  AND t.Time = '16:25:00';\t----- bird -----\tdebit_card_specializing",
    "1515": "SELECT c.Segment\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';\t----- bird -----\tdebit_card_specializing",
    "1516": "SELECT COUNT(*) AS TransactionCount\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-26'\n  AND t.Time BETWEEN '00:00:00' AND '11:59:59'\n  AND c.Currency = 'CZK';\t----- bird -----\tdebit_card_specializing",
    "1517": "SELECT c.Segment\nFROM customers c\nWHERE c.CustomerID = (\n    SELECT MIN(CustomerID)\n    FROM customers\n);\t----- bird -----\tdebit_card_specializing",
    "1518": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';\t----- bird -----\tdebit_card_specializing",
    "1519": "SELECT ProductID\nFROM transactions_1k\nWHERE Date = '2012/8/23' AND Time = '21:20:00';\t----- bird -----\tdebit_card_specializing",
    "1520": "WITH TargetCustomer AS (\n    SELECT CustomerID\n    FROM transactions_1k\n    WHERE Date = '2012-08-24' AND Price * Amount = 124.05\n)\n\n-- Step 2: Use that CustomerID to find all transactions in January 2012\nSELECT \n    Date,\n    Price * Amount AS Expenses\nFROM \n    transactions_1k\nWHERE \n    CustomerID = (SELECT CustomerID FROM TargetCustomer)\n    AND Date BETWEEN '2012-01-01' AND '2012-01-31'\nORDER BY \n    Date;\t----- bird -----\tdebit_card_specializing",
    "1521": "SELECT COUNT(*) AS TransactionCount\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-26'\n  AND t.Time BETWEEN '08:00:00' AND '09:00:00'\n  AND g.Country = 'CZE';\t----- bird -----\tdebit_card_specializing",
    "1522": "SELECT c.Currency\nFROM customers c\nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID\nWHERE ym.Date = '2013-06' AND ym.Consumption = 214582.17;\t----- bird -----\tdebit_card_specializing",
    "1523": "SELECT DISTINCT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.CardID = 667467;\t----- bird -----\tdebit_card_specializing",
    "1524": "SELECT \n    c.CustomerID,\n    gs.Country AS Nationality\nFROM \n    transactions_1k t\nJOIN \n    customers c ON t.CustomerID = c.CustomerID\nJOIN \n    gasstations gs ON t.GasStationID = gs.GasStationID\nWHERE \n    t.Date = '2012/8/24'\n    AND t.Amount * t.Price = 548.4;\t----- bird -----\tdebit_card_specializing",
    "1525": "SELECT \n    100.0 * COUNT(DISTINCT CASE WHEN c.Currency = 'EUR' THEN t.CustomerID END) / COUNT(DISTINCT t.CustomerID) AS EUR_Percentage\nFROM \n    transactions_1k t\nLEFT JOIN \n    customers c ON t.CustomerID = c.CustomerID\nWHERE \n    t.Date = '2012-08-25';\t----- bird -----\tdebit_card_specializing",
    "1526": "WITH CustomerInfo AS (\n    SELECT CustomerID\n    FROM transactions_1k\n    WHERE Date = '2012-08-25' AND Price * Amount = 634.8\n),\nConsumptionData AS (\n    SELECT \n        ym.CustomerID,\n        SUM(CASE WHEN Date LIKE '2012%' THEN Consumption ELSE 0 END) AS Total2012,\n        SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) AS Total2013\n    FROM yearmonth ym\n    JOIN CustomerInfo ci ON ym.CustomerID = ci.CustomerID\n    GROUP BY ym.CustomerID\n)\nSELECT \n    CustomerID,\n    Total2012,\n    Total2013,\n    ((Total2012 - Total2013) / Total2012) * 100 AS DecreaseRate\nFROM ConsumptionData;\t----- bird -----\tdebit_card_specializing",
    "1527": "SELECT \n    GasStationID,\n    SUM(Amount * Price) AS TotalRevenue\nFROM \n    transactions_1k\nGROUP BY \n    GasStationID\nORDER BY \n    TotalRevenue DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1528": "SELECT\n    100.0 * COUNT(DISTINCT CASE WHEN c.Segment = 'premium' THEN c.CustomerID END) / COUNT(DISTINCT c.CustomerID) AS premium_percentage\nFROM\n    customers c\nJOIN\n    transactions_1k t ON c.CustomerID = t.CustomerID\nJOIN\n    gasstations g ON t.GasStationID = g.GasStationID\nWHERE\n    g.Country = 'SVK';\t----- bird -----\tdebit_card_specializing",
    "1529": "SELECT \n    SUM(Amount * Price) AS TotalSpent,\n    SUM(CASE \n        WHEN Date BETWEEN '2012-01-01' AND '2012-01-31' \n        THEN Amount * Price \n        ELSE 0 \n    END) AS SpentInJan2012\nFROM transactions_1k\nWHERE CustomerID = 38508;\t----- bird -----\tdebit_card_specializing",
    "1530": "SELECT \n    p.ProductID,\n    p.Description AS ProductName,\n    SUM(t.Amount) AS TotalUnitsSold\nFROM \n    transactions_1k t\nJOIN \n    products p ON t.ProductID = p.ProductID\nGROUP BY \n    p.ProductID, p.Description\nORDER BY \n    TotalUnitsSold DESC\nLIMIT 5;\t----- bird -----\tdebit_card_specializing",
    "1531": "SELECT \n    t.CustomerID,\n    c.Currency,\n    SUM(t.Amount * t.Price) AS TotalSpending,\n    AVG(t.Price) AS AveragePricePerItem\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nGROUP BY t.CustomerID, c.Currency\nORDER BY TotalSpending DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1532": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.ProductID = 2\nORDER BY t.Price DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "1533": "SELECT ym.CustomerID, ym.Consumption\nFROM yearmonth ym\nWHERE ym.Date = '2012-08'\n  AND ym.CustomerID IN (\n    SELECT DISTINCT t.CustomerID\n    FROM transactions_1k t\n    WHERE t.ProductID = 5\n      AND t.Price > 29.00\n  );\t----- bird -----\tdebit_card_specializing"
}